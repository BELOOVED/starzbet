/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/SDKTypescriptGenerator.kt
 */
import type { IAllMergeRulesDto } from "../sportsbookmodel/dto/mergerule/AllMergeRulesDto"
import type { IBetBoostDto } from "../sportsbook/sportsbookread/api/domain/oddsboost/dto/BetBoostDto"
import type { IBetContractDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/BetContractDto"
import type { IBetDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/BetDto"
import type { IBetHistoryDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/BetHistoryDto"
import type { IBetRequestDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/BetRequestDto"
import type { IBetRequestsSummaryDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/summary/BetRequestsSummaryDto"
import type { IBetStateDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/BetStateDto"
import type { IBetStateSummaryMeasuresDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/BetStateSummaryMeasuresDto"
import type { IBetsSummaryDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/summary/BetsSummaryDto"
import type { IBetsSummaryMeasuresDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/summary/BetsSummaryMeasuresDto"
import type { ICategoriesSummaryMeasuresDto } from "../sportsbook/sportsbookread/api/domain/line/dto/summary/CategoriesSummaryMeasuresDto"
import type { ICategoryDto } from "../sportsbook/sportsbookread/api/domain/line/dto/CategoryDto"
import type { ICountryDto } from "../sportsbook/sportsbookread/api/domain/line/dto/CountryDto"
import type { ICurrencyPairResultDto } from "../money/currencypair/model/CurrencyPairResultDto"
import type { ICustomMarketTranslate } from "../sportsbookmodel/dto/line/CustomMarketTranslate"
import type { IEventBetDetailsDto } from "../sportsbook/sportsbookread/api/domain/line/dto/EventBetDetailsDto"
import type { IEventDto } from "../sportsbookmodel/dto/line/EventDto"
import type { IEventsSummaryMeasuresDto } from "../sportsbook/sportsbookread/api/domain/line/dto/summary/EventsSummaryMeasuresDto"
import type { IFindAllCategoriesQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindAllCategoriesQuery"
import type { IFindAllEventsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindAllEventsQuery"
import type { IFindAllOutrightsByIdsCommand } from "../sportsbook/sportsbookread/api/domain/line/query/FindAllOutrightsByIdsCommand"
import type { IFindAllOutrightsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindAllOutrightsQuery"
import type { IFindAllPlayerGroupsQuery } from "../sportsbook/sportsbookread/api/domain/player/query/FindAllPlayerGroupsQuery"
import type { IFindAllPlayersQuery } from "../sportsbook/sportsbookread/api/domain/player/query/FindAllPlayersQuery"
import type { IFindAllSportsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindAllSportsQuery"
import type { IFindAllTournamentsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindAllTournamentsQuery"
import type { IFindCategoriesBySportIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindCategoriesBySportIdsQuery"
import type { IFindCustomMarketAndOutcomeTranslateQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindCustomMarketAndOutcomeTranslateQuery"
import type { IFindCustomMarketTranslateQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindCustomMarketTranslateQuery"
import type { IFindPlayerSettledBetInfoQuery } from "../sportsbook/sportsbookread/api/domain/player/query/FindPlayerSettledBetInfoQuery"
import type { IFindTournamentsByCategoryIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/FindTournamentsByCategoryIdsQuery"
import type { IFindTreeCommand } from "../sportsbook/sportsbookread/api/domain/line/query/FindTreeCommand"
import type { IGetActiveBoostsForPlayerQuery } from "../sportsbook/sportsbookread/api/domain/oddsboost/query/GetActiveBoostsForPlayerQuery"
import type { IGetAllBetRequestsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetAllBetRequestsQuery"
import type { IGetAllBetsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetAllBetsQuery"
import type { IGetAllCurrencyPairsCommand } from "../sportsbook/sportsbookread/api/domain/common/GetAllCurrencyPairsCommand"
import type { IGetAllMergeRulesCommand } from "../sportsbook/sportsbookread/api/domain/line/query/GetAllMergeRulesCommand"
import type { IGetAllOddsBoostsQuery } from "../sportsbook/sportsbookread/api/domain/oddsboost/query/GetAllOddsBoostsQuery"
import type { IGetAllOperatorsQuery } from "../sportsbook/sportsbookread/api/domain/operator/query/GetAllOperatorsQuery"
import type { IGetBetByIdQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetBetByIdQuery"
import type { IGetBetContractsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetBetContractsByIdsQuery"
import type { IGetBetHistoryByBetIdQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetBetHistoryByBetIdQuery"
import type { IGetBetOddsBoostsByBetIdsQuery } from "../sportsbook/sportsbookread/api/domain/oddsboost/query/GetBetOddsBoostsByBetIdsQuery"
import type { IGetBetRequestByIdQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetBetRequestByIdQuery"
import type { IGetBetRequestErrorTypesQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetBetRequestErrorTypesQuery"
import type { IGetBetRequestsSummaryQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/summary/GetBetRequestsSummaryQuery"
import type { IGetBetStateByBetIdQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetBetStateByBetIdQuery"
import type { IGetBetStateSummaryByBetIdsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/summary/GetBetStateSummaryByBetIdsQuery"
import type { IGetBetStatesByBetIdsCommand } from "../sportsbook/sportsbookread/api/domain/bet/query/GetBetStatesByBetIdsCommand"
import type { IGetBetsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetBetsByIdsQuery"
import type { IGetBetsSummaryByPlayerIdsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/summary/GetBetsSummaryByPlayerIdsQuery"
import type { IGetBetsSummaryQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/summary/GetBetsSummaryQuery"
import type { IGetBoostedBetConvertedCountQuery } from "../sportsbook/sportsbookread/api/domain/oddsboost/query/GetBoostedBetConvertedCountQuery"
import type { IGetBoostedBetConvertedQuery } from "../sportsbook/sportsbookread/api/domain/oddsboost/query/GetBoostedBetConvertedQuery"
import type { IGetBoostedBetCountTakenQuery } from "../sportsbook/sportsbookread/api/domain/oddsboost/query/GetBoostedBetCountTakenQuery"
import type { IGetBoostsForGroupQuery } from "../sportsbook/sportsbookread/api/domain/oddsboost/query/GetBoostsForGroupQuery"
import type { IGetCashOutSnapsByBetIdsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetCashOutSnapsByBetIdsQuery"
import type { IGetCashOutSnapsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetCashOutSnapsQuery"
import type { IGetCategoriesByIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetCategoriesByIdsQuery"
import type { IGetCategorySummaryBySportIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/summary/GetCategorySummaryBySportIdsQuery"
import type { IGetCountriesByIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetCountriesByIdsQuery"
import type { IGetDashboardCommand } from "../sportsbook/sportsbookread/api/domain/dashboard/query/GetDashboardCommand"
import type { IGetEventBetDetailsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetEventBetDetailsByIdsQuery"
import type { IGetEventByIdQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetEventByIdQuery"
import type { IGetEventSummaryByTournamentIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/summary/GetEventSummaryByTournamentIdsQuery"
import type { IGetEventsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetEventsByIdsQuery"
import type { IGetLiabilityForEventQuery } from "../sportsbook/sportsbookread/api/domain/liability/GetLiabilityForEventQuery"
import type { IGetLiabilityForPlayerQuery } from "../sportsbook/sportsbookread/api/domain/liability/GetLiabilityForPlayerQuery"
import type { IGetMarketCountForEventsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetMarketCountForEventsQuery"
import type { IGetOddsBoostsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/oddsboost/query/GetOddsBoostsByIdsQuery"
import type { IGetOperatorsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/operator/query/GetOperatorsByIdsQuery"
import type { IGetOutcomeStatsByHashPathsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetOutcomeStatsByHashPathsQuery"
import type { IGetOutrightsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetOutrightsByIdsQuery"
import type { IGetPlaceBetEventContextCommand } from "../sportsbook/sportsbookread/api/domain/line/query/GetPlaceBetEventContextCommand"
import type { IGetPlaceBetOutcomeResultsCommand } from "../sportsbook/sportsbookread/api/domain/line/query/GetPlaceBetOutcomeResultsCommand"
import type { IGetPlayerBetHistoryQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetPlayerBetHistoryQuery"
import type { IGetPlayerBetsCountQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/GetPlayerBetsCountQuery"
import type { IGetPlayerBetsCountResult } from "../sportsbook/sportsbookread/api/domain/bet/dto/GetPlayerBetsCountResult"
import type { IGetPlayerByAccessTokenQuery } from "../sportsbook/sportsbookread/api/domain/player/query/GetPlayerByAccessTokenQuery"
import type { IGetPlayerGroupsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/player/query/GetPlayerGroupsByIdsQuery"
import type { IGetPlayersByIdsQuery } from "../sportsbook/sportsbookread/api/domain/player/query/GetPlayersByIdsQuery"
import type { IGetSettlementHistoriesByBetIdsQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/settlementhistory/GetSettlementHistoriesByBetIdsQuery"
import type { IGetSettlementHistoryQuery } from "../sportsbook/sportsbookread/api/domain/bet/query/settlementhistory/GetSettlementHistoryQuery"
import type { IGetSportsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetSportsByIdsQuery"
import type { IGetSportsbookreadLineContextCommand } from "../sportsbook/sportsbookread/api/domain/line/query/GetSportsbookreadLineContextCommand"
import type { IGetTournamentSummaryByCategoryIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/summary/GetTournamentSummaryByCategoryIdsQuery"
import type { IGetTournamentsByIdsQuery } from "../sportsbook/sportsbookread/api/domain/line/query/GetTournamentsByIdsQuery"
import type { IGraphqlCashOutSnapDto } from "../sportsbookmodel/dto/bet/GraphqlCashOutSnapDto"
import type { IHasOpenedPlayerBetsQuery } from "../sportsbook/sportsbookread/api/domain/player/query/HasOpenedPlayerBetsQuery"
import type { ILiabilityResult } from "../sportsbook/betliability/api/LiabilityResult"
import type { IMoney } from "@sb/utils/Money"
import type { IOddsBoostDto } from "../sportsbook/sportsbookread/api/domain/oddsboost/dto/OddsBoostDto"
import type { IOperatorDto } from "../sportsbook/sportsbookread/api/domain/operator/dto/OperatorDto"
import type { IOutcomeStatsDto } from "../sportsbookmodel/dto/common/OutcomeStatsDto"
import type { IOutrightDto } from "../sportsbookmodel/dto/line/OutrightDto"
import type { IPage } from "../graphqlbackend/cursor/Page"
import type { IPair } from "../kotlin/Pair"
import type { IPlaceBetEventContext } from "../sportsbook/placebet/api/domain/bet/PlaceBetEventContext"
import type { IPlaceBetLineContext } from "../sportsbook/placebet/api/domain/bet/PlaceBetLineContext"
import type { IPlaceBetOutcomeResults } from "../sportsbook/sportsbookread/api/domain/line/query/PlaceBetOutcomeResults"
import type { ISettleBetStopTimeCommand } from "../sportsbook/sportsbookread/api/domain/bet/command/SettleBetStopTimeCommand"
import type { ISettlementHistoryGraphqlDto } from "../sportsbook/sportsbookread/api/domain/bet/dto/settlementhistory/SettlementHistoryGraphqlDto"
import type { ISportDto } from "../sportsbook/sportsbookread/api/domain/line/dto/SportDto"
import type { ISportsBookPlayerApiDto } from "../sportsbook/sportsbookread/api/domain/player/dto/SportsBookPlayerApiDto"
import type { ISportsBookPlayerGroupApiDto } from "../sportsbook/sportsbookread/api/domain/player/dto/SportsBookPlayerGroupApiDto"
import type { ITournamentDto } from "../sportsbook/sportsbookread/api/domain/line/dto/TournamentDto"
import type { ITournamentsSummaryMeasuresDto } from "../sportsbook/sportsbookread/api/domain/line/dto/summary/TournamentsSummaryMeasuresDto"
import type { ITranslateRecord } from "../translate/TranslateRecord"
import type { TDashboardType } from "../sportsbook/sportsbookread/api/domain/dashboard/DashboardType"
import { IRpcClient } from "@sb/network-bus/RpcClient";
import { IMetadata } from "@sb/network-bus/Model";
import { ISetting } from "@sb/network-bus/Model";
import { emptySettings } from "@sb/network-bus/Model";
import { sportsbookread_location } from "./ProxyLocations";

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8892-392c-7f9d-8363-11bbdf8126c2(@STATIC/SPORTSBOOK),018d8894-6045-7d9c-ba49-3b24abb3d4b4(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetMarketCountForEventsQuery = (client: IRpcClient, payload: IGetMarketCountForEventsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetMarketCountForEventsQuery, { [key: string]: number }>(payload, `sumstats.sportsbookread.query.get_market_count_for_events`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_market_count_for_events`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message requires the following acl: '018d8894-6045-7d9c-ba49-3b24abb3d4b4(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllEventsQuery = (client: IRpcClient, payload: IFindAllEventsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllEventsQuery, IPage<IEventDto>>(payload, `sumstats.sportsbookread.query.find_all_events`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_all_events`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message requires the following acl: '018d8894-6045-7d9c-ba49-3b24abb3d4b4(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetOutcomeStatsByHashPathsQuery = (client: IRpcClient, payload: IGetOutcomeStatsByHashPathsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetOutcomeStatsByHashPathsQuery, { [key: string]: IOutcomeStatsDto }>(payload, `sumstats.sportsbookread.get_outcome_stats_by_hash_paths`, `${sportsbookread_location}/sumstats.sportsbookread.get_outcome_stats_by_hash_paths`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS),018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8892-392c-7f9d-8363-11bbdf8126c2(@STATIC/SPORTSBOOK),018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetCategoriesByIdsQuery = (client: IRpcClient, payload: IGetCategoriesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCategoriesByIdsQuery, { [key: string]: ICategoryDto }>(payload, `sumstats.sportsbookread.query.get_categories_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_categories_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS),018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8892-392c-7f9d-8363-11bbdf8126c2(@STATIC/SPORTSBOOK),018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetSportsByIdsQuery = (client: IRpcClient, payload: IGetSportsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetSportsByIdsQuery, { [key: string]: ISportDto }>(payload, `sumstats.sportsbookread.query.get_sports_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_sports_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS),018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8892-392c-7f9d-8363-11bbdf8126c2(@STATIC/SPORTSBOOK),018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetTournamentsByIdsQuery = (client: IRpcClient, payload: IGetTournamentsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetTournamentsByIdsQuery, { [key: string]: ITournamentDto }>(payload, `sumstats.sportsbookread.query.get_tournaments_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_tournaments_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindPlayerSettledBetInfoQuery = (client: IRpcClient, payload: IFindPlayerSettledBetInfoQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindPlayerSettledBetInfoQuery, { [key: string]: string | null | undefined }>(payload, `sumstats.sportsbook.sportsbookread.query.find_player_settled_bet_info`, `${sportsbookread_location}/sumstats.sportsbook.sportsbookread.query.find_player_settled_bet_info`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllCurrencyPairsCommand = (client: IRpcClient, payload: IGetAllCurrencyPairsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllCurrencyPairsCommand, ICurrencyPairResultDto>(payload, `sumstats.sportsbookread.all_currency_pairs`, `${sportsbookread_location}/sumstats.sportsbookread.all_currency_pairs`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetHistoryByBetIdQuery = (client: IRpcClient, payload: IGetBetHistoryByBetIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetHistoryByBetIdQuery, IBetHistoryDto>(payload, `sumstats.sportsbook.bet.command.get_bet_by_uuid`, `${sportsbookread_location}/sumstats.sportsbook.bet.command.get_bet_by_uuid`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_HasOpenedPlayerBetsQuery = (client: IRpcClient, payload: IHasOpenedPlayerBetsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IHasOpenedPlayerBetsQuery, boolean>(payload, `sumstats.sportsbook.sportsbookread.query.has_opened_player_bets`, `${sportsbookread_location}/sumstats.sportsbook.sportsbookread.query.has_opened_player_bets`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetsByIdsQuery = (client: IRpcClient, payload: IGetBetsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetsByIdsQuery, { [key: string]: IBetDto }>(payload, `sumstats.sportsbookread.query.get_bets_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_bets_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8853-33f2-7ce8-8b78-c33ebaeb232e(default),018d8842-fb47-75b7-9aeb-a6c070a28c98(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllOperatorsQuery = (client: IRpcClient, payload: IGetAllOperatorsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllOperatorsQuery, IPage<IOperatorDto>>(payload, `sumstats.sportsbookread.query.all_operators`, `${sportsbookread_location}/sumstats.sportsbookread.query.all_operators`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8853-33f2-7ce8-8b78-c33ebaeb232e(default),018d8842-fb47-75b7-9aeb-a6c070a28c98(default),018d8842-fb47-7619-a92a-5348bf332db5(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetOperatorsByIdsQuery = (client: IRpcClient, payload: IGetOperatorsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetOperatorsByIdsQuery, { [key: string]: IOperatorDto }>(payload, `sumstats.sportsbookread.query.operators_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.operators_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetStateByBetIdQuery = (client: IRpcClient, payload: IGetBetStateByBetIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetStateByBetIdQuery, IBetStateDto[]>(payload, `sumstats.sportsbookread.query.get_bet_states_by_bet_id`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_bet_states_by_bet_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetStatesByBetIdsCommand = (client: IRpcClient, payload: IGetBetStatesByBetIdsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetStatesByBetIdsCommand, { [key: string]: IBetStateDto[] }>(payload, `sumstats.sportsbookread.query.get_bet_states_by_bet_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_bet_states_by_bet_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetCashOutSnapsQuery = (client: IRpcClient, payload: IGetCashOutSnapsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCashOutSnapsQuery, IGraphqlCashOutSnapDto[]>(payload, `sumstats.sportsbookread.get_cash_out_snaps`, `${sportsbookread_location}/sumstats.sportsbookread.get_cash_out_snaps`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetSettlementHistoriesByBetIdsQuery = (client: IRpcClient, payload: IGetSettlementHistoriesByBetIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetSettlementHistoriesByBetIdsQuery, { [key: string]: ISettlementHistoryGraphqlDto[] }>(payload, `sumstats.sportsbookread.query.get_settlement_histories_by_bet_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_settlement_histories_by_bet_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetSettlementHistoryQuery = (client: IRpcClient, payload: IGetSettlementHistoryQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetSettlementHistoryQuery, ISettlementHistoryGraphqlDto[]>(payload, `sumstats.sportsbookread.query.get_settlement_history`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_settlement_history`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8892-392c-7f9d-8363-11bbdf8126c2(@STATIC/SPORTSBOOK),018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetCountriesByIdsQuery = (client: IRpcClient, payload: IGetCountriesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCountriesByIdsQuery, { [key: string]: ICountryDto }>(payload, `sumstats.sportsbookread.query.get_countries_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_countries_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllBetsQuery = (client: IRpcClient, payload: IGetAllBetsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllBetsQuery, IPage<IBetDto>>(payload, `sumstats.sportsbookread.query.all_bets`, `${sportsbookread_location}/sumstats.sportsbookread.query.all_bets`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetsSummaryQuery = (client: IRpcClient, payload: IGetBetsSummaryQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetsSummaryQuery, IBetsSummaryDto[]>(payload, `sumstats.sportsbookread.get_bets_summary`, `${sportsbookread_location}/sumstats.sportsbookread.get_bets_summary`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8892-392c-7f9d-8363-11bbdf8126c2(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllBetRequestsQuery = (client: IRpcClient, payload: IGetAllBetRequestsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllBetRequestsQuery, IPage<IBetRequestDto>>(payload, `sumstats.sportsbookread.query.all_bet_requests`, `${sportsbookread_location}/sumstats.sportsbookread.query.all_bet_requests`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8892-392c-7f9d-8363-11bbdf8126c2(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetRequestByIdQuery = (client: IRpcClient, payload: IGetBetRequestByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetRequestByIdQuery, IBetRequestDto>(payload, `sumstats.sportsbookread.query.bet_request_by_id`, `${sportsbookread_location}/sumstats.sportsbookread.query.bet_request_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8892-392c-7f9d-8363-11bbdf8126c2(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetRequestErrorTypesQuery = (client: IRpcClient, payload: IGetBetRequestErrorTypesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetRequestErrorTypesQuery, string[]>(payload, `sumstats.sportsbookread.query.bet_request_error_types`, `${sportsbookread_location}/sumstats.sportsbookread.query.bet_request_error_types`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8892-392c-7f9d-8363-11bbdf8126c2(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetRequestsSummaryQuery = (client: IRpcClient, payload: IGetBetRequestsSummaryQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetRequestsSummaryQuery, IBetRequestsSummaryDto[]>(payload, `sumstats.sportsbookread.query.get_bet_requests_summary`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_bet_requests_summary`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8893-686e-7d5b-a0a9-9b786cdffbf5(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllOutrightsQuery = (client: IRpcClient, payload: IFindAllOutrightsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllOutrightsQuery, IPage<IOutrightDto>>(payload, `sumstats.sportsbookread.all_outrights`, `${sportsbookread_location}/sumstats.sportsbookread.all_outrights`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8894-6045-7d9c-ba49-3b24abb3d4b4(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetEventBetDetailsByIdsQuery = (client: IRpcClient, payload: IGetEventBetDetailsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetEventBetDetailsByIdsQuery, { [key: string]: IEventBetDetailsDto }>(payload, `sumstats.sportsbookread.query.get_event_bet_details_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_event_bet_details_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8894-6045-7d9c-ba49-3b24abb3d4b4(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetEventByIdQuery = (client: IRpcClient, payload: IGetEventByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetEventByIdQuery, IEventDto>(payload, `sumstats.sportsbookread.query.get_event_by_id`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_event_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8894-6045-7d9c-ba49-3b24abb3d4b4(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetEventSummaryByTournamentIdsQuery = (client: IRpcClient, payload: IGetEventSummaryByTournamentIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetEventSummaryByTournamentIdsQuery, { [key: string]: IEventsSummaryMeasuresDto }>(payload, `sumstats.sportsbookread.query.get_event_summary_by_tournament_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_event_summary_by_tournament_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8894-6045-7d9f-94b8-56f5e33f6c92(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllMergeRulesCommand = (client: IRpcClient, payload: IGetAllMergeRulesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllMergeRulesCommand, IAllMergeRulesDto>(payload, `sumstats.sportsbookread.all_merge_rules`, `${sportsbookread_location}/sumstats.sportsbookread.all_merge_rules`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllCategoriesQuery = (client: IRpcClient, payload: IFindAllCategoriesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllCategoriesQuery, IPage<ICategoryDto>>(payload, `sumstats.sportsbookread.query.find_all_categories`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_all_categories`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllSportsQuery = (client: IRpcClient, payload: IFindAllSportsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllSportsQuery, IPage<ISportDto>>(payload, `sumstats.sportsbookread.query.find_all_sports`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_all_sports`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllTournamentsQuery = (client: IRpcClient, payload: IFindAllTournamentsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllTournamentsQuery, IPage<ITournamentDto>>(payload, `sumstats.sportsbookread.query.find_all_tournaments`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_all_tournaments`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindCategoriesBySportIdsQuery = (client: IRpcClient, payload: IFindCategoriesBySportIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindCategoriesBySportIdsQuery, { [key: string]: ICategoryDto[] }>(payload, `sumstats.sportsbookread.query.find_categories_by_sport_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_categories_by_sport_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindTournamentsByCategoryIdsQuery = (client: IRpcClient, payload: IFindTournamentsByCategoryIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindTournamentsByCategoryIdsQuery, { [key: string]: ITournamentDto[] }>(payload, `sumstats.sportsbookread.query.find_tournaments_by_category_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_tournaments_by_category_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindTreeCommand = (client: IRpcClient, payload: IFindTreeCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindTreeCommand, ISportDto[]>(payload, `sumstats.sportsbookread.find_tree`, `${sportsbookread_location}/sumstats.sportsbookread.find_tree`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetCategorySummaryBySportIdsQuery = (client: IRpcClient, payload: IGetCategorySummaryBySportIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCategorySummaryBySportIdsQuery, { [key: string]: ICategoriesSummaryMeasuresDto }>(payload, `sumstats.sportsbookread.query.get_category_summary_by_sport_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_category_summary_by_sport_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8897-e863-72c8-b1aa-53c265694f9a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetTournamentSummaryByCategoryIdsQuery = (client: IRpcClient, payload: IGetTournamentSummaryByCategoryIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetTournamentSummaryByCategoryIdsQuery, { [key: string]: ITournamentsSummaryMeasuresDto }>(payload, `sumstats.sportsbookread.query.get_tournament_summary_by_category_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_tournament_summary_by_category_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(@STATIC/BETS_AND_SPINS),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(@STATIC/BETS_AND_SPINS)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetCashOutSnapsByBetIdsQuery = (client: IRpcClient, payload: IGetCashOutSnapsByBetIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCashOutSnapsByBetIdsQuery, { [key: string]: IGraphqlCashOutSnapDto[] }>(payload, `sumstats.sportsbookread.get_cash_out_snaps_by_bet_ids`, `${sportsbookread_location}/sumstats.sportsbookread.get_cash_out_snaps_by_bet_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(@STATIC/BETS_AND_SPINS),018d8895-3f44-7e71-bc74-076be7cb2b42(default),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(@STATIC/BETS_AND_SPINS)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetOddsBoostsByIdsQuery = (client: IRpcClient, payload: IGetOddsBoostsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetOddsBoostsByIdsQuery, { [key: string]: IOddsBoostDto }>(payload, `sumstats.sportsbookread.get_odds_boosts_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.get_odds_boosts_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllPlayersQuery = (client: IRpcClient, payload: IFindAllPlayersQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllPlayersQuery, IPage<ISportsBookPlayerApiDto>>(payload, `sumstats.sportsbookread.query.find_all_players`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_all_players`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetsSummaryByPlayerIdsQuery = (client: IRpcClient, payload: IGetBetsSummaryByPlayerIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetsSummaryByPlayerIdsQuery, { [key: string]: IBetsSummaryMeasuresDto }>(payload, `sumstats.sportsbookread.query.get_bets_summary_by_player_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_bets_summary_by_player_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerGroupsByIdsQuery = (client: IRpcClient, payload: IGetPlayerGroupsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerGroupsByIdsQuery, { [key: string]: ISportsBookPlayerGroupApiDto }>(payload, `sumstats.sportsbookread.query.get_player_groups_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_player_groups_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8892-392c-7f9d-8363-11bbdf8126c2(@STATIC/SPORTSBOOK),018d8893-686e-7d5b-a0a9-9b786cdffbf5(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetOutrightsByIdsQuery = (client: IRpcClient, payload: IGetOutrightsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetOutrightsByIdsQuery, { [key: string]: IOutrightDto }>(payload, `sumstats.sportsbookread.query.get_outrights_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_outrights_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetByIdQuery = (client: IRpcClient, payload: IGetBetByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetByIdQuery, IBetDto>(payload, `sumstats.sportsbookread.query.get_bet_by_id`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_bet_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindCustomMarketTranslateQuery = (client: IRpcClient, payload: IFindCustomMarketTranslateQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindCustomMarketTranslateQuery, { [key: string]: ITranslateRecord[] }>(payload, `sumstats.sportsbookread.query.find_custom_market_translate`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_custom_market_translate`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d8890-77aa-7f2d-a125-26e2f06d019a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetDashboardCommand = (client: IRpcClient, payload: IGetDashboardCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetDashboardCommand, { [key in TDashboardType]?: { [key: string]: any } }>(payload, `sumstats.sportsbookread.get_dashboard`, `${sportsbookread_location}/sumstats.sportsbookread.get_dashboard`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8892-392c-7f9d-8363-11bbdf8126c2(@STATIC/SPORTSBOOK)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetContractsByIdsQuery = (client: IRpcClient, payload: IGetBetContractsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetContractsByIdsQuery, { [key: string]: IBetContractDto }>(payload, `sumstats.sportsbookread.query.get_bet_contracts_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_bet_contracts_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d8895-3f44-7e71-bc74-076be7cb2b42(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllOddsBoostsQuery = (client: IRpcClient, payload: IGetAllOddsBoostsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllOddsBoostsQuery, IPage<IOddsBoostDto>>(payload, `sumstats.sportsbookread.get_all_odds_boosts`, `${sportsbookread_location}/sumstats.sportsbookread.get_all_odds_boosts`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllPlayerGroupsQuery = (client: IRpcClient, payload: IFindAllPlayerGroupsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllPlayerGroupsQuery, IPage<ISportsBookPlayerGroupApiDto>>(payload, `sumstats.sportsbookread.query.find_all_player_groups`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_all_player_groups`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE, PLATFORM_PLAYER
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS),018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8892-392c-7f9d-8363-11bbdf8126c2(@STATIC/SPORTSBOOK),018d8894-6045-7d9c-ba49-3b24abb3d4b4(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetEventsByIdsQuery = (client: IRpcClient, payload: IGetEventsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetEventsByIdsQuery, { [key: string]: IEventDto }>(payload, `sumstats.sportsbookread.query.get_events_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_events_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetStateSummaryByBetIdsQuery = (client: IRpcClient, payload: IGetBetStateSummaryByBetIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetStateSummaryByBetIdsQuery, { [key: string]: IBetStateSummaryMeasuresDto }>(payload, `sumstats.sportsbookread.query.get_bet_state_summary_by_bet_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_bet_state_summary_by_bet_ids`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetActiveBoostsForPlayerQuery = (client: IRpcClient, payload: IGetActiveBoostsForPlayerQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetActiveBoostsForPlayerQuery, { [key: string]: number }>(payload, `sumstats.odds_boost.get_active_count_for_player`, `${sportsbookread_location}/sumstats.odds_boost.get_active_count_for_player`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetBoostsForGroupQuery = (client: IRpcClient, payload: IGetBoostsForGroupQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBoostsForGroupQuery, IOddsBoostDto[]>(payload, `sumstats.odds_boost.get_for_player_group`, `${sportsbookread_location}/sumstats.odds_boost.get_for_player_group`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerBetHistoryQuery = (client: IRpcClient, payload: IGetPlayerBetHistoryQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerBetHistoryQuery, IPage<IBetHistoryDto>>(payload, `sumstats.sportsbookread.get_player_bet_history`, `${sportsbookread_location}/sumstats.sportsbookread.get_player_bet_history`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerBetsCountQuery = (client: IRpcClient, payload: IGetPlayerBetsCountQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerBetsCountQuery, IGetPlayerBetsCountResult>(payload, `sumstats.sportsbook.bet.command.get_player_bets_count`, `${sportsbookread_location}/sumstats.sportsbook.bet.command.get_player_bets_count`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerByAccessTokenQuery = (client: IRpcClient, payload: IGetPlayerByAccessTokenQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerByAccessTokenQuery, ISportsBookPlayerApiDto>(payload, `sumstats.sportsbookread.query.get_player_by_access_token`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_player_by_access_token`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllOutrightsByIdsCommand = (client: IRpcClient, payload: IFindAllOutrightsByIdsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllOutrightsByIdsCommand, IOutrightDto[]>(payload, `sumstats.sportsbookread.command.find_all_outrights_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.command.find_all_outrights_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindCustomMarketAndOutcomeTranslateQuery = (client: IRpcClient, payload: IFindCustomMarketAndOutcomeTranslateQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindCustomMarketAndOutcomeTranslateQuery, { [key: string]: ICustomMarketTranslate }>(payload, `sumstats.sportsbookread.query.find_custom_market_and_outcome_translate`, `${sportsbookread_location}/sumstats.sportsbookread.query.find_custom_market_and_outcome_translate`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetLiabilityForEventQuery = (client: IRpcClient, payload: IGetLiabilityForEventQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetLiabilityForEventQuery, IPair<IMoney, IMoney>>(payload, `sumstats.sportsbookread.get_liability_for_event`, `${sportsbookread_location}/sumstats.sportsbookread.get_liability_for_event`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetLiabilityForPlayerQuery = (client: IRpcClient, payload: IGetLiabilityForPlayerQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetLiabilityForPlayerQuery, ILiabilityResult>(payload, `sumstats.sportsbookread.query.get_liability_for_player`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_liability_for_player`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlaceBetEventContextCommand = (client: IRpcClient, payload: IGetPlaceBetEventContextCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlaceBetEventContextCommand, IPlaceBetEventContext[]>(payload, `sumstats.sportsbook.sportsbookread.command.get_place_bet_event_context`, `${sportsbookread_location}/sumstats.sportsbook.sportsbookread.command.get_place_bet_event_context`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlaceBetOutcomeResultsCommand = (client: IRpcClient, payload: IGetPlaceBetOutcomeResultsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlaceBetOutcomeResultsCommand, IPlaceBetOutcomeResults>(payload, `sumstats.sportsbook.sportsbookread.command.get_placebet_outcome_results`, `${sportsbookread_location}/sumstats.sportsbook.sportsbookread.command.get_placebet_outcome_results`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetSportsbookreadLineContextCommand = (client: IRpcClient, payload: IGetSportsbookreadLineContextCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetSportsbookreadLineContextCommand, IPlaceBetLineContext>(payload, `sumstats.sportsbook.sportsbookread.command.get_place_bet_context`, `${sportsbookread_location}/sumstats.sportsbook.sportsbookread.command.get_place_bet_context`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBoostedBetConvertedCountQuery = (client: IRpcClient, payload: IGetBoostedBetConvertedCountQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBoostedBetConvertedCountQuery, { [key: string]: number }>(payload, `sumstats.sportsbook.sportsbookread.get_boosted_bet_converted_count`, `${sportsbookread_location}/sumstats.sportsbook.sportsbookread.get_boosted_bet_converted_count`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBoostedBetConvertedQuery = (client: IRpcClient, payload: IGetBoostedBetConvertedQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBoostedBetConvertedQuery, { [key: string]: IMoney }>(payload, `sumstats.sportsbook.sportsbookread.get_boosted_bet_converted`, `${sportsbookread_location}/sumstats.sportsbook.sportsbookread.get_boosted_bet_converted`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBoostedBetCountTakenQuery = (client: IRpcClient, payload: IGetBoostedBetCountTakenQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBoostedBetCountTakenQuery, { [key: string]: number }>(payload, `sumstats.sportsbook.sportsbookread.query.get_boosted_bet_count_taken`, `${sportsbookread_location}/sumstats.sportsbook.sportsbookread.query.get_boosted_bet_count_taken`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(@STATIC/BETS_AND_SPINS),018d8890-dd2a-7ce2-9993-e1eaa2d018fc(@STATIC/SPORTSBOOK),018d8895-3f44-7e71-bc74-076be7cb2b42(default),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(@STATIC/BETS_AND_SPINS)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBetOddsBoostsByBetIdsQuery = (client: IRpcClient, payload: IGetBetOddsBoostsByBetIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBetOddsBoostsByBetIdsQuery, { [key: string]: IBetBoostDto | null | undefined }>(payload, `sumstats.sportsbookread.get_bet_odds_boosts_by_bet_ids`, `${sportsbookread_location}/sumstats.sportsbookread.get_bet_odds_boosts_by_bet_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayersByIdsQuery = (client: IRpcClient, payload: IGetPlayersByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayersByIdsQuery, { [key: string]: ISportsBookPlayerApiDto }>(payload, `sumstats.sportsbookread.query.get_players_by_ids`, `${sportsbookread_location}/sumstats.sportsbookread.query.get_players_by_ids`, metadata, settings);

/**
 * [!] The message does not require roles.
 * [!] The message doesn't have error mappings.
 */
export const call_SettleBetStopTimeCommand = (client: IRpcClient, payload: ISettleBetStopTimeCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ISettleBetStopTimeCommand, null>(payload, `sumstats.sportsbook.bet.command.settle_bet_stop_time`, `${sportsbookread_location}/sumstats.sportsbook.bet.command.settle_bet_stop_time`, metadata, settings);
