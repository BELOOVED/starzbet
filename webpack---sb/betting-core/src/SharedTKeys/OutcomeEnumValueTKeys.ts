import type { TSharedKey } from "@sb/translates/shared/SharedTKeys";
import {
  shared_outcomeEnumValue_draw,
  shared_outcomeEnumValue_no_draw,
  shared_outcomeEnumValue_yes,
  shared_outcomeEnumValue_no,
  shared_outcomeEnumValue_over,
  shared_outcomeEnumValue_under,
  shared_outcomeEnumValue_even,
  shared_outcomeEnumValue_odd,
  shared_outcomeEnumValue_draw_over,
  shared_outcomeEnumValue_draw_under,
  shared_outcomeEnumValue_high,
  shared_outcomeEnumValue_low,
  shared_outcomeEnumValue_odd_low,
  shared_outcomeEnumValue_odd_high,
  shared_outcomeEnumValue_even_low,
  shared_outcomeEnumValue_even_high,
  shared_outcomeEnumValue_red,
  shared_outcomeEnumValue_black,
  shared_outcomeEnumValue_green,
  shared_outcomeEnumValue_yellow,
  shared_outcomeEnumValue_blue,
  shared_outcomeEnumValue_heads,
  shared_outcomeEnumValue_tails,
  shared_outcomeEnumValue_evens,
  shared_outcomeEnumValue_equal,
  shared_outcomeEnumValue_draw_both,
  shared_outcomeEnumValue_draw_none,
  shared_outcomeEnumValue_both,
} from "@sb/translates/shared/SharedTKeys";
import { EOutcomeEnumValue } from "../EOutcomeEnumValue";

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/generator/typescript/TypescriptMapGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.codegenerator.model.source.OutcomeEnumValueSource
 */
export const outcomeEnumValueTKeys: Record<EOutcomeEnumValue, TSharedKey> = {
  [EOutcomeEnumValue.draw]: shared_outcomeEnumValue_draw,
  [EOutcomeEnumValue.no_draw]: shared_outcomeEnumValue_no_draw,
  [EOutcomeEnumValue.yes]: shared_outcomeEnumValue_yes,
  [EOutcomeEnumValue.no]: shared_outcomeEnumValue_no,
  [EOutcomeEnumValue.over]: shared_outcomeEnumValue_over,
  [EOutcomeEnumValue.under]: shared_outcomeEnumValue_under,
  [EOutcomeEnumValue.even]: shared_outcomeEnumValue_even,
  [EOutcomeEnumValue.odd]: shared_outcomeEnumValue_odd,
  [EOutcomeEnumValue.draw_over]: shared_outcomeEnumValue_draw_over,
  [EOutcomeEnumValue.draw_under]: shared_outcomeEnumValue_draw_under,
  [EOutcomeEnumValue.high]: shared_outcomeEnumValue_high,
  [EOutcomeEnumValue.low]: shared_outcomeEnumValue_low,
  [EOutcomeEnumValue.odd_low]: shared_outcomeEnumValue_odd_low,
  [EOutcomeEnumValue.odd_high]: shared_outcomeEnumValue_odd_high,
  [EOutcomeEnumValue.even_low]: shared_outcomeEnumValue_even_low,
  [EOutcomeEnumValue.even_high]: shared_outcomeEnumValue_even_high,
  [EOutcomeEnumValue.red]: shared_outcomeEnumValue_red,
  [EOutcomeEnumValue.black]: shared_outcomeEnumValue_black,
  [EOutcomeEnumValue.green]: shared_outcomeEnumValue_green,
  [EOutcomeEnumValue.yellow]: shared_outcomeEnumValue_yellow,
  [EOutcomeEnumValue.blue]: shared_outcomeEnumValue_blue,
  [EOutcomeEnumValue.heads]: shared_outcomeEnumValue_heads,
  [EOutcomeEnumValue.tails]: shared_outcomeEnumValue_tails,
  [EOutcomeEnumValue.evens]: shared_outcomeEnumValue_evens,
  [EOutcomeEnumValue.equal]: shared_outcomeEnumValue_equal,
  [EOutcomeEnumValue.draw_both]: shared_outcomeEnumValue_draw_both,
  [EOutcomeEnumValue.draw_none]: shared_outcomeEnumValue_draw_none,
  [EOutcomeEnumValue.both]: shared_outcomeEnumValue_both,
};
