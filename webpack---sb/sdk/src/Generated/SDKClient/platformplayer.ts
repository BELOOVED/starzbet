/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/SDKTypescriptGenerator.kt
 */
import type { IAccountDetails } from "../platform/player/api/query/player/AccountDetails"
import type { IAddPlayersToGroupCommand } from "../platform/player/api/command/group/AddPlayersToGroupCommand"
import type { IApprovePlayerWithAffiliateLinkByOperatorCommand } from "../platform/player/api/command/affiliate/ApprovePlayerWithAffiliateLinkByOperatorCommand"
import type { IApprovePlayerWithAffiliateLinkCommand } from "../platform/player/api/command/affiliate/ApprovePlayerWithAffiliateLinkCommand"
import type { IAssignNewOperatorToOperatorPlayersCommand } from "../platform/player/api/command/player/AssignNewOperatorToOperatorPlayersCommand"
import type { IAssignOperatorToPlayersCommand } from "../platform/player/api/command/player/AssignOperatorToPlayersCommand"
import type { IAuthenticatePlayerCommand } from "../platform/player/api/command/player/AuthenticatePlayerCommand"
import type { IBanPlayerCommand } from "../platform/player/api/command/player/BanPlayerCommand"
import type { IBonusPlayerIdsWithOffset } from "../platform/player/api/dto/player/BonusPlayerIdsWithOffset"
import type { IChangePasswordCommand } from "../platform/player/api/command/password/ChangePasswordCommand"
import type { ICheckPasswordIdenticalCommand } from "../platform/player/api/command/password/CheckPasswordIdenticalCommand"
import type { ICheckSecretQuestionTokenDto } from "../platform/player/api/dto/checksecretquestion/CheckSecretQuestionTokenDto"
import type { ICheckSecurityQuestionAnswerCommand } from "../platform/player/api/command/player/CheckSecurityQuestionAnswerCommand"
import type { ICountry } from "../country/model/Country"
import type { ICreateCheckSecretQuestionTokenCommand } from "../platform/player/api/command/checksecretquestion/CreateCheckSecretQuestionTokenCommand"
import type { ICreateGroupCommand } from "../platform/player/api/command/group/CreateGroupCommand"
import type { ICreateIpRelationNoteCommand } from "../platform/player/api/command/player/playerduplicate/CreateIpRelationNoteCommand"
import type { ICreatePlayerDuplicateNoteCommand } from "../platform/player/api/command/player/playerduplicate/CreatePlayerDuplicateNoteCommand"
import type { ICreatePlayerNoteCommand } from "../platform/player/api/command/player/note/CreatePlayerNoteCommand"
import type { IDeleteGroupCommand } from "../platform/player/api/command/group/DeleteGroupCommand"
import type { IDeleteIpRelationNoteCommand } from "../platform/player/api/command/player/playerduplicate/DeleteIpRelationNoteCommand"
import type { IDeletePlayerDeviceByOperatorCommand } from "../platform/player/api/command/player/DeletePlayerDeviceByOperatorCommand"
import type { IDeletePlayerDeviceCommand } from "../platform/player/api/command/player/DeletePlayerDeviceCommand"
import type { IDeletePlayerDuplicateNoteCommand } from "../platform/player/api/command/player/playerduplicate/DeletePlayerDuplicateNoteCommand"
import type { IDeletePlayerNoteCommand } from "../platform/player/api/command/player/note/DeletePlayerNoteCommand"
import type { IDetachPlayersFromAffiliateCommand } from "../platform/player/api/command/player/DetachPlayersFromAffiliateCommand"
import type { IEditIpRelationNoteCommand } from "../platform/player/api/command/player/playerduplicate/EditIpRelationNoteCommand"
import type { IEditPlayerDuplicateNoteCommand } from "../platform/player/api/command/player/playerduplicate/EditPlayerDuplicateNoteCommand"
import type { IEditPlayerNoteCommand } from "../platform/player/api/command/player/note/EditPlayerNoteCommand"
import type { IEditPlayerPermissionsCommand } from "../platform/player/api/command/player/EditPlayerPermissionsCommand"
import type { IEnableTwoFactorAuthenticationResponse } from "../authprofile/twofactorauthentication/dto/EnableTwoFactorAuthenticationResponse"
import type { IEventToken } from "../eventstore/eventtoken/EventToken"
import type { IExternalPlayerLoginCommand } from "../platform/player/api/command/external/ExternalPlayerLoginCommand"
import type { IFindAllPlayerFailedLoginsQuery } from "../platform/player/api/query/player/FindAllPlayerFailedLoginsQuery"
import type { IFindPlayerIdByTinyIdQuery } from "../platform/player/api/query/player/FindPlayerIdByTinyIdQuery"
import type { IGetAllCountriesQuery } from "../platform/player/core/domain/country/query/GetAllCountriesQuery"
import type { IGetCountryByIdQuery } from "../platform/player/core/domain/country/query/GetCountryByIdQuery"
import type { IGetExternalPlayerId } from "../platform/player/api/query/external/GetExternalPlayerId"
import type { IGetExternalPlayerTokenByPlayerId } from "../platform/player/api/query/external/GetExternalPlayerTokenByPlayerId"
import type { IGetLoginResponseByOneTimeTokenCommand } from "../platform/player/api/command/player/GetLoginResponseByOneTimeTokenCommand"
import type { IGetPlayerBasicInfoByPlayerIdQuery } from "../platform/player/api/query/player/GetPlayerBasicInfoByPlayerIdQuery"
import type { IGetPlayerDetailsByTokenQuery } from "../platform/player/api/query/player/GetPlayerDetailsByTokenQuery"
import type { IGetPlayerDevicesQuery } from "../platform/player/api/query/player/GetPlayerDevicesQuery"
import type { IGetPlayerEmailByOperatorQuery } from "../platform/player/api/query/player/GetPlayerEmailByOperatorQuery"
import type { IGetPlayerGameInfoByPlayerIdQuery } from "../platform/player/api/query/player/GetPlayerGameInfoByPlayerIdQuery"
import type { IGetPlayerIdsByPlayerExternalIdsQuery } from "../platform/player/api/query/player/GetPlayerIdsByPlayerExternalIdsQuery"
import type { IGetPlayerIdsByPlayerGroupsWithOffsetQuery } from "../platform/player/api/query/player/GetPlayerIdsByPlayerGroupsWithOffsetQuery"
import type { IGetPlayerIdsByPlayerUsernamesQuery } from "../platform/player/api/query/player/GetPlayerIdsByPlayerUsernamesQuery"
import type { IGetPlayerPhoneNumberByOperatorQuery } from "../platform/player/api/query/player/GetPlayerPhoneNumberByOperatorQuery"
import type { IGetPlayerRemoteStoreDataQuery } from "../platform/player/api/query/player/GetPlayerRemoteStoreDataQuery"
import type { IGetPlayerSecretQuestionByOperatorQuery } from "../platform/player/api/query/player/GetPlayerSecretQuestionByOperatorQuery"
import type { IGetPlayerSessionInfoOfLastSessionByPlayerIdQuery } from "../platform/player/api/query/player/GetPlayerSessionInfoOfLastSessionByPlayerIdQuery"
import type { IGetPlayerSubjectWithFakeToken } from "../platform/player/api/command/player/GetPlayerSubjectWithFakeToken"
import type { IGetPlayerVerificationStateQuery } from "../platform/player/api/query/player/GetPlayerVerificationStateQuery"
import type { IGetPlayersDetailsForBonusClaimQuery } from "../platform/player/api/query/player/GetPlayersDetailsForBonusClaimQuery"
import type { IGetSelfPlayerDevicesQuery } from "../platform/player/api/query/player/GetSelfPlayerDevicesQuery"
import type { IGetVerificationStrategiesByPlayerIdsQuery } from "../platform/player/api/query/player/GetVerificationStrategiesByPlayerIdsQuery"
import type { IIdentityNumberValidationResponse } from "../platform/player/api/dto/player/IdentityNumberValidationResponse"
import type { IIsKycApprovedQuery } from "../platform/player/api/query/kyc/IsKycApprovedQuery"
import type { ILoginPlayerAndGetRedirectUrlCommand } from "../platform/player/api/command/player/LoginPlayerAndGetRedirectUrlCommand"
import type { ILoginPlayerCommand } from "../platform/player/api/command/player/LoginPlayerCommand"
import type { IMovePlayersToAffiliateCommand } from "../platform/player/api/command/player/MovePlayersToAffiliateCommand"
import type { IMovePlayersToGroupsCommand } from "../platform/player/api/command/group/MovePlayersToGroupsCommand"
import type { IOneTimePasswordSecretDto } from "../authprofile/twofactorauthentication/dto/OneTimePasswordSecretDto"
import type { IPage } from "../graphqlbackend/cursor/Page"
import type { IPlayerBasicInfo } from "../platform/player/api/query/player/PlayerBasicInfo"
import type { IPlayerDetailsForClaimBonusFromPlayerSubject } from "../platform/player/api/dto/player/PlayerDetailsForClaimBonusFromPlayerSubject"
import type { IPlayerDeviceDto } from "../platform/player/api/dto/player/PlayerDeviceDto"
import type { IPlayerDisableTwoFactorAuthenticationByOperatorCommand } from "../platform/player/api/command/player/PlayerDisableTwoFactorAuthenticationByOperatorCommand"
import type { IPlayerDisableTwoFactorAuthenticationCommand } from "../platform/player/api/command/player/PlayerDisableTwoFactorAuthenticationCommand"
import type { IPlayerEmailExistsQuery } from "../platform/player/api/query/player/PlayerEmailExistsQuery"
import type { IPlayerEnableTwoFactorAuthenticationCommand } from "../platform/player/api/command/player/PlayerEnableTwoFactorAuthenticationCommand"
import type { IPlayerFailedLoginDto } from "../platform/player/api/model/player/PlayerFailedLoginDto"
import type { IPlayerGameInfo } from "../platform/player/api/query/player/PlayerGameInfo"
import type { IPlayerGenerateTwoFactorAuthenticationSecretCommand } from "../platform/player/api/command/player/PlayerGenerateTwoFactorAuthenticationSecretCommand"
import type { IPlayerLoginExistsQuery } from "../platform/player/api/query/player/PlayerLoginExistsQuery"
import type { IPlayerLoginResponse } from "../platform/player/api/dto/player/PlayerLoginResponse"
import type { IPlayerPhoneExistsQuery } from "../platform/player/api/query/player/PlayerPhoneExistsQuery"
import type { IPlayerRegistrationResponseDto } from "../platform/player/api/dto/player/PlayerRegistrationResponseDto"
import type { IPlayerRevokeKeepAliveCommand } from "../platform/player/api/command/player/PlayerRevokeKeepAliveCommand"
import type { IPlayerSessionInfo } from "../platform/player/api/query/player/PlayerSessionInfo"
import type { IPlayerSubject } from "../messagebus/inmemory/securityplayer/PlayerSubject"
import type { IPlayerUpdateDeviceVerificationCodeCommand } from "../platform/player/api/command/player/PlayerUpdateDeviceVerificationCodeCommand"
import type { IPlayerVerifyDeviceCommand } from "../platform/player/api/command/player/PlayerVerifyDeviceCommand"
import type { IRefreshKeepAliveCommand } from "../platform/player/api/command/token/RefreshKeepAliveCommand"
import type { IRefreshKeepAliveResponse } from "../authprofile/model/RefreshKeepAliveResponse"
import type { IRefreshTokenCommand } from "../platform/player/api/command/token/RefreshTokenCommand"
import type { IRegisterExternalPlayerCommand } from "../platform/player/api/command/player/RegisterExternalPlayerCommand"
import type { IRegisterPlayerBotCommand } from "../platform/player/api/command/player/RegisterPlayerBotCommand"
import type { IRegisterPlayerByAffiliateCommand } from "../platform/player/api/command/player/RegisterPlayerByAffiliateCommand"
import type { IRegisterPlayerByAgentCommand } from "../platform/player/api/command/player/RegisterPlayerByAgentCommand"
import type { IRegisterPlayerByOperatorCommand } from "../platform/player/api/command/player/RegisterPlayerByOperatorCommand"
import type { IRegisterPlayerCommand } from "../platform/player/api/command/player/RegisterPlayerCommand"
import type { IRegisterPrivatePlayerCommand } from "../platform/player/api/command/player/RegisterPrivatePlayerCommand"
import type { IRejectEmailByOperatorCommand } from "../platform/player/api/command/player/RejectEmailByOperatorCommand"
import type { IRejectPhoneByOperatorCommand } from "../platform/player/api/command/player/RejectPhoneByOperatorCommand"
import type { IRequestPlayerEmailUpdateCommand } from "../platform/player/api/command/player/RequestPlayerEmailUpdateCommand"
import type { IRequestPlayerPhoneUpdateCommand } from "../platform/player/api/command/player/RequestPlayerPhoneUpdateCommand"
import type { IResetPasswordByEmailCommand } from "../platform/player/api/command/password/ResetPasswordByEmailCommand"
import type { IResetPasswordByOperatorCommand } from "../platform/player/api/command/password/ResetPasswordByOperatorCommand"
import type { IResetPasswordByPhoneCommand } from "../platform/player/api/command/password/ResetPasswordByPhoneCommand"
import type { IResetPlayerLoginAttemptsCountCommand } from "../platform/player/api/command/player/ResetPlayerLoginAttemptsCountCommand"
import type { IResetPlayerPhoneVerificationTokenByOperatorCommand } from "../platform/player/api/command/player/ResetPlayerPhoneVerificationTokenByOperatorCommand"
import type { IRestoreIpRelationNoteCommand } from "../platform/player/api/command/player/playerduplicate/RestoreIpRelationNoteCommand"
import type { IRestorePlayerDuplicateNoteCommand } from "../platform/player/api/command/player/playerduplicate/RestorePlayerDuplicateNoteCommand"
import type { IRestorePlayerNoteCommand } from "../platform/player/api/command/player/note/RestorePlayerNoteCommand"
import type { IRevokeTokenByOperatorCommand } from "../platform/player/api/command/token/RevokeTokenByOperatorCommand"
import type { IRevokeTokenCommand } from "../platform/player/api/command/token/RevokeTokenCommand"
import type { ISavePlayerRemoteStoreDataCommand } from "../platform/player/api/command/player/SavePlayerRemoteStoreDataCommand"
import type { ITokenDto } from "../authprofile/service/TokenDto"
import type { IUnbanPlayerCommand } from "../platform/player/api/command/player/UnbanPlayerCommand"
import type { IUnlinkPlayerWithAffiliateCommand } from "../platform/player/api/command/affiliate/UnlinkPlayerWithAffiliateCommand"
import type { IUpdateEmailByOperatorCommand } from "../platform/player/api/command/player/UpdateEmailByOperatorCommand"
import type { IUpdateEmailCommand } from "../platform/player/api/command/player/UpdateEmailCommand"
import type { IUpdateExternalTokenCommand } from "../platform/player/core/domain/player/command/player/external/UpdateExternalTokenCommand"
import type { IUpdateGroupCommand } from "../platform/player/api/command/group/UpdateGroupCommand"
import type { IUpdatePasswordByEmailCommand } from "../platform/player/api/command/password/UpdatePasswordByEmailCommand"
import type { IUpdatePasswordByOperatorCommand } from "../platform/player/api/command/password/UpdatePasswordByOperatorCommand"
import type { IUpdatePasswordByPhoneCommand } from "../platform/player/api/command/password/UpdatePasswordByPhoneCommand"
import type { IUpdatePhoneByOperatorCommand } from "../platform/player/api/command/player/UpdatePhoneByOperatorCommand"
import type { IUpdatePhoneCommand } from "../platform/player/api/command/player/UpdatePhoneCommand"
import type { IUpdatePlayerDeviceVerificationEnabledByOperatorCommand } from "../platform/player/api/command/player/UpdatePlayerDeviceVerificationEnabledByOperatorCommand"
import type { IUpdatePlayerDeviceVerificationEnabledCommand } from "../platform/player/api/command/player/UpdatePlayerDeviceVerificationEnabledCommand"
import type { IUpdatePlayerEmailVerificationTokenByOperatorCommand } from "../platform/player/api/command/player/UpdatePlayerEmailVerificationTokenByOperatorCommand"
import type { IUpdatePlayerVerificationTokenCommand } from "../platform/player/api/command/player/UpdatePlayerVerificationTokenCommand"
import type { IUpdateProfileCommand } from "../platform/player/api/command/player/UpdateProfileCommand"
import type { IUpdateTestPlayerCommand } from "../platform/player/api/command/player/UpdateTestPlayerCommand"
import type { IUpdateTimeZoneCommand } from "../platform/player/api/command/player/UpdateTimeZoneCommand"
import type { IUseCheckSecretQuestionTokenCommand } from "../platform/player/api/command/checksecretquestion/UseCheckSecretQuestionTokenCommand"
import type { IValidateIdentityNumberCommand } from "../platform/player/api/command/player/ValidateIdentityNumberCommand"
import type { IVerifyEmailByOperatorCommand } from "../platform/player/api/command/player/VerifyEmailByOperatorCommand"
import type { IVerifyEmailCommand } from "../platform/player/api/command/player/VerifyEmailCommand"
import type { IVerifyPhoneByOperatorCommand } from "../platform/player/api/command/player/VerifyPhoneByOperatorCommand"
import type { IVerifyPhoneCommand } from "../platform/player/api/command/player/VerifyPhoneCommand"
import type { IVerifyPlayerDeviceByOperatorCommand } from "../platform/player/api/command/player/VerifyPlayerDeviceByOperatorCommand"
import type { TVerificationStrategy } from "../authprofile/model/VerificationStrategy"
import { IRpcClient } from "@sb/network-bus/RpcClient";
import { IMetadata } from "@sb/network-bus/Model";
import { ISetting } from "@sb/network-bus/Model";
import { emptySettings } from "@sb/network-bus/Model";
import { platform_player_location } from "./ProxyLocations";

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message error mappings described in IRegisterPlayerCommandErrorMapping
 */
export const call_RegisterPlayerCommand = (client: IRpcClient, payload: IRegisterPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRegisterPlayerCommand, IPlayerRegistrationResponseDto>(payload, `sumstats.platform.player.command.register_player`, `${platform_player_location}/sumstats.platform.player.command.register_player`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message error mappings described in IUpdateDeviceVerificationCodeCommandErrorMapping
 */
export const call_PlayerUpdateDeviceVerificationCodeCommand = (client: IRpcClient, payload: IPlayerUpdateDeviceVerificationCodeCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerUpdateDeviceVerificationCodeCommand, null>(payload, `sumstats.platform.player.command.update_device_verification_code`, `${platform_player_location}/sumstats.platform.player.command.update_device_verification_code`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message error mappings described in IUserLoginErrorMapping
 */
export const call_LoginPlayerCommand = (client: IRpcClient, payload: ILoginPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ILoginPlayerCommand, IPlayerLoginResponse>(payload, `sumstats.platform.player.command.login_player`, `${platform_player_location}/sumstats.platform.player.command.login_player`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message error mappings described in IVerifyDeviceCommandErrorMapping
 */
export const call_PlayerVerifyDeviceCommand = (client: IRpcClient, payload: IPlayerVerifyDeviceCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerVerifyDeviceCommand, ITokenDto>(payload, `sumstats.platform.player.command.verify_device`, `${platform_player_location}/sumstats.platform.player.command.verify_device`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetLoginResponseByOneTimeTokenCommand = (client: IRpcClient, payload: IGetLoginResponseByOneTimeTokenCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetLoginResponseByOneTimeTokenCommand, IPlayerLoginResponse>(payload, `sumstats.platform.player.command.get_login_response_by_one_time_token`, `${platform_player_location}/sumstats.platform.player.command.get_login_response_by_one_time_token`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_LoginPlayerAndGetRedirectUrlCommand = (client: IRpcClient, payload: ILoginPlayerAndGetRedirectUrlCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ILoginPlayerAndGetRedirectUrlCommand, string>(payload, `sumstats.platform.player.command.login_player_and_get_redirect_url`, `${platform_player_location}/sumstats.platform.player.command.login_player_and_get_redirect_url`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_RegisterPrivatePlayerCommand = (client: IRpcClient, payload: IRegisterPrivatePlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRegisterPrivatePlayerCommand, IPlayerRegistrationResponseDto>(payload, `sumstats.platform.player.command.register_private_player`, `${platform_player_location}/sumstats.platform.player.command.register_private_player`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message error mappings described in IAssignNewOperatorToOperatorPlayersErrorMapping
 */
export const call_AssignNewOperatorToOperatorPlayersCommand = (client: IRpcClient, payload: IAssignNewOperatorToOperatorPlayersCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAssignNewOperatorToOperatorPlayersCommand, null>(payload, `sumstats.platform.player.command.assign_new_operator_to_operator_players`, `${platform_player_location}/sumstats.platform.player.command.assign_new_operator_to_operator_players`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message error mappings described in IResetPhoneVerificationTokenByOperatorCommandErrorMapping
 */
export const call_ResetPlayerPhoneVerificationTokenByOperatorCommand = (client: IRpcClient, payload: IResetPlayerPhoneVerificationTokenByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResetPlayerPhoneVerificationTokenByOperatorCommand, null>(payload, `sumstats.platform.player.command.reset_phone_verification_by_operator`, `${platform_player_location}/sumstats.platform.player.command.reset_phone_verification_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message error mappings described in IUpdateEmailVerificationTokenByOperatorCommandErrorMapping
 */
export const call_UpdatePlayerEmailVerificationTokenByOperatorCommand = (client: IRpcClient, payload: IUpdatePlayerEmailVerificationTokenByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePlayerEmailVerificationTokenByOperatorCommand, null>(payload, `sumstats.platform.player.command.update_email_verification_token_by_operator`, `${platform_player_location}/sumstats.platform.player.command.update_email_verification_token_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d87f0-ec56-785e-b701-12b4d5a28583(default)'.
 * The message error mappings described in ICreateNoteCommandErrorMapping
 */
export const call_CreateIpRelationNoteCommand = (client: IRpcClient, payload: ICreateIpRelationNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateIpRelationNoteCommand, string>(payload, `sumstats.platform.player.command.create_ip_relation_note`, `${platform_player_location}/sumstats.platform.player.command.create_ip_relation_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d87f1-03f7-7ebd-9392-d0557f906905(default)'.
 * The message error mappings described in IDeleteNoteCommandErrorMapping
 */
export const call_DeleteIpRelationNoteCommand = (client: IRpcClient, payload: IDeleteIpRelationNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteIpRelationNoteCommand, null>(payload, `sumstats.platform.player.command.delete_ip_relation_note`, `${platform_player_location}/sumstats.platform.player.command.delete_ip_relation_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d87f1-2141-7733-8f9b-ebcec1eefcab(default)'.
 * The message error mappings described in IEditNoteCommandErrorMapping
 */
export const call_EditIpRelationNoteCommand = (client: IRpcClient, payload: IEditIpRelationNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IEditIpRelationNoteCommand, null>(payload, `sumstats.platform.player.command.edit_ip_relation_note`, `${platform_player_location}/sumstats.platform.player.command.edit_ip_relation_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d87f1-437e-7c52-8294-de9c8bc1946a(default)'.
 * The message error mappings described in IRestoreNoteCommandErrorMapping
 */
export const call_RestoreIpRelationNoteCommand = (client: IRpcClient, payload: IRestoreIpRelationNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRestoreIpRelationNoteCommand, null>(payload, `sumstats.platform.player.command.restore_ip_relation_note`, `${platform_player_location}/sumstats.platform.player.command.restore_ip_relation_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d87f2-498d-7040-b871-773614f72276(default)'.
 * The message error mappings described in IRestoreNoteCommandErrorMapping
 */
export const call_RestorePlayerDuplicateNoteCommand = (client: IRpcClient, payload: IRestorePlayerDuplicateNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRestorePlayerDuplicateNoteCommand, null>(payload, `sumstats.platform.player.command.restore_player_duplicate_note`, `${platform_player_location}/sumstats.platform.player.command.restore_player_duplicate_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d87f2-498d-765b-a830-afa7428891f1(default)'.
 * The message error mappings described in IDeleteNoteCommandErrorMapping
 */
export const call_DeletePlayerDuplicateNoteCommand = (client: IRpcClient, payload: IDeletePlayerDuplicateNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeletePlayerDuplicateNoteCommand, null>(payload, `sumstats.platform.player.command.delete_player_duplicate_note`, `${platform_player_location}/sumstats.platform.player.command.delete_player_duplicate_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d87f2-498d-7a28-9819-f8e8f3abe2a2(default)'.
 * The message error mappings described in IEditNoteCommandErrorMapping
 */
export const call_EditPlayerDuplicateNoteCommand = (client: IRpcClient, payload: IEditPlayerDuplicateNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IEditPlayerDuplicateNoteCommand, null>(payload, `sumstats.platform.player.command.edit_player_duplicate_note`, `${platform_player_location}/sumstats.platform.player.command.edit_player_duplicate_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d87f2-498d-7c2d-8828-c824aa4df345(default)'.
 * The message error mappings described in ICreateNoteCommandErrorMapping
 */
export const call_CreatePlayerDuplicateNoteCommand = (client: IRpcClient, payload: ICreatePlayerDuplicateNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreatePlayerDuplicateNoteCommand, string>(payload, `sumstats.platform.player.command.create_player_duplicate_note`, `${platform_player_location}/sumstats.platform.player.command.create_player_duplicate_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d882b-e560-771c-85c6-751637521cb5(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerEmailByOperatorQuery = (client: IRpcClient, payload: IGetPlayerEmailByOperatorQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerEmailByOperatorQuery, string>(payload, `sumstats.platform.player.query.get_player_email_by_operator`, `${platform_player_location}/sumstats.platform.player.query.get_player_email_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8842-5d92-743a-88a2-72f25c3ca9a7(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerPhoneNumberByOperatorQuery = (client: IRpcClient, payload: IGetPlayerPhoneNumberByOperatorQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerPhoneNumberByOperatorQuery, string>(payload, `sumstats.platform.player.query.get_player_phone_number_by_operator`, `${platform_player_location}/sumstats.platform.player.query.get_player_phone_number_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d884e-9a91-73f4-9229-8cad2f423aef(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerDevicesQuery = (client: IRpcClient, payload: IGetPlayerDevicesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerDevicesQuery, IPlayerDeviceDto[]>(payload, `sumstats.platform.player.query.get_player_devices`, `${platform_player_location}/sumstats.platform.player.query.get_player_devices`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-71ed-90bb-dfdc016fc4d1(default)'.
 * The message error mappings described in IUpdatePasswordByOperatorCommandErrorMapping
 */
export const call_UpdatePasswordByOperatorCommand = (client: IRpcClient, payload: IUpdatePasswordByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePasswordByOperatorCommand, null>(payload, `sumstats.platform.player.command.update_password_by_operator`, `${platform_player_location}/sumstats.platform.player.command.update_password_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-73c6-bda1-e6b143bdcb64(default)'.
 * The message error mappings described in IUpdateEmailByOperatorCommandErrorMapping
 */
export const call_UpdateEmailByOperatorCommand = (client: IRpcClient, payload: IUpdateEmailByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateEmailByOperatorCommand, null>(payload, `sumstats.platform.player.command.update_email_by_operator`, `${platform_player_location}/sumstats.platform.player.command.update_email_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-73c6-bda1-e6b143bdcb64(default)'.
 * The message error mappings described in IUpdatePhoneByOperatorCommandErrorMapping
 */
export const call_UpdatePhoneByOperatorCommand = (client: IRpcClient, payload: IUpdatePhoneByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePhoneByOperatorCommand, null>(payload, `sumstats.platform.player.command.update_phone_by_operator`, `${platform_player_location}/sumstats.platform.player.command.update_phone_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7553-a59c-3ba0a9000348(default),018d8804-6f36-7689-ab52-7f78bf52aedc(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_MovePlayersToAffiliateCommand = (client: IRpcClient, payload: IMovePlayersToAffiliateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IMovePlayersToAffiliateCommand, null>(payload, `sumstats.platform.player.command.move_players_to_affiliate`, `${platform_player_location}/sumstats.platform.player.command.move_players_to_affiliate`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-756c-813d-d76269ee4e47(default),018d8850-54bb-7978-bfde-bbc1740b8a25(default),018d8853-c01d-790d-be07-89bb51dcbe85(default),018d8853-c01d-7f2e-af25-1270ca27960c(default),018d8853-c01d-767e-a37c-7d265145ef4a(default)'.
 * The message error mappings described in IAssignOperatorToPlayersErrorMapping
 */
export const call_AssignOperatorToPlayersCommand = (client: IRpcClient, payload: IAssignOperatorToPlayersCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAssignOperatorToPlayersCommand, null>(payload, `sumstats.platform.player.command.assign_operator_to_players`, `${platform_player_location}/sumstats.platform.player.command.assign_operator_to_players`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-75bd-a3e4-592be46524c5(default)'.
 * The message error mappings described in IUnbanUserCommandErrorMapping
 */
export const call_UnbanPlayerCommand = (client: IRpcClient, payload: IUnbanPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUnbanPlayerCommand, null>(payload, `sumstats.platform.player.command.unban_player`, `${platform_player_location}/sumstats.platform.player.command.unban_player`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-792f-980a-72b5f45a00d1(default)'.
 * The message error mappings described in IRejectEmailByOperatorCommandErrorMapping
 */
export const call_RejectEmailByOperatorCommand = (client: IRpcClient, payload: IRejectEmailByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRejectEmailByOperatorCommand, null>(payload, `sumstats.platform.player.command.reject_email_by_operator`, `${platform_player_location}/sumstats.platform.player.command.reject_email_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-792f-980a-72b5f45a00d1(default)'.
 * The message error mappings described in IVerifyEmailByOperatorCommandErrorMapping
 */
export const call_VerifyEmailByOperatorCommand = (client: IRpcClient, payload: IVerifyEmailByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVerifyEmailByOperatorCommand, null>(payload, `sumstats.platform.player.command.verify_email_by_operator`, `${platform_player_location}/sumstats.platform.player.command.verify_email_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-795a-a1df-1322330ae131(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_CreateCheckSecretQuestionTokenCommand = (client: IRpcClient, payload: ICreateCheckSecretQuestionTokenCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateCheckSecretQuestionTokenCommand, ICheckSecretQuestionTokenDto>(payload, `sumstats.platform.player.checksecretquestion.create`, `${platform_player_location}/sumstats.platform.player.checksecretquestion.create`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-795a-a1df-1322330ae131(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UseCheckSecretQuestionTokenCommand = (client: IRpcClient, payload: IUseCheckSecretQuestionTokenCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUseCheckSecretQuestionTokenCommand, boolean>(payload, `sumstats.platform.player.checksecretquestion.use`, `${platform_player_location}/sumstats.platform.player.checksecretquestion.use`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7967-854a-e3211724c264(default)'.
 * The message error mappings described in IResetPasswordByOperatorCommandErrorMapping
 */
export const call_ResetPasswordByOperatorCommand = (client: IRpcClient, payload: IResetPasswordByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResetPasswordByOperatorCommand, null>(payload, `sumstats.platform.player.command.reset_password_by_operator`, `${platform_player_location}/sumstats.platform.player.command.reset_password_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7b37-a317-6fc20138d55a(default)'.
 * The message error mappings described in IBanUserCommandErrorMapping
 */
export const call_BanPlayerCommand = (client: IRpcClient, payload: IBanPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IBanPlayerCommand, null>(payload, `sumstats.platform.player.command.ban_player`, `${platform_player_location}/sumstats.platform.player.command.ban_player`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7b4e-9499-77bc6aca0b92(default),018d8804-6f37-7528-952a-0ad646ce2e47(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_DetachPlayersFromAffiliateCommand = (client: IRpcClient, payload: IDetachPlayersFromAffiliateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDetachPlayersFromAffiliateCommand, null>(payload, `sumstats.platform.player.command.detach_players_from_affiliate`, `${platform_player_location}/sumstats.platform.player.command.detach_players_from_affiliate`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7c7f-b6de-98b9c7818714(default)'.
 * The message error mappings described in IRejectPhoneByOperatorCommandErrorMapping
 */
export const call_RejectPhoneByOperatorCommand = (client: IRpcClient, payload: IRejectPhoneByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRejectPhoneByOperatorCommand, null>(payload, `sumstats.platform.player.command.reject_phone_by_operator`, `${platform_player_location}/sumstats.platform.player.command.reject_phone_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7c7f-b6de-98b9c7818714(default)'.
 * The message error mappings described in IVerifyPhoneByOperatorCommandErrorMapping
 */
export const call_VerifyPhoneByOperatorCommand = (client: IRpcClient, payload: IVerifyPhoneByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVerifyPhoneByOperatorCommand, null>(payload, `sumstats.platform.player.command.verify_phone_by_operator`, `${platform_player_location}/sumstats.platform.player.command.verify_phone_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7d66-939c-47f4812749b9(default)'.
 * The message error mappings described in IRegisterPlayerByOperatorCommandErrorMapping
 */
export const call_RegisterPlayerByOperatorCommand = (client: IRpcClient, payload: IRegisterPlayerByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRegisterPlayerByOperatorCommand, IPlayerRegistrationResponseDto>(payload, `sumstats.platform.player.command.register_player_by_operator`, `${platform_player_location}/sumstats.platform.player.command.register_player_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7db7-afff-a809f80463cd(default),018d8853-c01d-73a4-8c4f-f3f12a671c3b(default)'.
 * The message error mappings described in IUpdatePlayerGroupErrorMapping
 */
export const call_UpdateGroupCommand = (client: IRpcClient, payload: IUpdateGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateGroupCommand, null>(payload, `sumstats.platform.player.command.update_group`, `${platform_player_location}/sumstats.platform.player.command.update_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-72cc-82c5-6b1ef350714a(default)'.
 * The message error mappings described in IRestoreNoteCommandErrorMapping
 */
export const call_RestorePlayerNoteCommand = (client: IRpcClient, payload: IRestorePlayerNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRestorePlayerNoteCommand, null>(payload, `sumstats.platform.player.command.restore_player_note`, `${platform_player_location}/sumstats.platform.player.command.restore_player_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-7392-95f4-1872f10d454e(default)'.
 * The message error mappings described in IEditNoteCommandErrorMapping
 */
export const call_EditPlayerNoteCommand = (client: IRpcClient, payload: IEditPlayerNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IEditPlayerNoteCommand, null>(payload, `sumstats.platform.player.command.edit_player_note`, `${platform_player_location}/sumstats.platform.player.command.edit_player_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-7485-9520-acb051e643c3(default)'.
 * The message error mappings described in IDeleteDeviceByOperatorCommandErrorMapping
 */
export const call_DeletePlayerDeviceByOperatorCommand = (client: IRpcClient, payload: IDeletePlayerDeviceByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeletePlayerDeviceByOperatorCommand, null>(payload, `sumstats.platform.player.command.delete_device_by_operator`, `${platform_player_location}/sumstats.platform.player.command.delete_device_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-77ea-b173-5e6c75f58a04(default)'.
 * The message error mappings described in ICreateNoteCommandErrorMapping
 */
export const call_CreatePlayerNoteCommand = (client: IRpcClient, payload: ICreatePlayerNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreatePlayerNoteCommand, string>(payload, `sumstats.platform.player.command.create_player_note`, `${platform_player_location}/sumstats.platform.player.command.create_player_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-7a23-8055-3ef5aa74f207(default)'.
 * The message error mappings described in IDeleteNoteCommandErrorMapping
 */
export const call_DeletePlayerNoteCommand = (client: IRpcClient, payload: IDeletePlayerNoteCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeletePlayerNoteCommand, null>(payload, `sumstats.platform.player.command.delete_player_note`, `${platform_player_location}/sumstats.platform.player.command.delete_player_note`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-7ac2-bb8d-2e873a0e2760(default)'.
 * The message error mappings described in IVerifyDeviceByOperatorCommandErrorMapping
 */
export const call_VerifyPlayerDeviceByOperatorCommand = (client: IRpcClient, payload: IVerifyPlayerDeviceByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVerifyPlayerDeviceByOperatorCommand, null>(payload, `sumstats.platform.player.command.verify_device_by_operator`, `${platform_player_location}/sumstats.platform.player.command.verify_device_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8853-c01d-7289-b4b1-831c4b9fc6a5(default)'.
 * The message error mappings described in IDeleteGroupErrorMapping
 */
export const call_DeleteGroupCommand = (client: IRpcClient, payload: IDeleteGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteGroupCommand, null>(payload, `sumstats.platform.player.command.delete_group`, `${platform_player_location}/sumstats.platform.player.command.delete_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8853-c01d-7549-a466-3ab551fe9a3a(default),018d8853-c01d-7f69-a135-10baf9f6f105(default)'.
 * The message error mappings described in IAddPlayersToGroupErrorMapping
 */
export const call_AddPlayersToGroupCommand = (client: IRpcClient, payload: IAddPlayersToGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAddPlayersToGroupCommand, null>(payload, `sumstats.platform.player.command.add_players_to_group`, `${platform_player_location}/sumstats.platform.player.command.add_players_to_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8853-c01d-76e3-b3db-08e250eee9df(default)'.
 * The message error mappings described in ICreateGroupErrorMapping
 */
export const call_CreateGroupCommand = (client: IRpcClient, payload: ICreateGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateGroupCommand, { [key: string]: any }>(payload, `sumstats.platform.player.command.create_group`, `${platform_player_location}/sumstats.platform.player.command.create_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8853-c01d-7a71-af10-fab4a26ed6ca(default)'.
 * The message error mappings described in IMovePlayersToGroupsErrorMapping
 */
export const call_MovePlayersToGroupsCommand = (client: IRpcClient, payload: IMovePlayersToGroupsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IMovePlayersToGroupsCommand, null>(payload, `sumstats.platform.player.command.move_players_to_groups`, `${platform_player_location}/sumstats.platform.player.command.move_players_to_groups`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8ddd-1e28-70d8-8e98-cb6743e2ef47(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UpdatePlayerDeviceVerificationEnabledByOperatorCommand = (client: IRpcClient, payload: IUpdatePlayerDeviceVerificationEnabledByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePlayerDeviceVerificationEnabledByOperatorCommand, null>(payload, `sumstats.platform.player.command.update_device_verification_enabled_by_operator`, `${platform_player_location}/sumstats.platform.player.command.update_device_verification_enabled_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018fca27-e9af-7775-9528-1416eb62d895(default)'.
 * The message error mappings described in IDisableTwoFactorAuthenticationByOperatorErrorMapping
 */
export const call_PlayerDisableTwoFactorAuthenticationByOperatorCommand = (client: IRpcClient, payload: IPlayerDisableTwoFactorAuthenticationByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerDisableTwoFactorAuthenticationByOperatorCommand, null>(payload, `sumstats.platform.player.command.disable_two_factor_authentication_by_operator`, `${platform_player_location}/sumstats.platform.player.command.disable_two_factor_authentication_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllPlayerFailedLoginsQuery = (client: IRpcClient, payload: IFindAllPlayerFailedLoginsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllPlayerFailedLoginsQuery, IPage<IPlayerFailedLoginDto>>(payload, `sumstats.platform.player.query.get_player_failed_logins`, `${platform_player_location}/sumstats.platform.player.query.get_player_failed_logins`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerSecretQuestionByOperatorQuery = (client: IRpcClient, payload: IGetPlayerSecretQuestionByOperatorQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerSecretQuestionByOperatorQuery, string>(payload, `sumstats.platform.player.query.get_player_secret_question_by_operator`, `${platform_player_location}/sumstats.platform.player.query.get_player_secret_question_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_ResetPlayerLoginAttemptsCountCommand = (client: IRpcClient, payload: IResetPlayerLoginAttemptsCountCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResetPlayerLoginAttemptsCountCommand, null>(payload, `sumstats.platform.player.command.reset_login_attempts_count`, `${platform_player_location}/sumstats.platform.player.command.reset_login_attempts_count`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_RevokeTokenByOperatorCommand = (client: IRpcClient, payload: IRevokeTokenByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRevokeTokenByOperatorCommand, null>(payload, `sumstats.platform.player.command.revoke_token_by_operator`, `${platform_player_location}/sumstats.platform.player.command.revoke_token_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetVerificationStrategiesByPlayerIdsQuery = (client: IRpcClient, payload: IGetVerificationStrategiesByPlayerIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetVerificationStrategiesByPlayerIdsQuery, { [key: string]: TVerificationStrategy }>(payload, `sumstats.platform.player.query.get_player_verification_strategies_by_player_ids`, `${platform_player_location}/sumstats.platform.player.query.get_player_verification_strategies_by_player_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, SERVICE
 * The message error mappings described in IGetAccountDetailsByTokenErrorMapping
 */
export const call_GetPlayerDetailsByTokenQuery = (client: IRpcClient, payload: IGetPlayerDetailsByTokenQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerDetailsByTokenQuery, IAccountDetails>(payload, `sumstats.platform.player.query.get_player_details_by_token`, `${platform_player_location}/sumstats.platform.player.query.get_player_details_by_token`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerSubjectWithFakeToken = (client: IRpcClient, payload: IGetPlayerSubjectWithFakeToken, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerSubjectWithFakeToken, IPlayerSubject>(payload, `sumstats.platform.player.command.get_player_subject_with_fake_token`, `${platform_player_location}/sumstats.platform.player.command.get_player_subject_with_fake_token`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IChangePasswordCommandErrorMapping
 */
export const call_ChangePasswordCommand = (client: IRpcClient, payload: IChangePasswordCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IChangePasswordCommand, null>(payload, `sumstats.platform.player.command.change_password`, `${platform_player_location}/sumstats.platform.player.command.change_password`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IDeleteDeviceCommandErrorMapping
 */
export const call_DeletePlayerDeviceCommand = (client: IRpcClient, payload: IDeletePlayerDeviceCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeletePlayerDeviceCommand, null>(payload, `sumstats.platform.player.command.delete_device`, `${platform_player_location}/sumstats.platform.player.command.delete_device`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IDisableTwoFactorAuthenticationErrorMapping
 */
export const call_PlayerDisableTwoFactorAuthenticationCommand = (client: IRpcClient, payload: IPlayerDisableTwoFactorAuthenticationCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerDisableTwoFactorAuthenticationCommand, null>(payload, `sumstats.platform.player.command.disable_two_factor_authentication`, `${platform_player_location}/sumstats.platform.player.command.disable_two_factor_authentication`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IEnableTwoFactorAuthenticationErrorMapping
 */
export const call_PlayerEnableTwoFactorAuthenticationCommand = (client: IRpcClient, payload: IPlayerEnableTwoFactorAuthenticationCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerEnableTwoFactorAuthenticationCommand, IEnableTwoFactorAuthenticationResponse>(payload, `sumstats.platform.player.command.enable_two_factor_authentication`, `${platform_player_location}/sumstats.platform.player.command.enable_two_factor_authentication`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IGenerateTwoFactorAuthenticationSecretErrorMapping
 */
export const call_PlayerGenerateTwoFactorAuthenticationSecretCommand = (client: IRpcClient, payload: IPlayerGenerateTwoFactorAuthenticationSecretCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerGenerateTwoFactorAuthenticationSecretCommand, IOneTimePasswordSecretDto>(payload, `sumstats.platform.player.command.generate_two_factor_authentication_secret`, `${platform_player_location}/sumstats.platform.player.command.generate_two_factor_authentication_secret`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IRequestEmailUpdateErrorMapping
 */
export const call_RequestPlayerEmailUpdateCommand = (client: IRpcClient, payload: IRequestPlayerEmailUpdateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRequestPlayerEmailUpdateCommand, null>(payload, `sumstats.platform.player.command.request_email_update`, `${platform_player_location}/sumstats.platform.player.command.request_email_update`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IRequestPhoneUpdateCommandErrorMapping
 */
export const call_RequestPlayerPhoneUpdateCommand = (client: IRpcClient, payload: IRequestPlayerPhoneUpdateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRequestPlayerPhoneUpdateCommand, null>(payload, `sumstats.platform.player.command.request_phone_update`, `${platform_player_location}/sumstats.platform.player.command.request_phone_update`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IUpdateEmailCommandErrorMapping
 */
export const call_UpdateEmailCommand = (client: IRpcClient, payload: IUpdateEmailCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateEmailCommand, null>(payload, `sumstats.platform.player.command.update_email`, `${platform_player_location}/sumstats.platform.player.command.update_email`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IUpdatePhoneCommandErrorMapping
 */
export const call_UpdatePhoneCommand = (client: IRpcClient, payload: IUpdatePhoneCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePhoneCommand, null>(payload, `sumstats.platform.player.command.update_phone`, `${platform_player_location}/sumstats.platform.player.command.update_phone`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IVerifyPhoneCommandErrorMapping
 */
export const call_VerifyPhoneCommand = (client: IRpcClient, payload: IVerifyPhoneCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVerifyPhoneCommand, null>(payload, `sumstats.platform.player.command.verify_phone`, `${platform_player_location}/sumstats.platform.player.command.verify_phone`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerRemoteStoreDataQuery = (client: IRpcClient, payload: IGetPlayerRemoteStoreDataQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerRemoteStoreDataQuery, { [key: string]: string }>(payload, `sumstats.platform.player.query.get_player_remote_store_data`, `${platform_player_location}/sumstats.platform.player.query.get_player_remote_store_data`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetSelfPlayerDevicesQuery = (client: IRpcClient, payload: IGetSelfPlayerDevicesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetSelfPlayerDevicesQuery, IPlayerDeviceDto[]>(payload, `sumstats.platform.player.query.get_self_player_devices`, `${platform_player_location}/sumstats.platform.player.query.get_self_player_devices`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_PlayerRevokeKeepAliveCommand = (client: IRpcClient, payload: IPlayerRevokeKeepAliveCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerRevokeKeepAliveCommand, null>(payload, `sumstats.platform.player.command.revoke_keep_alive`, `${platform_player_location}/sumstats.platform.player.command.revoke_keep_alive`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_RefreshKeepAliveCommand = (client: IRpcClient, payload: IRefreshKeepAliveCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRefreshKeepAliveCommand, IRefreshKeepAliveResponse>(payload, `sumstats.platform.player.command.refresh_keep_alive`, `${platform_player_location}/sumstats.platform.player.command.refresh_keep_alive`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_SavePlayerRemoteStoreDataCommand = (client: IRpcClient, payload: ISavePlayerRemoteStoreDataCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ISavePlayerRemoteStoreDataCommand, null>(payload, `sumstats.platform.player.command.save_remote_store_data`, `${platform_player_location}/sumstats.platform.player.command.save_remote_store_data`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_UpdatePlayerDeviceVerificationEnabledCommand = (client: IRpcClient, payload: IUpdatePlayerDeviceVerificationEnabledCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePlayerDeviceVerificationEnabledCommand, null>(payload, `sumstats.platform.player.command.update_device_verification_enabled`, `${platform_player_location}/sumstats.platform.player.command.update_device_verification_enabled`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_UpdatePlayerVerificationTokenCommand = (client: IRpcClient, payload: IUpdatePlayerVerificationTokenCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePlayerVerificationTokenCommand, null>(payload, `sumstats.platform.player.command.update_verification`, `${platform_player_location}/sumstats.platform.player.command.update_verification`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-73c6-bda1-e6b143bdcb64(default)'.
 * The message error mappings described in IUpdateProfileCommandErrorMapping
 */
export const call_UpdateProfileCommand = (client: IRpcClient, payload: IUpdateProfileCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateProfileCommand, null>(payload, `sumstats.platform.player.command.update_profile`, `${platform_player_location}/sumstats.platform.player.command.update_profile`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE
 * The message requires the following acl: '018d8850-54bb-7bf8-85ba-9d09f957fa6b(default)'.
 * The message error mappings described in IRevokeTokenCommandErrorMapping
 */
export const call_RevokeTokenCommand = (client: IRpcClient, payload: IRevokeTokenCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRevokeTokenCommand, null>(payload, `sumstats.platform.player.command.revoke_token`, `${platform_player_location}/sumstats.platform.player.command.revoke_token`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateTimeZoneCommand = (client: IRpcClient, payload: IUpdateTimeZoneCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateTimeZoneCommand, null>(payload, `sumstats.platform.player.command.update_time_zone`, `${platform_player_location}/sumstats.platform.player.command.update_time_zone`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * The message error mappings described in IIsKycApprovedQueryErrorMapping
 */
export const call_IsKycApprovedQuery = (client: IRpcClient, payload: IIsKycApprovedQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IIsKycApprovedQuery, boolean>(payload, `sumstats.platform.player.query.is_kyc_approved`, `${platform_player_location}/sumstats.platform.player.query.is_kyc_approved`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * The message error mappings described in IRegisterPlayerBotCommandErrorMapping
 */
export const call_RegisterPlayerBotCommand = (client: IRpcClient, payload: IRegisterPlayerBotCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRegisterPlayerBotCommand, null>(payload, `sumstats.platform.player.command.register_player_bot`, `${platform_player_location}/sumstats.platform.player.command.register_player_bot`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * The message error mappings described in IRegisterPlayerByAffiliateCommandErrorMapping
 */
export const call_RegisterPlayerByAffiliateCommand = (client: IRpcClient, payload: IRegisterPlayerByAffiliateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRegisterPlayerByAffiliateCommand, null>(payload, `sumstats.platform.player.command.register_player_by_affiliate`, `${platform_player_location}/sumstats.platform.player.command.register_player_by_affiliate`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * The message error mappings described in IRegisterPlayerByAgentCommandErrorMapping
 */
export const call_RegisterPlayerByAgentCommand = (client: IRpcClient, payload: IRegisterPlayerByAgentCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRegisterPlayerByAgentCommand, null>(payload, `sumstats.platform.player.command.register_player_by_agent`, `${platform_player_location}/sumstats.platform.player.command.register_player_by_agent`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ApprovePlayerWithAffiliateLinkByOperatorCommand = (client: IRpcClient, payload: IApprovePlayerWithAffiliateLinkByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IApprovePlayerWithAffiliateLinkByOperatorCommand, string>(payload, `sumstats.platform.player.command.approve_player_with_affiliate_link_by_operator`, `${platform_player_location}/sumstats.platform.player.command.approve_player_with_affiliate_link_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ApprovePlayerWithAffiliateLinkCommand = (client: IRpcClient, payload: IApprovePlayerWithAffiliateLinkCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IApprovePlayerWithAffiliateLinkCommand, string>(payload, `sumstats.platform.player.command.approve_player_with_affiliate_link`, `${platform_player_location}/sumstats.platform.player.command.approve_player_with_affiliate_link`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_AuthenticatePlayerCommand = (client: IRpcClient, payload: IAuthenticatePlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAuthenticatePlayerCommand, IPlayerSubject>(payload, `sumstats.platform.player.command.authenticate_player`, `${platform_player_location}/sumstats.platform.player.command.authenticate_player`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_CheckPasswordIdenticalCommand = (client: IRpcClient, payload: ICheckPasswordIdenticalCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICheckPasswordIdenticalCommand, boolean>(payload, `sumstats.platform.player.command.check_password_identical`, `${platform_player_location}/sumstats.platform.player.command.check_password_identical`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_EditPlayerPermissionsCommand = (client: IRpcClient, payload: IEditPlayerPermissionsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IEditPlayerPermissionsCommand, null>(payload, `sumstats.platform.player.command.edit_player_permissions`, `${platform_player_location}/sumstats.platform.player.command.edit_player_permissions`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindPlayerIdByTinyIdQuery = (client: IRpcClient, payload: IFindPlayerIdByTinyIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindPlayerIdByTinyIdQuery, string | null | undefined>(payload, `sumstats.platform.player.query.find_player_id_by_tiny_id`, `${platform_player_location}/sumstats.platform.player.query.find_player_id_by_tiny_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetExternalPlayerId = (client: IRpcClient, payload: IGetExternalPlayerId, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetExternalPlayerId, string | null | undefined>(payload, `sumstats.platform.player.query.get_external_player_id`, `${platform_player_location}/sumstats.platform.player.query.get_external_player_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetExternalPlayerTokenByPlayerId = (client: IRpcClient, payload: IGetExternalPlayerTokenByPlayerId, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetExternalPlayerTokenByPlayerId, string>(payload, `sumstats.platform.player.query.get_external_player_token`, `${platform_player_location}/sumstats.platform.player.query.get_external_player_token`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerBasicInfoByPlayerIdQuery = (client: IRpcClient, payload: IGetPlayerBasicInfoByPlayerIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerBasicInfoByPlayerIdQuery, IPlayerBasicInfo>(payload, `sumstats.platform.player.query.get_player_basic_info_by_player_id`, `${platform_player_location}/sumstats.platform.player.query.get_player_basic_info_by_player_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerGameInfoByPlayerIdQuery = (client: IRpcClient, payload: IGetPlayerGameInfoByPlayerIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerGameInfoByPlayerIdQuery, IPlayerGameInfo>(payload, `sumstats.platform.player.query.get_player_game_info_by_player_id`, `${platform_player_location}/sumstats.platform.player.query.get_player_game_info_by_player_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerIdsByPlayerExternalIdsQuery = (client: IRpcClient, payload: IGetPlayerIdsByPlayerExternalIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerIdsByPlayerExternalIdsQuery, string[]>(payload, `sumstats.platform.player.query.get_player_ids_by_player_external_ids`, `${platform_player_location}/sumstats.platform.player.query.get_player_ids_by_player_external_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerIdsByPlayerGroupsWithOffsetQuery = (client: IRpcClient, payload: IGetPlayerIdsByPlayerGroupsWithOffsetQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerIdsByPlayerGroupsWithOffsetQuery, IBonusPlayerIdsWithOffset>(payload, `sumstats.platform.player.query.get_player_ids_by_player_groups_with_offset`, `${platform_player_location}/sumstats.platform.player.query.get_player_ids_by_player_groups_with_offset`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerIdsByPlayerUsernamesQuery = (client: IRpcClient, payload: IGetPlayerIdsByPlayerUsernamesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerIdsByPlayerUsernamesQuery, string[]>(payload, `sumstats.platform.player.query.get_player_ids_by_player_usernames`, `${platform_player_location}/sumstats.platform.player.query.get_player_ids_by_player_usernames`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerSessionInfoOfLastSessionByPlayerIdQuery = (client: IRpcClient, payload: IGetPlayerSessionInfoOfLastSessionByPlayerIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerSessionInfoOfLastSessionByPlayerIdQuery, IPlayerSessionInfo>(payload, `sumstats.platform.player.query.get_player_session_info_of_last_session_by_player_id`, `${platform_player_location}/sumstats.platform.player.query.get_player_session_info_of_last_session_by_player_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerVerificationStateQuery = (client: IRpcClient, payload: IGetPlayerVerificationStateQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerVerificationStateQuery, boolean>(payload, `sumstats.platform.player.query.get_player_verification_state`, `${platform_player_location}/sumstats.platform.player.query.get_player_verification_state`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayersDetailsForBonusClaimQuery = (client: IRpcClient, payload: IGetPlayersDetailsForBonusClaimQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayersDetailsForBonusClaimQuery, IPlayerDetailsForClaimBonusFromPlayerSubject[]>(payload, `sumstats.platform.player.query.get_player_details_for_bonus_claim_by_player_ids`, `${platform_player_location}/sumstats.platform.player.query.get_player_details_for_bonus_claim_by_player_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_RegisterExternalPlayerCommand = (client: IRpcClient, payload: IRegisterExternalPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRegisterExternalPlayerCommand, null>(payload, `sumstats.platform.player.command.register_external_player`, `${platform_player_location}/sumstats.platform.player.command.register_external_player`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_UnlinkPlayerWithAffiliateCommand = (client: IRpcClient, payload: IUnlinkPlayerWithAffiliateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUnlinkPlayerWithAffiliateCommand, null>(payload, `sumstats.platform.player.command.unlink_player_with_affiliate`, `${platform_player_location}/sumstats.platform.player.command.unlink_player_with_affiliate`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateExternalTokenCommand = (client: IRpcClient, payload: IUpdateExternalTokenCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateExternalTokenCommand, null>(payload, `sumstats.platform.player.update_external_token`, `${platform_player_location}/sumstats.platform.player.update_external_token`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_PlayerEmailExistsQuery = (client: IRpcClient, payload: IPlayerEmailExistsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerEmailExistsQuery, boolean>(payload, `sumstats.platform.player.query.player_email_exists`, `${platform_player_location}/sumstats.platform.player.query.player_email_exists`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_PlayerLoginExistsQuery = (client: IRpcClient, payload: IPlayerLoginExistsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerLoginExistsQuery, boolean>(payload, `sumstats.platform.player.query.player_login_exists`, `${platform_player_location}/sumstats.platform.player.query.player_login_exists`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_PlayerPhoneExistsQuery = (client: IRpcClient, payload: IPlayerPhoneExistsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IPlayerPhoneExistsQuery, boolean>(payload, `sumstats.platform.player.query.player_phone_exists`, `${platform_player_location}/sumstats.platform.player.query.player_phone_exists`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateTestPlayerCommand = (client: IRpcClient, payload: IUpdateTestPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateTestPlayerCommand, IEventToken>(payload, `sumstats.platform.player.command.update_test_player`, `${platform_player_location}/sumstats.platform.player.command.update_test_player`, metadata, settings);

/**
 * [!] The message does not require roles.
 * The message error mappings described in IResetPasswordByEmailCommandErrorMapping
 */
export const call_ResetPasswordByEmailCommand = (client: IRpcClient, payload: IResetPasswordByEmailCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResetPasswordByEmailCommand, null>(payload, `sumstats.platform.player.command.reset_password_by_email`, `${platform_player_location}/sumstats.platform.player.command.reset_password_by_email`, metadata, settings);

/**
 * [!] The message does not require roles.
 * The message error mappings described in IResetPasswordByPhoneCommandErrorMapping
 */
export const call_ResetPasswordByPhoneCommand = (client: IRpcClient, payload: IResetPasswordByPhoneCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResetPasswordByPhoneCommand, { [key: string]: any }>(payload, `sumstats.platform.player.command.reset_password_by_phone`, `${platform_player_location}/sumstats.platform.player.command.reset_password_by_phone`, metadata, settings);

/**
 * [!] The message does not require roles.
 * The message error mappings described in IUpdatePasswordByEmailCommandErrorMapping
 */
export const call_UpdatePasswordByEmailCommand = (client: IRpcClient, payload: IUpdatePasswordByEmailCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePasswordByEmailCommand, null>(payload, `sumstats.platform.player.command.update_password_by_email`, `${platform_player_location}/sumstats.platform.player.command.update_password_by_email`, metadata, settings);

/**
 * [!] The message does not require roles.
 * The message error mappings described in IUpdatePasswordByPhoneCommandErrorMapping
 */
export const call_UpdatePasswordByPhoneCommand = (client: IRpcClient, payload: IUpdatePasswordByPhoneCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdatePasswordByPhoneCommand, null>(payload, `sumstats.platform.player.command.update_password_by_phone`, `${platform_player_location}/sumstats.platform.player.command.update_password_by_phone`, metadata, settings);

/**
 * [!] The message does not require roles.
 * The message error mappings described in IValidateIdentityNumberCommandErrorMapping
 */
export const call_ValidateIdentityNumberCommand = (client: IRpcClient, payload: IValidateIdentityNumberCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IValidateIdentityNumberCommand, IIdentityNumberValidationResponse>(payload, `sumstats.platform.player.command.validate_identity_number`, `${platform_player_location}/sumstats.platform.player.command.validate_identity_number`, metadata, settings);

/**
 * [!] The message does not require roles.
 * The message error mappings described in IVerifyEmailCommandErrorMapping
 */
export const call_VerifyEmailCommand = (client: IRpcClient, payload: IVerifyEmailCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVerifyEmailCommand, null>(payload, `sumstats.platform.player.command.verify_email`, `${platform_player_location}/sumstats.platform.player.command.verify_email`, metadata, settings);

/**
 * [!] The message does not require roles.
 * [!] The message doesn't have error mappings.
 */
export const call_CheckSecurityQuestionAnswerCommand = (client: IRpcClient, payload: ICheckSecurityQuestionAnswerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICheckSecurityQuestionAnswerCommand, boolean>(payload, `sumstats.platform.player.query.check_security_question_answer`, `${platform_player_location}/sumstats.platform.player.query.check_security_question_answer`, metadata, settings);

/**
 * [!] The message does not require roles.
 * [!] The message doesn't have error mappings.
 */
export const call_ExternalPlayerLoginCommand = (client: IRpcClient, payload: IExternalPlayerLoginCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IExternalPlayerLoginCommand, IPlayerLoginResponse>(payload, `sumstats.sportsbook.player.command.external_player_login`, `${platform_player_location}/sumstats.sportsbook.player.command.external_player_login`, metadata, settings);

/**
 * [!] The message does not require roles.
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllCountriesQuery = (client: IRpcClient, payload: IGetAllCountriesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllCountriesQuery, ICountry[]>(payload, `sumstats.platform.get_all_countries`, `${platform_player_location}/sumstats.platform.get_all_countries`, metadata, settings);

/**
 * [!] The message does not require roles.
 * [!] The message doesn't have error mappings.
 */
export const call_GetCountryByIdQuery = (client: IRpcClient, payload: IGetCountryByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCountryByIdQuery, ICountry>(payload, `sumstats.platform.get_country_by_id`, `${platform_player_location}/sumstats.platform.get_country_by_id`, metadata, settings);

/**
 * [!] The message does not require roles.
 * [!] The message doesn't have error mappings.
 */
export const call_RefreshTokenCommand = (client: IRpcClient, payload: IRefreshTokenCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRefreshTokenCommand, ITokenDto>(payload, `sumstats.platform.player.command.refresh_token`, `${platform_player_location}/sumstats.platform.player.command.refresh_token`, metadata, settings);
