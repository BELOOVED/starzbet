/*
Copyright (c) NAVER Corp.
name: @cfcs/react
license: MIT
author: NAVER Corp.
repository: https://github.com/naver/cfcs
version: 0.0.26
*/
import {
    adaptReactive,
    keys,
    camelize
} from '@cfcs/core';
import {
    useRef,
    useMemo,
    useState,
    useEffect
} from 'react';

/**
 * @description In React, you can create reactive components through adapters.
 * @category Reactive
 * @example
 * ```ts
 * import { useReactive } from "@cfcs/react";
 *
 * export function useReactiveComponent() {
 *   return useReactive(REACTIVE_ADAPTER);
 * }
 * ```
 */

function useReactive(reactiveAdapter, props) {
    var readRef = useRef(true);
    var adaptResult = useMemo(function() {
        return adaptReactive(reactiveAdapter, props);
    }, []);
    var reactiveState = adaptResult.state();
    var names = keys(reactiveState);
    var states = useState({})[0];

    var _loop_1 = function(name) {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        var state = useState(function() {
            return reactiveState[name];
        });
        states[name] = {
            getter: false,
            set: state[1],
            value: state[0]
        };
    };

    for (var name in reactiveState) {
        _loop_1(name);
    }

    readRef.current = true;
    var methods = useMemo(function() {
        return adaptResult.methods();
    }, []);
    useEffect(function() {
        readRef.current = false;
    });
    useEffect(function() {
        adaptResult.mounted();
        var inst = adaptResult.instance();
        names.forEach(function(name) {
            inst.subscribe(name, function(value) {
                states[name].value = value;

                if (states[name].getter) {
                    states[name].set(value);
                }
            });
        });
        adaptResult.init();
        return function() {
            adaptResult.destroy();
        }; // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    var result = names.reduce(function(result, name) {
        if (!methods[name]) {
            Object.defineProperty(result, name, {
                enumerable: true,
                get: function() {
                    if (readRef.current) {
                        states[name].getter = true;
                    }

                    return states[name].value;
                }
            });
        }

        return result;
    }, {});
    var reactiveEvents = adaptResult.events();
    reactiveEvents.forEach(function(name) {
        result[camelize("on ".concat(name))] = function(callback, dependencies) {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            var listener = useMemo(function() {
                adaptResult.on(name, callback);
                return callback;
            }, dependencies);
            useEffect(function() {
                adaptResult.off(name, listener);
                adaptResult.on(name, listener);
                return function() {
                    adaptResult.off(name, listener);
                }; // eslint-disable-next-line react-hooks/exhaustive-deps
            }, [listener]);
        };
    });
    keys(methods).forEach(function(name) {
        result[name] = methods[name];
    });
    return result;
}

export {
    useReactive
};
//# sourceMappingURL=cfcs.esm.js.map