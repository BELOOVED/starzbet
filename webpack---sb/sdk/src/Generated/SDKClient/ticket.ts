/**
 * ⚠️ GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * 🔨️ GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/SDKTypescriptGenerator.kt
 */
import type { IAddTicketMessageCommand } from "../platform/ticket/write/api/command/AddTicketMessageCommand"
import type { IAssignTicketCommand } from "../platform/ticket/write/api/command/AssignTicketCommand"
import type { ICloseTicketCommand } from "../platform/ticket/write/api/command/CloseTicketCommand"
import type { IGetAllTicketCountersQuery } from "../platform/ticket/read/api/query/GetAllTicketCountersQuery"
import type { IGetAllTicketsQuery } from "../platform/ticket/read/api/query/GetAllTicketsQuery"
import type { IGetTicketByIdQuery } from "../platform/ticket/read/api/query/GetTicketByIdQuery"
import type { IGetTicketMessageByIdQuery } from "../platform/ticket/read/api/query/GetTicketMessageByIdQuery"
import type { IGetTicketMessagesByIdsQuery } from "../platform/ticket/read/api/query/GetTicketMessagesByIdsQuery"
import type { IGetUnreadTicketCounterQuery } from "../platform/ticket/read/api/query/GetUnreadTicketCounterQuery"
import type { IOpenTicketCommand } from "../platform/ticket/write/api/command/OpenTicketCommand"
import type { IPage } from "../graphqlbackend/cursor/Page"
import type { IReOpenTicketCommand } from "../platform/ticket/write/api/command/ReOpenTicketCommand"
import type { IReadTicketCommand } from "../platform/ticket/write/api/command/ReadTicketCommand"
import type { ITicketCounters } from "../platform/ticket/read/api/dto/TicketCounters"
import type { ITicketDto } from "../platform/ticket/read/api/dto/TicketDto"
import type { ITicketMessageDto } from "../platform/ticket/read/api/dto/TicketMessageDto"
import type { IUnAssignTicketCommand } from "../platform/ticket/write/api/command/UnAssignTicketCommand"
import type { IUpdateTicketMessageFilesCommand } from "../platform/ticket/write/api/command/UpdateTicketMessageFilesCommand"
import { IRpcClient } from "@sb/network-bus/RpcClient";
import { IMetadata } from "@sb/network-bus/Model";
import { ISetting } from "@sb/network-bus/Model";
import { emptySettings } from "@sb/network-bus/Model";
import { ticket_location } from "./ProxyLocations";

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d8852-1eb7-7a33-b921-5f85e0f11c5f(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * The message error mappings described in IAssignTicketCommandErrorMapping
 */
export const call_AssignTicketCommand = (client: IRpcClient, payload: IAssignTicketCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAssignTicketCommand, { [key: string]: any }>(payload, `sumstats.platform.ticket.command.assign_ticket`, `${ticket_location}/sumstats.platform.ticket.command.assign_ticket`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * The message error mappings described in IUnAssignTicketCommandErrorMapping
 */
export const call_UnAssignTicketCommand = (client: IRpcClient, payload: IUnAssignTicketCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUnAssignTicketCommand, null>(payload, `sumstats.platform.ticket.command.un_assign_ticket`, `${ticket_location}/sumstats.platform.ticket.command.un_assign_ticket`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c52-d22e-7c0f-91ab-864c0cc551aa(@STATIC/TICKET),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d9c5f-8be0-7189-9212-70806e01dbcf(@STATIC/TICKET),018d889a-0f81-7d85-8555-b1ce9583b593(default),018d889a-0f81-7d85-8555-b1ce9583b593(@STATIC/TICKET)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetTicketMessageByIdQuery = (client: IRpcClient, payload: IGetTicketMessageByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetTicketMessageByIdQuery, ITicketMessageDto>(payload, `sumstats.platform.platformread.ticket.query.get_ticket_message_by_id`, `${ticket_location}/sumstats.platform.platformread.ticket.query.get_ticket_message_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c52-d22e-7c0f-91ab-864c0cc551aa(@STATIC/TICKET),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d9c5f-8be0-7189-9212-70806e01dbcf(@STATIC/TICKET),018d889a-0f81-7d85-8555-b1ce9583b593(default),018d889a-0f81-7d85-8555-b1ce9583b593(@STATIC/TICKET)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetTicketMessagesByIdsQuery = (client: IRpcClient, payload: IGetTicketMessagesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetTicketMessagesByIdsQuery, { [key: string]: ITicketMessageDto }>(payload, `sumstats.platform.platformread.ticket.query.get_ticket_messages_by_ids`, `${ticket_location}/sumstats.platform.platformread.ticket.query.get_ticket_messages_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllTicketCountersQuery = (client: IRpcClient, payload: IGetAllTicketCountersQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllTicketCountersQuery, ITicketCounters>(payload, `sumstats.platform.platformread.ticket.query.get_all_ticket_counters`, `${ticket_location}/sumstats.platform.platformread.ticket.query.get_all_ticket_counters`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetAllTicketsQuery = (client: IRpcClient, payload: IGetAllTicketsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAllTicketsQuery, IPage<ITicketDto>>(payload, `sumstats.platform.platformread.ticket.query.get_all_tickets`, `${ticket_location}/sumstats.platform.platformread.ticket.query.get_all_tickets`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetTicketByIdQuery = (client: IRpcClient, payload: IGetTicketByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetTicketByIdQuery, ITicketDto>(payload, `sumstats.platform.platformread.ticket.query.get_ticket_by_id`, `${ticket_location}/sumstats.platform.platformread.ticket.query.get_ticket_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, AFFILIATE_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetUnreadTicketCounterQuery = (client: IRpcClient, payload: IGetUnreadTicketCounterQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetUnreadTicketCounterQuery, number>(payload, `sumstats.platform.platformread.ticket.query.get_unread_ticket_counter`, `${ticket_location}/sumstats.platform.platformread.ticket.query.get_unread_ticket_counter`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE, AFFILIATE_ROLE
 * The message requires the following acl: '018d8852-1eb7-7755-8f2b-f57c399d0034(default),018d9c64-6dba-7839-a891-6ae1a9cefc67(default),018d8899-da59-72ba-9aa3-7cd2691df33c(default)'.
 * The message error mappings described in IOpenTicketCommandErrorMapping
 */
export const call_OpenTicketCommand = (client: IRpcClient, payload: IOpenTicketCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IOpenTicketCommand, { [key: string]: any }>(payload, `sumstats.platform.ticket.command.open_ticket`, `${ticket_location}/sumstats.platform.ticket.command.open_ticket`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE, AFFILIATE_ROLE
 * The message requires the following acl: '018d8852-1eb7-78fd-bc6a-09eaf447521a(default),018d9c6b-fc9e-7739-85e4-73916b273930(default),018d8899-b9e3-7ac7-9e26-e8e5b2a3bac2(default)'.
 * The message error mappings described in ICloseTicketCommandErrorMapping
 */
export const call_CloseTicketCommand = (client: IRpcClient, payload: ICloseTicketCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICloseTicketCommand, { [key: string]: any }>(payload, `sumstats.platform.ticket.command.close_ticket`, `${ticket_location}/sumstats.platform.ticket.command.close_ticket`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * The message error mappings described in IAddTicketMessageCommandErrorMapping
 */
export const call_AddTicketMessageCommand = (client: IRpcClient, payload: IAddTicketMessageCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAddTicketMessageCommand, { [key: string]: any }>(payload, `sumstats.platform.ticket.command.add_ticket_message`, `${ticket_location}/sumstats.platform.ticket.command.add_ticket_message`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * The message error mappings described in IReOpenTicketCommandErrorMapping
 */
export const call_ReOpenTicketCommand = (client: IRpcClient, payload: IReOpenTicketCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IReOpenTicketCommand, null>(payload, `sumstats.platform.ticket.command.re_open_ticket`, `${ticket_location}/sumstats.platform.ticket.command.re_open_ticket`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * The message error mappings described in IReadTicketCommandErrorMapping
 */
export const call_ReadTicketCommand = (client: IRpcClient, payload: IReadTicketCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IReadTicketCommand, null>(payload, `sumstats.platform.ticket.command.read_ticket`, `${ticket_location}/sumstats.platform.ticket.command.read_ticket`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE, AFFILIATE_ROLE
 * The message requires the following acl: '018d9c52-d22e-7c0f-91ab-864c0cc551aa(default),018d9c5f-8be0-7189-9212-70806e01dbcf(default),018d889a-0f81-7d85-8555-b1ce9583b593(default)'.
 * The message error mappings described in IUpdateTicketMessageFilesCommandErrorMapping
 */
export const call_UpdateTicketMessageFilesCommand = (client: IRpcClient, payload: IUpdateTicketMessageFilesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateTicketMessageFilesCommand, { [key: string]: any }>(payload, `sumstats.platform.ticket.command.update_ticket_message_files`, `${ticket_location}/sumstats.platform.ticket.command.update_ticket_message_files`, metadata, settings);
