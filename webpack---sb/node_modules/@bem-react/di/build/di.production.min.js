'use strict';

function e(e) {
    return {
        $symbol: f,
        overload: e
    }
}

function t(e) {
    return e.$symbol === f
}
Object.defineProperty(exports, '__esModule', {
    value: !0
});
var r = require('react'),
    n = function() {
        return (n = Object.assign || function(e) {
            for (var t, r = 1, n = arguments.length; r < n; r++)
                for (var i in t = arguments[r])({}).hasOwnProperty.call(t, i) && (e[i] = t[i]);
            return e
        }).apply(this, arguments)
    },
    i = r.createContext({}),
    o = i.Consumer,
    s = i.Provider,
    u = function(e) {
        return r.createElement(o, null, function(t) {
            return e.children(t[e.id].snapshot())
        })
    },
    a = u,
    l = function() {
        return r.useContext(i)
    },
    c = function(e) {
        return l()[e].snapshot()
    },
    p = c,
    f = 'RegistryOverloadHMark',
    h = function() {
        function r(e) {
            var t = e.id,
                r = e.overridable,
                n = void 0 === r || r;
            this.entities = {}, this.id = t, this.overridable = n
        }
        return r.prototype.set = function(e, t) {
            return this.entities[e] = t, this
        }, r.prototype.extends = function(t, r) {
            return this.entities[t] = e(r), this
        }, r.prototype.fill = function(e) {
            for (var t in e) this.entities[t] = e[t];
            return this
        }, r.prototype.get = function(e) {
            return this.entities[e]
        }, r.prototype.snapshot = function() {
            return this.entities
        }, r.prototype.merge = function(e) {
            var t = new r({
                id: this.id,
                overridable: this.overridable
            });
            if (t.fill(this.entities), !e) return t;
            var n = e.snapshot();
            for (var i in n) n.hasOwnProperty(i) && (t.entities[i] = this.mergeEntities(t.entities[i], n[i]));
            return t
        }, r.prototype.mergeEntities = function(r, n) {
            return t(n) && r ? t(r) ? e(function(e) {
                return n.overload(r.overload(e))
            }) : n.overload(r) : n
        }, r
    }();
exports.ComponentRegistryConsumer = a, exports.Registry = h, exports.RegistryConsumer = u, exports.registryContext = i, exports.useComponentRegistry = p, exports.useRegistries = l, exports.useRegistry = c, exports.withRegistry = function() {
    var e = [].slice.call(arguments);
    return function(t) {
        return function(i) {
            var u = r.useRef(null);
            return r.createElement(o, null, function(o) {
                if (null === u.current) {
                    for (var a = n({}, o), l = 0; l < e.length; l++) {
                        var c = e[l],
                            p = a[c.id];
                        a[c.id] = c.overridable ? p ? c.merge(p) : c : c && p ? p.merge(c) : c
                    }
                    u.current = a
                }
                return r.createElement(s, {
                    value: u.current
                }, r.createElement(t, i))
            })
        }
    }
};