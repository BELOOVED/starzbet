/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.oddsboost.graphql.BetBoostWhereExtension
 */
export enum ESportsbookread_BetBoostWhereFieldPaths {
  betOddsBoostBetId = "bet_odds_boost__betId",
  betOddsBoostId = "bet_odds_boost__id",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.bet.graphql.BetRequestWhereExtension
 */
export enum ESportsbookread_BetRequestWhereFieldPaths {
  betRequestBankerCount = "betRequest__bankerCount",
  betRequestBetCreated = "betRequest__betCreated",
  betRequestBetId = "betRequest__betId",
  betRequestBetRequestTime = "betRequest__betRequestTime",
  betRequestBetType = "betRequest__betType",
  betRequestBonusBet = "betRequest__bonusBet",
  betRequestCategoryId = "betRequest__categoryId",
  betRequestCreatedAt = "betRequest__createdAt",
  betRequestDevice = "betRequest__device",
  betRequestErrorCode = "betRequest__errorCode",
  betRequestEventId = "betRequest__eventId",
  betRequestEventName = "betRequest__eventName",
  betRequestEventOutcomeHashPath = "betRequest__eventOutcomeHashPath",
  betRequestEventStartTime = "betRequest__eventStartTime",
  betRequestFreeBet = "betRequest__freeBet",
  betRequestId = "betRequest__id",
  betRequestLive = "betRequest__live",
  betRequestMarketType = "betRequest__marketType",
  betRequestOdds = "betRequest__odds",
  betRequestOutrightId = "betRequest__outrightId",
  betRequestOutrightName = "betRequest__outrightName",
  betRequestOutrightStartTime = "betRequest__outrightStartTime",
  betRequestPayoutAmount = "betRequest__payoutAmount",
  betRequestPickCount = "betRequest__pickCount",
  betRequestPickId = "betRequest__pickId",
  betRequestPlayerBanned = "betRequest__playerBanned",
  betRequestPlayerGroupId = "betRequest__playerGroupId",
  betRequestPlayerHostAddress = "betRequest__playerHostAddress",
  betRequestPlayerId = "betRequest__playerId",
  betRequestPlayerName = "betRequest__playerName",
  betRequestRealMoney = "betRequest__realMoney",
  betRequestRemovedAt = "betRequest__removedAt",
  betRequestRequestType = "betRequest__requestType",
  betRequestSelectionCount = "betRequest__selectionCount",
  betRequestSportId = "betRequest__sportId",
  betRequestStakeAmount = "betRequest__stakeAmount",
  betRequestSucceeded = "betRequest__succeeded",
  betRequestTournamentId = "betRequest__tournamentId",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.bet.graphql.BetStateWhereExtension
 */
export enum ESportsbookread_BetStateWhereFieldPaths {
  betStateBetId = "betState__betId",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.bet.graphql.BetWhereExtension
 */
export enum ESportsbookread_BetWhereFieldPaths {
  betBetHashType = "bet__betHashType",
  betBetRequestTime = "bet__betRequestTime",
  betBetStopTimeInfo = "bet__betStopTimeInfo",
  betBonusBet = "bet__bonusBet",
  betBoostId = "bet__boostId",
  betCategoryId = "bet__categoryId",
  betCreatedAt = "bet__createdAt",
  betDevice = "bet__device",
  betEventId = "bet__eventId",
  betEventName = "bet__eventName",
  betEventStartTime = "bet__eventStartTime",
  betFreeBet = "bet__freeBet",
  betGeneralState = "bet__generalState",
  betHasOutright = "bet__hasOutright",
  betId = "bet__id",
  betLive = "bet__live",
  betMarketHashPath = "bet__marketHashPath",
  betMarketType = "bet__marketType",
  betOdds = "bet__odds",
  betOutcomeHashPath = "bet__outcomeHashPath",
  betOutrightId = "bet__outrightId",
  betOutrightName = "bet__outrightName",
  betOutrightStartTime = "bet__outrightStartTime",
  betPayoutAmount = "bet__payoutAmount",
  betPickId = "bet__pickId",
  betPicksCount = "bet__picksCount",
  betPlayerBanned = "bet__playerBanned",
  betPlayerGroupId = "bet__playerGroupId",
  betPlayerHostAddress = "bet__playerHostAddress",
  betPlayerId = "bet__playerId",
  betPlayerName = "bet__playerName",
  betRealMoney = "bet__realMoney",
  betScopeType = "bet__scopeType",
  betScoreType = "bet__scoreType",
  betSettledAt = "bet__settledAt",
  betSettlementResult = "bet__settlementResult",
  betShouldBeSettled = "bet__shouldBeSettled",
  betSportId = "bet__sportId",
  betStakeAmount = "bet__stakeAmount",
  betSuspiciousHighOdd = "bet__suspiciousHighOdd",
  betTournamentId = "bet__tournamentId",
  betTransactionType = "bet__transactionType",
  betTransactionTypeExcludeRollback = "bet__transactionTypeExcludeRollback",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.bet.graphql.CashOutSnapWhereExtension
 */
export enum ESportsbookread_CashOutSnapWhereFieldPaths {
  cashOutSnapBetId = "cashOutSnap__betId",
  cashOutSnapCashOutedAt = "cashOutSnap__cashOutedAt",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.line.graphql.CategoryWhereExtension
 */
export enum ESportsbookread_CategoryWhereFieldPaths {
  categoryEventStartTime = "category__eventStartTime",
  categoryId = "category__id",
  categoryName = "category__name",
  categorySportId = "category__sportId",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.line.graphql.EventWhereExtension
 */
export enum ESportsbookread_EventWhereFieldPaths {
  bettingStatus = "betting__status",
  eventCategoryId = "event__categoryId",
  eventId = "event__id",
  eventName = "event__name",
  eventSportId = "event__sportId",
  eventStartTime = "event__startTime",
  eventStatus = "event__status",
  eventTournamentId = "event__tournamentId",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.oddsboost.graphql.OddsBoostWhereExtension
 */
export enum ESportsbookread_OddsBoostWhereFieldPaths {
  oddsBoostEnabled = "odds_boost__enabled",
  oddsBoostId = "odds_boost__id",
  oddsBoostIsOddsBoostWithOutcomes = "odds_boost__is_odds_boost_with_outcomes",
  oddsBoostName = "odds_boost__name",
  oddsBoostPlayerGroup = "odds_boost__player_group",
  oddsBoostPlayerGroupEmpty = "odds_boost__player_group_empty",
  oddsBoostRemovedAt = "odds_boost__removed_at",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.line.graphql.OutrightWhereExtension
 */
export enum ESportsbookread_OutrightWhereFieldPaths {
  outrightBettingStatus = "outright__bettingStatus",
  outrightBettingStopTime = "outright__bettingStopTime",
  outrightCategoryId = "outright__categoryId",
  outrightDisabled = "outright__disabled",
  outrightFinished = "outright__finished",
  outrightId = "outright__id",
  outrightManuallyCreated = "outright__manuallyCreated",
  outrightName = "outright__name",
  outrightSportId = "outright__sportId",
  outrightStartTime = "outright__startTime",
  outrightTournamentId = "outright__tournamentId",
  outrightType = "outright__type",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.player.graphql.PlayerGroupWhereExtension
 */
export enum ESportsbookread_PlayerGroupWhereFieldPaths {
  playerGroupDeletedAt = "playerGroup__deletedAt",
  playerGroupName = "playerGroup__name",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.player.graphql.PlayerWhereExtension
 */
export enum ESportsbookread_PlayerWhereFieldPaths {
  playerBetBetLive = "player__bet__betLive",
  playerBetBetSettled = "player__bet__betSettled",
  playerBetBetsCount = "player__bet__betsCount",
  playerBetCreatedAt = "player__bet__createdAt",
  playerBetDevice = "player__bet__device",
  playerBetMarketType = "player__bet__marketType",
  playerBetOdds = "player__bet__odds",
  playerBetPickEventCategoryId = "player__bet__pick__event__categoryId",
  playerBetPickEventEventId = "player__bet__pick__event__eventId",
  playerBetPickEventEventName = "player__bet__pick__event__eventName",
  playerBetPickEventSportId = "player__bet__pick__event__sportId",
  playerBetPickEventTournamentId = "player__bet__pick__event__tournamentId",
  playerBetProfitsAmount = "player__bet__profitsAmount",
  playerBetStakesAmount = "player__bet__stakesAmount",
  playerBetStatus = "player__bet__status",
  playerBetType = "player__bet__type",
  playerGroupId = "player__groupId",
  playerId = "player__id",
  playerName = "player__name",
  playerProfileRegistrationDate = "player__profile__registrationDate",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.bet.graphql.SettlementHistoryWhereExtension
 */
export enum ESportsbookread_SettlementHistoryWhereFieldPaths {
  settlementHistoryBetId = "settlementHistory__betId",
  settlementHistoryUpdatedAt = "settlementHistory__updatedAt",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.line.graphql.SportWhereExtension
 */
export enum ESportsbookread_SportWhereFieldPaths {
  sportCode = "sport__code",
  sportEventStartTime = "sport__eventStartTime",
  sportId = "sport__id",
  sportName = "sport__name",
}

/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/TSWhereExtensionGenerator.kt
 * üî®Ô∏è SOURCE CODE: com.sumstats.sportsbook.sportsbookread.service.domain.line.graphql.TournamentWhereExtension
 */
export enum ESportsbookread_TournamentWhereFieldPaths {
  tournamentCategoryId = "tournament__categoryId",
  tournamentEventStartTime = "tournament__eventStartTime",
  tournamentId = "tournament__id",
  tournamentName = "tournament__name",
  tournamentSportId = "tournament__sportId",
}
