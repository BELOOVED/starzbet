/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/SDKTypescriptGenerator.kt
 */
import type { EGamePage } from "@sb/betting-core/EGamePage"
import type { EPluginCode } from "@sb/betting-core/EPluginCode"
import type { EProductCode } from "@sb/betting-core/EProductCode"
import type { EProviderCode } from "@sb/betting-core/EProviderCode"
import type { IAddGamesOnLabelCommand } from "../platform/gamemanager/api/command/game/AddGamesOnLabelCommand"
import type { IAddLabelsToPageCommand } from "../platform/gamemanager/api/command/page/AddLabelsToPageCommand"
import type { IAddToShuffledGamesCommand } from "../platform/gamemanager/api/command/game/AddToShuffledGamesCommand"
import type { IApplyViewRulesCommand } from "../platform/gamemanager/api/command/viewrule/ApplyViewRulesCommand"
import type { IAttachTagToGamesCommand } from "../platform/gamemanager/api/command/game/AttachTagToGamesCommand"
import type { ICreateGameTagCommand } from "../platform/gamemanager/api/command/tag/CreateGameTagCommand"
import type { ICreateGameTagGroupCommand } from "../platform/gamemanager/api/command/taggroup/CreateGameTagGroupCommand"
import type { ICreateGamesCommand } from "../platform/gamemanager/api/command/game/CreateGamesCommand"
import type { ICreateLabelCommand } from "../platform/gamemanager/api/command/label/CreateLabelCommand"
import type { ICreateViewRuleCommand } from "../platform/gamemanager/api/command/viewrule/CreateViewRuleCommand"
import type { IDeleteGameTagCommand } from "../platform/gamemanager/api/command/tag/DeleteGameTagCommand"
import type { IDeleteGameTagGroupCommand } from "../platform/gamemanager/api/command/taggroup/DeleteGameTagGroupCommand"
import type { IDeleteGamesCommand } from "../platform/gamemanager/api/command/game/DeleteGamesCommand"
import type { IDeleteGamesFromLabelCommand } from "../platform/gamemanager/api/command/game/DeleteGamesFromLabelCommand"
import type { IDeleteLabelsCommand } from "../platform/gamemanager/api/command/label/DeleteLabelsCommand"
import type { IDeleteViewRulesCommand } from "../platform/gamemanager/api/command/viewrule/DeleteViewRulesCommand"
import type { IEditGameActiveStatusCommand } from "../platform/gamemanager/api/command/game/EditGameActiveStatusCommand"
import type { IEditGameCommand } from "../platform/gamemanager/api/command/game/EditGameCommand"
import type { IEditGameSizeCommand } from "../platform/gamemanager/api/command/game/EditGameSizeCommand"
import type { IEditViewRuleCommand } from "../platform/gamemanager/api/command/viewrule/EditViewRuleCommand"
import type { IFindActiveGameProvidersByPagesQuery } from "../platform/gamemanager/api/query/page/FindActiveGameProvidersByPagesQuery"
import type { IFindActiveGamesByIdsQuery } from "../platform/gamemanager/api/query/game/FindActiveGamesByIdsQuery"
import type { IFindActiveGamesCountForPageAndProviderQuery } from "../platform/gamemanager/api/query/page/FindActiveGamesCountForPageAndProviderQuery"
import type { IFindActiveGamesCountForPageAndProviderResponse } from "../platform/gamemanager/api/query/page/FindActiveGamesCountForPageAndProviderResponse"
import type { IFindAllGameIdsByGameTypeIdsQuery } from "../platform/gamemanager/api/query/tag/FindAllGameIdsByGameTypeIdsQuery"
import type { IFindAllGameMetricQuery } from "../platform/gamemanager/api/query/metric/FindAllGameMetricQuery"
import type { IFindAllGameTagGroupsQuery } from "../platform/gamemanager/api/query/tag/FindAllGameTagGroupsQuery"
import type { IFindAllGameTagsQuery } from "../platform/gamemanager/api/query/tag/FindAllGameTagsQuery"
import type { IFindAllGamesQuery } from "../platform/gamemanager/api/query/game/FindAllGamesQuery"
import type { IFindAllLabelsQuery } from "../platform/gamemanager/api/query/label/FindAllLabelsQuery"
import type { IFindAllPagesWithActiveLabelsQuery } from "../platform/gamemanager/api/query/page/FindAllPagesWithActiveLabelsQuery"
import type { IFindAllPagesWithLabelsQuery } from "../platform/gamemanager/api/query/page/FindAllPagesWithLabelsQuery"
import type { IFindAllViewRulesQuery } from "../platform/gamemanager/api/query/viewrule/FindAllViewRulesQuery"
import type { IFindGameProvidersByPagesQuery } from "../platform/gamemanager/api/query/page/FindGameProvidersByPagesQuery"
import type { IFindGamesByViewRuleIdsQuery } from "../platform/gamemanager/api/query/game/FindGamesByViewRuleIdsQuery"
import type { IFindGamesCountByViewRuleIdsQuery } from "../platform/gamemanager/api/query/game/FindGamesCountByViewRuleIdsQuery"
import type { IFindRandomGameQuery } from "../platform/gamemanager/api/query/game/FindRandomGameQuery"
import type { IFindRecentlyPlayedGamesQuery } from "../platform/gamemanager/api/query/game/FindRecentlyPlayedGamesQuery"
import type { IGameBaseInfo } from "../platform/gamemanager/api/dto/game/GameBaseInfo"
import type { IGameData } from "../gamedata/GameData"
import type { IGameDto } from "../platform/gamemanager/api/dto/game/GameDto"
import type { IGameLabel } from "../platform/gamemanager/api/dto/label/GameLabel"
import type { IGameLabelWithPagesAndGamesCount } from "../platform/gamemanager/api/dto/label/GameLabelWithPagesAndGamesCount"
import type { IGameLink } from "../platform/gamemanager/api/dto/gamelink/GameLink"
import type { IGameMetricDto } from "../platform/gamemanager/api/dto/metric/GameMetricDto"
import type { IGamePageDto } from "../platform/gamemanager/api/dto/gamepage/GamePageDto"
import type { IGameProviderWithPriority } from "../platform/gamemanager/api/dto/gameprovider/GameProviderWithPriority"
import type { IGameUpdateDiffs } from "../integration/gameloading/dto/GameUpdateDiffs"
import type { IGetBaseInfoOfPopularGamesQuery } from "../platform/gamemanager/api/query/game/GetBaseInfoOfPopularGamesQuery"
import type { IGetDemoGameLinkCommand } from "../platform/gamemanager/api/command/game/GetDemoGameLinkCommand"
import type { IGetGameBaseInfoByExternalIdQuery } from "../platform/gamemanager/api/query/game/GetGameBaseInfoByExternalIdQuery"
import type { IGetGameBaseInfoByInternalIdQuery } from "../platform/gamemanager/api/query/game/GetGameBaseInfoByInternalIdQuery"
import type { IGetGameByInternalIdQuery } from "../platform/gamemanager/api/query/game/GetGameByInternalIdQuery"
import type { IGetGameCountQuery } from "../platform/gamemanager/api/query/game/GetGameCountQuery"
import type { IGetGameDataByInternalIdsQuery } from "../platform/gamemanager/api/query/game/GetGameDataByInternalIdsQuery"
import type { IGetGameLinkByOperatorCommand } from "../platform/gamemanager/api/command/game/GetGameLinkByOperatorCommand"
import type { IGetGameLinkCommand } from "../platform/gamemanager/api/command/game/GetGameLinkCommand"
import type { IGetGameTagGroupByIdQuery } from "../platform/gamemanager/api/query/tag/GetGameTagGroupByIdQuery"
import type { IGetGameTagsByGameIdsQuery } from "../platform/gamemanager/api/query/tag/GetGameTagsByGameIdsQuery"
import type { IGetGameTagsByIdsQuery } from "../platform/gamemanager/api/query/tag/GetGameTagsByIdsQuery"
import type { IGetGamesByInternalIdsQuery } from "../platform/gamemanager/api/query/game/GetGamesByInternalIdsQuery"
import type { IGetGamesCountBelongToPagesQuery } from "../platform/gamemanager/api/query/game/GetGamesCountBelongToPagesQuery"
import type { IGetGamesCountByPagesQuery } from "../platform/gamemanager/api/query/page/GetGamesCountByPagesQuery"
import type { IGetGamesCountByPagesResponse } from "../platform/gamemanager/api/query/page/GetGamesCountByPagesResponse"
import type { IGetGamesExternalIdsByInternalIds } from "../platform/gamemanager/api/query/game/GetGamesExternalIdsByInternalIds"
import type { IGetGamesNamesByInternalIdsQuery } from "../platform/gamemanager/api/query/game/GetGamesNamesByInternalIdsQuery"
import type { IGetLabelsByIdsQuery } from "../platform/gamemanager/api/query/label/GetLabelsByIdsQuery"
import type { IGetLabelsGamesCountResponse } from "../platform/gamemanager/api/dto/label/GetLabelsGamesCountResponse"
import type { IGetPagesByLabelsIdsQuery } from "../platform/gamemanager/api/query/page/GetPagesByLabelsIdsQuery"
import type { IGetPreDefinedLabelsActiveGamesCountQuery } from "../platform/gamemanager/api/query/label/GetPreDefinedLabelsActiveGamesCountQuery"
import type { IGetPreDefinedLabelsAllGamesCountQuery } from "../platform/gamemanager/api/query/label/GetPreDefinedLabelsAllGamesCountQuery"
import type { IGetPreDefinedLabelsNotActiveGamesCountQuery } from "../platform/gamemanager/api/query/label/GetPreDefinedLabelsNotActiveGamesCountQuery"
import type { IGetReplayLinkCommand } from "../platform/gamemanager/api/command/game/GetReplayLinkCommand"
import type { IGetViewRulesByIdsQuery } from "../platform/gamemanager/api/query/viewrule/GetViewRulesByIdsQuery"
import type { ILoadGamesCommand } from "../platform/gamemanager/api/command/game/LoadGamesCommand"
import type { IPage } from "../graphqlbackend/cursor/Page"
import type { IProviderWithPriority } from "../platform/gamemanager/api/dto/gameprovider/ProviderWithPriority"
import type { IRemoveFromShuffledGamesCommand } from "../platform/gamemanager/api/command/game/RemoveFromShuffledGamesCommand"
import type { IRemoveLabelFromPageCommand } from "../platform/gamemanager/api/command/page/RemoveLabelFromPageCommand"
import type { IRemoveTagFromGamesCommand } from "../platform/gamemanager/api/command/game/RemoveTagFromGamesCommand"
import type { IReplayLink } from "../platform/gamemanager/api/dto/replaylink/ReplayLink"
import type { IResetGameProviderOrderCommand } from "../platform/gamemanager/api/command/game/ResetGameProviderOrderCommand"
import type { IResetGamesOrderCommand } from "../platform/gamemanager/api/command/game/ResetGamesOrderCommand"
import type { IResetProviderPositionSettingCommand } from "../platform/gamemanager/api/command/game/ResetProviderPositionSettingCommand"
import type { IResolveGameInternalIdQuery } from "../platform/gamemanager/api/query/game/ResolveGameInternalIdQuery"
import type { IRestoreGamesCommand } from "../platform/gamemanager/api/command/game/RestoreGamesCommand"
import type { IRestoreLabelsCommand } from "../platform/gamemanager/api/command/label/RestoreLabelsCommand"
import type { ISyncGamesCommand } from "../platform/gamemanager/api/command/game/SyncGamesCommand"
import type { ITagDto } from "../tag/model/dto/TagDto"
import type { ITagGroupDto } from "../tag/model/dto/TagGroupDto"
import type { IUpdateGameOrderCommand } from "../platform/gamemanager/api/command/game/UpdateGameOrderCommand"
import type { IUpdateGameProviderOrderCommand } from "../platform/gamemanager/api/command/gameprovider/UpdateGameProviderOrderCommand"
import type { IUpdateGameTagCommand } from "../platform/gamemanager/api/command/tag/UpdateGameTagCommand"
import type { IUpdateGameTagGroupCommand } from "../platform/gamemanager/api/command/taggroup/UpdateGameTagGroupCommand"
import type { IUpdateLabelCommand } from "../platform/gamemanager/api/command/label/UpdateLabelCommand"
import type { IUpdateLabelOrderCommand } from "../platform/gamemanager/api/command/label/UpdateLabelOrderCommand"
import type { IUpdateLabelStatusCommand } from "../platform/gamemanager/api/command/label/UpdateLabelStatusCommand"
import type { IUpdateProviderGameOrderCommand } from "../platform/gamemanager/api/command/game/UpdateProviderGameOrderCommand"
import type { IViewRuleDto } from "../platform/gamemanager/api/dto/viewrule/ViewRuleDto"
import type { TTranslateMap } from "@sb/betting-core/TTranslateMap"
import { IRpcClient } from "@sb/network-bus/RpcClient";
import { IMetadata } from "@sb/network-bus/Model";
import { ISetting } from "@sb/network-bus/Model";
import { emptySettings } from "@sb/network-bus/Model";
import { gamemanager_location } from "./ProxyLocations";

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message requires the following acl: '018d883a-398a-756c-8276-d5b9fac89278(default)'.
 * The message error mappings described in IGetDemoGameLinkCommandErrorMapping
 */
export const call_GetDemoGameLinkCommand = (client: IRpcClient, payload: IGetDemoGameLinkCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetDemoGameLinkCommand, IGameLink>(payload, `sumstats.platform.gamemanager.command.get_demo_game_link`, `${gamemanager_location}/sumstats.platform.gamemanager.command.get_demo_game_link`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(@STATIC/GAME),018d8838-d1f8-7664-9c0c-9433aff9954f(@STATIC/GAME),018d8839-1279-78ab-898f-3b979abe7c94(@STATIC/GAME),018d8839-5edb-7a60-91e9-87d1169cbaea(@STATIC/GAME),018d8839-994e-77bb-aa81-fc6e658d9cd4(@STATIC/GAME),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(@STATIC/GAME),018d9c76-e87f-731f-85c0-d24c4c11e309(@STATIC/GAME),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(@STATIC/GAME)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetLabelsByIdsQuery = (client: IRpcClient, payload: IGetLabelsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetLabelsByIdsQuery, { [key: string]: IGameLabel }>(payload, `sumstats.platform.gamemanager.query.get_labels_by_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_labels_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d9c4c-2be8-7617-b8be-938e79ac4943(@STATIC/PAYMENT),018d9c4c-68c5-711f-8bc9-8b9148aff0b7(@STATIC/PAYMENT),018d8847-f0d8-795a-84a3-604687960e1f(@STATIC/PAYMENT),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS),018d8827-e2de-7b72-9576-4101b39ef00d(@STATIC/PAYMENT),018d8828-08df-7d89-9ddf-cb0b63b7b094(@STATIC/PAYMENT)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetGamesByInternalIdsQuery = (client: IRpcClient, payload: IGetGamesByInternalIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGamesByInternalIdsQuery, { [key: string]: IGameDto }>(payload, `sumstats.platform.gamemanager.query.get_games_by_internal_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_games_by_internal_ids`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d8838-d1f8-7664-9c0c-9433aff9954f(default),018d8839-1279-78ab-898f-3b979abe7c94(default),018d8839-5edb-7a60-91e9-87d1169cbaea(default),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(default),018d9c76-e87f-731f-85c0-d24c4c11e309(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllPagesWithActiveLabelsQuery = (client: IRpcClient, payload: IFindAllPagesWithActiveLabelsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllPagesWithActiveLabelsQuery, IGamePageDto[]>(payload, `sumstats.platform.gamemanager.query.find_all_pages_with_active_labels`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_pages_with_active_labels`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, PLATFORM_PLAYER, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGamesCountByPagesQuery = (client: IRpcClient, payload: IGetGamesCountByPagesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGamesCountByPagesQuery, IGetGamesCountByPagesResponse[]>(payload, `sumstats.platform.gamemanager.query.get_games_count_by_pages`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_games_count_by_pages`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, PLATFORM_PLAYER, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPagesByLabelsIdsQuery = (client: IRpcClient, payload: IGetPagesByLabelsIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPagesByLabelsIdsQuery, { [key: string]: EGamePage[] }>(payload, `sumstats.platform.gamemanager.query.get_pages_by_labels_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_pages_by_labels_ids`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, PLATFORM_PLAYER, OPERATOR_ROLE, SERVICE, AFFILIATE_ROLE
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(default),018d8e83-e81d-758d-9ebf-b40dbaf5259c(default),018d9c4d-be07-7b1a-840d-1b7d016dd510(default),018d8819-0db7-72b3-b593-bb2ded6392b1(default),018d8838-d1f8-7664-9c0c-9433aff9954f(default),018d8839-1279-78ab-898f-3b979abe7c94(default),018d8839-5edb-7a60-91e9-87d1169cbaea(default),018d8839-994e-77bb-aa81-fc6e658d9cd4(default),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(default),018d8856-577f-7661-9b23-b74351f155ed(default),018d9c76-e87f-731f-85c0-d24c4c11e309(default),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(default),018d889a-7c59-7b49-89ca-a4c4269a2d6d(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllGamesQuery = (client: IRpcClient, payload: IFindAllGamesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllGamesQuery, IPage<IGameDto>>(payload, `sumstats.platform.gamemanager.query.find_all_games`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_games`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message error mappings described in IApplyViewRuleForLabelsGamesCommandErrorMapping
 */
export const call_ApplyViewRulesCommand = (client: IRpcClient, payload: IApplyViewRulesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IApplyViewRulesCommand, null>(payload, `sumstats.platform.gamemanager.command.apply_view_rules`, `${gamemanager_location}/sumstats.platform.gamemanager.command.apply_view_rules`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8839-1279-78ab-898f-3b979abe7c94(@STATIC/GAME),018d8839-5edb-7a60-91e9-87d1169cbaea(@STATIC/GAME),018d8839-994e-77bb-aa81-fc6e658d9cd4(@STATIC/GAME),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(@STATIC/GAME),018d9c76-e87f-731f-85c0-d24c4c11e309(@STATIC/GAME)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindGamesByViewRuleIdsQuery = (client: IRpcClient, payload: IFindGamesByViewRuleIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindGamesByViewRuleIdsQuery, { [key: string]: IGameDto[] }>(payload, `sumstats.platform.gamemanager.query.find_games_by_view_rule_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_games_by_view_rule_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8839-1279-78ab-898f-3b979abe7c94(default),018d8839-5edb-7a60-91e9-87d1169cbaea(default),018d8839-994e-77bb-aa81-fc6e658d9cd4(default),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(default),018d9c76-e87f-731f-85c0-d24c4c11e309(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllViewRulesQuery = (client: IRpcClient, payload: IFindAllViewRulesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllViewRulesQuery, IPage<IViewRuleDto>>(payload, `sumstats.platform.gamemanager.query.find_all_view_rules`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_view_rules`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7110-8614-372090e0d97e(default)'.
 * The message error mappings described in IEditViewRuleCommandErrorMapping
 */
export const call_EditViewRuleCommand = (client: IRpcClient, payload: IEditViewRuleCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IEditViewRuleCommand, null>(payload, `sumstats.platform.gamemanager.command.edit_view_rule`, `${gamemanager_location}/sumstats.platform.gamemanager.command.edit_view_rule`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-71ef-a81c-1963d2680b4b(default)'.
 * The message error mappings described in IAddGamesOnLabelCommandErrorMapping
 */
export const call_AddGamesOnLabelCommand = (client: IRpcClient, payload: IAddGamesOnLabelCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAddGamesOnLabelCommand, null>(payload, `sumstats.platform.gamemanager.command.add_games_on_label`, `${gamemanager_location}/sumstats.platform.gamemanager.command.add_games_on_label`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-724d-b784-514a4b1f2108(default)'.
 * The message error mappings described in IDeleteGamesCommandErrorMapping
 */
export const call_DeleteGamesCommand = (client: IRpcClient, payload: IDeleteGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteGamesCommand, null>(payload, `sumstats.platform.gamemanager.command.delete_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.delete_games`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-72aa-9f6d-0b8f11a020e0(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateProviderGameOrderCommand = (client: IRpcClient, payload: IUpdateProviderGameOrderCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateProviderGameOrderCommand, null>(payload, `sumstats.platform.gamemanager.command.update_provider_game_order`, `${gamemanager_location}/sumstats.platform.gamemanager.command.update_provider_game_order`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-72bf-b209-5878d1e78a6d(default)'.
 * The message error mappings described in IEditGameSizeCommandErrorMapping
 */
export const call_EditGameSizeCommand = (client: IRpcClient, payload: IEditGameSizeCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IEditGameSizeCommand, null>(payload, `sumstats.platform.gamemanager.command.edit_game_size`, `${gamemanager_location}/sumstats.platform.gamemanager.command.edit_game_size`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-733c-a8c6-1a66ad5e2b99(default)'.
 * The message error mappings described in IUpdateLabelCommandErrorMapping
 */
export const call_UpdateLabelCommand = (client: IRpcClient, payload: IUpdateLabelCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateLabelCommand, null>(payload, `sumstats.platform.gamemanager.command.update_label`, `${gamemanager_location}/sumstats.platform.gamemanager.command.update_label`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-74c9-882e-447e9d1b929e(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateGameOrderCommand = (client: IRpcClient, payload: IUpdateGameOrderCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateGameOrderCommand, null>(payload, `sumstats.platform.gamemanager.command.update_game_order`, `${gamemanager_location}/sumstats.platform.gamemanager.command.update_game_order`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-74d3-9958-94f88380577b(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_RemoveFromShuffledGamesCommand = (client: IRpcClient, payload: IRemoveFromShuffledGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRemoveFromShuffledGamesCommand, null>(payload, `sumstats.platform.gamemanager.command.remove_from_shuffled_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.remove_from_shuffled_games`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7609-8c54-077a5c592e3f(default)'.
 * The message error mappings described in IDeleteViewRulesCommandErrorMapping
 */
export const call_DeleteViewRulesCommand = (client: IRpcClient, payload: IDeleteViewRulesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteViewRulesCommand, null>(payload, `sumstats.platform.gamemanager.command.delete_view_rules`, `${gamemanager_location}/sumstats.platform.gamemanager.command.delete_view_rules`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7651-8fd7-fc71b6414e8e(default)'.
 * The message error mappings described in IAddLabelsToPageCommandErrorMapping
 */
export const call_AddLabelsToPageCommand = (client: IRpcClient, payload: IAddLabelsToPageCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAddLabelsToPageCommand, null>(payload, `sumstats.platform.gamemanager.command.add_labels_to_page`, `${gamemanager_location}/sumstats.platform.gamemanager.command.add_labels_to_page`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-776c-9257-4fb200bb6819(default)'.
 * The message error mappings described in IRestoreGamesCommandErrorMapping
 */
export const call_RestoreGamesCommand = (client: IRpcClient, payload: IRestoreGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRestoreGamesCommand, null>(payload, `sumstats.platform.gamemanager.command.restore_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.restore_games`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-77e2-b8ce-11bc4566e083(default)'.
 * The message error mappings described in IDeleteLabelsCommandErrorMapping
 */
export const call_DeleteLabelsCommand = (client: IRpcClient, payload: IDeleteLabelsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteLabelsCommand, null>(payload, `sumstats.platform.gamemanager.command.delete_labels`, `${gamemanager_location}/sumstats.platform.gamemanager.command.delete_labels`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7829-bb80-216121f9a940(default)'.
 * The message error mappings described in IUpdateLabelStatusCommandErrorMapping
 */
export const call_UpdateLabelStatusCommand = (client: IRpcClient, payload: IUpdateLabelStatusCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateLabelStatusCommand, null>(payload, `sumstats.platform.gamemanager.command.update_label_status`, `${gamemanager_location}/sumstats.platform.gamemanager.command.update_label_status`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7847-8b0d-a2c882ca4a5e(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_AddToShuffledGamesCommand = (client: IRpcClient, payload: IAddToShuffledGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAddToShuffledGamesCommand, null>(payload, `sumstats.platform.gamemanager.command.add_to_shuffled_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.add_to_shuffled_games`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7850-b8b1-44a5ed1e26d7(default)'.
 * The message error mappings described in IRestoreLabelsCommandErrorMapping
 */
export const call_RestoreLabelsCommand = (client: IRpcClient, payload: IRestoreLabelsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRestoreLabelsCommand, null>(payload, `sumstats.platform.gamemanager.command.restore_labels`, `${gamemanager_location}/sumstats.platform.gamemanager.command.restore_labels`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7967-ac3f-1bfc46405bd2(default)'.
 * The message error mappings described in IEditGameActiveStatusCommandErrorMapping
 */
export const call_EditGameActiveStatusCommand = (client: IRpcClient, payload: IEditGameActiveStatusCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IEditGameActiveStatusCommand, null>(payload, `sumstats.platform.gamemanager.command.edit_game_active_status`, `${gamemanager_location}/sumstats.platform.gamemanager.command.edit_game_active_status`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7cf1-aa27-5725a37e8abb(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateLabelOrderCommand = (client: IRpcClient, payload: IUpdateLabelOrderCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateLabelOrderCommand, null>(payload, `sumstats.platform.gamemanager.command.update_label_order`, `${gamemanager_location}/sumstats.platform.gamemanager.command.update_label_order`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7edf-8260-794e97cc211b(default)'.
 * The message error mappings described in IRemoveLabelFromPageCommandErrorMapping
 */
export const call_RemoveLabelFromPageCommand = (client: IRpcClient, payload: IRemoveLabelFromPageCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRemoveLabelFromPageCommand, null>(payload, `sumstats.platform.gamemanager.command.remove_label_from_page`, `${gamemanager_location}/sumstats.platform.gamemanager.command.remove_label_from_page`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883a-398a-7fb0-8d0e-5ca1676876ad(default)'.
 * The message error mappings described in IDeleteGamesFromLabelCommandErrorMapping
 */
export const call_DeleteGamesFromLabelCommand = (client: IRpcClient, payload: IDeleteGamesFromLabelCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteGamesFromLabelCommand, null>(payload, `sumstats.platform.gamemanager.command.delete_games_from_label`, `${gamemanager_location}/sumstats.platform.gamemanager.command.delete_games_from_label`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d883f-dff0-76a5-bb72-ea0c9548bd22(@STATIC/INVOICES),018d9c6f-84b9-7b0f-ab5c-d44846f2d6e7(@STATIC/INVOICES)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllGameIdsByGameTypeIdsQuery = (client: IRpcClient, payload: IFindAllGameIdsByGameTypeIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllGameIdsByGameTypeIdsQuery, { [key: string]: string[] }>(payload, `sumstats.platform.gamemanager.query.find_all_game_ids_by_game_type_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_game_ids_by_game_type_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(@STATIC/GAME),018d8838-afbe-7a47-8ee4-f7b4a1388cdf(@STATIC/GAME),018d8838-d1f8-7664-9c0c-9433aff9954f(@STATIC/GAME),018d8839-1279-78ab-898f-3b979abe7c94(@STATIC/GAME),018d8839-5edb-7a60-91e9-87d1169cbaea(@STATIC/GAME),018d8839-994e-77bb-aa81-fc6e658d9cd4(@STATIC/GAME),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(@STATIC/GAME),018d9c76-e87f-731f-85c0-d24c4c11e309(@STATIC/GAME),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(@STATIC/GAME)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetPreDefinedLabelsAllGamesCountQuery = (client: IRpcClient, payload: IGetPreDefinedLabelsAllGamesCountQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPreDefinedLabelsAllGamesCountQuery, IGetLabelsGamesCountResponse[]>(payload, `sumstats.platform.gamemanager.query.get_pre_defined_labels_all_games_count`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_pre_defined_labels_all_games_count`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(@STATIC/GAME),018d8838-afbe-7a47-8ee4-f7b4a1388cdf(@STATIC/GAME),018d8838-d1f8-7664-9c0c-9433aff9954f(@STATIC/GAME),018d8839-1279-78ab-898f-3b979abe7c94(@STATIC/GAME),018d8839-5edb-7a60-91e9-87d1169cbaea(@STATIC/GAME),018d8839-994e-77bb-aa81-fc6e658d9cd4(@STATIC/GAME),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(@STATIC/GAME),018d9c76-e87f-731f-85c0-d24c4c11e309(@STATIC/GAME),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(@STATIC/GAME)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetViewRulesByIdsQuery = (client: IRpcClient, payload: IGetViewRulesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetViewRulesByIdsQuery, { [key: string]: IViewRuleDto }>(payload, `sumstats.platform.gamemanager.query.get_view_rules_by_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_view_rules_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_AttachTagToGamesCommand = (client: IRpcClient, payload: IAttachTagToGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IAttachTagToGamesCommand, null>(payload, `sumstats.platform.gamemanager.command.attach_tag_to_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.attach_tag_to_games`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_CreateGameTagCommand = (client: IRpcClient, payload: ICreateGameTagCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateGameTagCommand, string>(payload, `sumstats.platform.gamemanager.command.create_tag`, `${gamemanager_location}/sumstats.platform.gamemanager.command.create_tag`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_CreateGameTagGroupCommand = (client: IRpcClient, payload: ICreateGameTagGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateGameTagGroupCommand, string>(payload, `sumstats.platform.gamemanager.command.create_tag_group`, `${gamemanager_location}/sumstats.platform.gamemanager.command.create_tag_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_DeleteGameTagCommand = (client: IRpcClient, payload: IDeleteGameTagCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteGameTagCommand, null>(payload, `sumstats.platform.gamemanager.command.delete_tag`, `${gamemanager_location}/sumstats.platform.gamemanager.command.delete_tag`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_DeleteGameTagGroupCommand = (client: IRpcClient, payload: IDeleteGameTagGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteGameTagGroupCommand, null>(payload, `sumstats.platform.gamemanager.command.delete_tag_group`, `${gamemanager_location}/sumstats.platform.gamemanager.command.delete_tag_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllGameMetricQuery = (client: IRpcClient, payload: IFindAllGameMetricQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllGameMetricQuery, IGameMetricDto[]>(payload, `sumstats.platform.gamemanager.query.find_all_game_metric`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_game_metric`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllPagesWithLabelsQuery = (client: IRpcClient, payload: IFindAllPagesWithLabelsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllPagesWithLabelsQuery, IGamePageDto[]>(payload, `sumstats.platform.gamemanager.query.find_all_pages_with_labels`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_pages_with_labels`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindGameProvidersByPagesQuery = (client: IRpcClient, payload: IFindGameProvidersByPagesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindGameProvidersByPagesQuery, { [key in EGamePage]?: IGameProviderWithPriority[] }>(payload, `sumstats.platform.gamemanager.query.find_game_providers_by_pages`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_game_providers_by_pages`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindGamesCountByViewRuleIdsQuery = (client: IRpcClient, payload: IFindGamesCountByViewRuleIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindGamesCountByViewRuleIdsQuery, { [key: string]: number }>(payload, `sumstats.platform.gamemanager.query.find_games_count_by_view_rule_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_games_count_by_view_rule_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameLinkByOperatorCommand = (client: IRpcClient, payload: IGetGameLinkByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameLinkByOperatorCommand, IGameLink>(payload, `sumstats.platform.gamemanager.command.operator_get_game_link`, `${gamemanager_location}/sumstats.platform.gamemanager.command.operator_get_game_link`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGamesCountBelongToPagesQuery = (client: IRpcClient, payload: IGetGamesCountBelongToPagesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGamesCountBelongToPagesQuery, { [key in EGamePage]?: number }>(payload, `sumstats.platform.gamemanager.query.get_games_count_belong_to_pages`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_games_count_belong_to_pages`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPreDefinedLabelsNotActiveGamesCountQuery = (client: IRpcClient, payload: IGetPreDefinedLabelsNotActiveGamesCountQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPreDefinedLabelsNotActiveGamesCountQuery, IGetLabelsGamesCountResponse[]>(payload, `sumstats.platform.gamemanager.query.get_pre_defined_labels_not_active_games_count`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_pre_defined_labels_not_active_games_count`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_RemoveTagFromGamesCommand = (client: IRpcClient, payload: IRemoveTagFromGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRemoveTagFromGamesCommand, null>(payload, `sumstats.platform.gamemanager.command.remove_tag_from_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.remove_tag_from_games`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateGameProviderOrderCommand = (client: IRpcClient, payload: IUpdateGameProviderOrderCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateGameProviderOrderCommand, null>(payload, `sumstats.platform.gamemanager.command.update_game_provider_order`, `${gamemanager_location}/sumstats.platform.gamemanager.command.update_game_provider_order`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateGameTagCommand = (client: IRpcClient, payload: IUpdateGameTagCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateGameTagCommand, null>(payload, `sumstats.platform.gamemanager.command.update_tag`, `${gamemanager_location}/sumstats.platform.gamemanager.command.update_tag`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateGameTagGroupCommand = (client: IRpcClient, payload: IUpdateGameTagGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateGameTagGroupCommand, null>(payload, `sumstats.platform.gamemanager.command.update_tag_group`, `${gamemanager_location}/sumstats.platform.gamemanager.command.update_tag_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, AFFILIATE_ROLE
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(@STATIC/PROVIDER),018d8855-c9bd-79c9-8b07-36a1f3ed57ab(@STATIC/PROVIDER),018d8855-f6f5-7dcf-a26a-41a206a3e8e6(@STATIC/PROVIDER),018d9c76-e87f-731f-85c0-d24c4c11e309(@STATIC/PROVIDER),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(@STATIC/PROVIDER)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameCountQuery = (client: IRpcClient, payload: IGetGameCountQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameCountQuery, { [key in EProviderCode]?: { [key in EProductCode]?: number } }>(payload, `sumstats.platform.gamemanager.query.get_game_count`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_game_count`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameTagsByIdsQuery = (client: IRpcClient, payload: IGetGameTagsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameTagsByIdsQuery, { [key: string]: ITagDto }>(payload, `sumstats.platform.gamemanager.query.get_game_tags_by_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_game_tags_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPreDefinedLabelsActiveGamesCountQuery = (client: IRpcClient, payload: IGetPreDefinedLabelsActiveGamesCountQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPreDefinedLabelsActiveGamesCountQuery, IGetLabelsGamesCountResponse[]>(payload, `sumstats.platform.gamemanager.query.get_pre_defined_labels_active_games_count`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_pre_defined_labels_active_games_count`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameTagGroupByIdQuery = (client: IRpcClient, payload: IGetGameTagGroupByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameTagGroupByIdQuery, ITagGroupDto>(payload, `sumstats.platform.bonus.query.get_game_tag_group_by_id`, `${gamemanager_location}/sumstats.platform.bonus.query.get_game_tag_group_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message error mappings described in ICreateGamesCommandErrorMapping
 */
export const call_CreateGamesCommand = (client: IRpcClient, payload: ICreateGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateGamesCommand, string[]>(payload, `sumstats.platform.gamemanager.command.create_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.create_games`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d8839-3112-799e-a169-9fc2725980f7(default),018d8855-f6f5-7dcf-a26a-41a206a3e8e6(@STATIC/PROVIDER)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllGameTagsQuery = (client: IRpcClient, payload: IFindAllGameTagsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllGameTagsQuery, IPage<ITagDto>>(payload, `sumstats.platform.gamemanager.query.find_all_tags`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_tags`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d8839-47b0-7070-a5e2-76b3e02ff67a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllGameTagGroupsQuery = (client: IRpcClient, payload: IFindAllGameTagGroupsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllGameTagGroupsQuery, IPage<ITagGroupDto>>(payload, `sumstats.platform.gamemanager.query.find_all_tag_groups`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_tag_groups`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d883a-398a-73fe-adb9-0d9947a8da93(default)'.
 * The message error mappings described in IEditGameCommandErrorMapping
 */
export const call_EditGameCommand = (client: IRpcClient, payload: IEditGameCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IEditGameCommand, null>(payload, `sumstats.platform.gamemanager.command.edit_game`, `${gamemanager_location}/sumstats.platform.gamemanager.command.edit_game`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d883a-398a-7dbb-9111-83defdbd8e84(default)'.
 * The message error mappings described in ICreateViewRuleCommandErrorMapping
 */
export const call_CreateViewRuleCommand = (client: IRpcClient, payload: ICreateViewRuleCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateViewRuleCommand, string>(payload, `sumstats.platform.gamemanager.command.create_view_rule`, `${gamemanager_location}/sumstats.platform.gamemanager.command.create_view_rule`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d883a-398a-7e74-9905-2851d847e158(default)'.
 * The message error mappings described in ICreateLabelCommandErrorMapping
 */
export const call_CreateLabelCommand = (client: IRpcClient, payload: ICreateLabelCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateLabelCommand, { [key: string]: any }>(payload, `sumstats.platform.gamemanager.command.create_label`, `${gamemanager_location}/sumstats.platform.gamemanager.command.create_label`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d8e81-8b82-76e6-a35e-4eaec3f33fac(@STATIC/GAME),018d8838-d1f8-7664-9c0c-9433aff9954f(@STATIC/GAME),018d8839-1279-78ab-898f-3b979abe7c94(@STATIC/GAME),018d8839-5edb-7a60-91e9-87d1169cbaea(@STATIC/GAME),018d8839-994e-77bb-aa81-fc6e658d9cd4(@STATIC/GAME),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(@STATIC/GAME),018d9c76-e87f-731f-85c0-d24c4c11e309(@STATIC/GAME),018d8817-a86f-7df9-b2ef-f6ac3c47b9b9(@STATIC/GAME)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameTagsByGameIdsQuery = (client: IRpcClient, payload: IGetGameTagsByGameIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameTagsByGameIdsQuery, { [key: string]: ITagDto[] }>(payload, `sumstats.platform.gamemanager.query.get_game_tags_by_game_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_game_tags_by_game_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ResetGameProviderOrderCommand = (client: IRpcClient, payload: IResetGameProviderOrderCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResetGameProviderOrderCommand, null>(payload, `sumstats.platform.gamemanager.command.reset_game_providers_order`, `${gamemanager_location}/sumstats.platform.gamemanager.command.reset_game_providers_order`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ResetGamesOrderCommand = (client: IRpcClient, payload: IResetGamesOrderCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResetGamesOrderCommand, null>(payload, `sumstats.platform.gamemanager.command.reset_games_order`, `${gamemanager_location}/sumstats.platform.gamemanager.command.reset_games_order`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE, PLATFORM_PLAYER
 * The message requires the following acl: '018d8838-afbe-7a47-8ee4-f7b4a1388cdf(default),018d8838-d1f8-7664-9c0c-9433aff9954f(default),018d8839-1279-78ab-898f-3b979abe7c94(default),018d8839-5edb-7a60-91e9-87d1169cbaea(default),018d8839-994e-77bb-aa81-fc6e658d9cd4(default),018d8839-c9da-7bf7-9e7e-0ec79ca0fd01(default),018d9c76-e87f-731f-85c0-d24c4c11e309(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllLabelsQuery = (client: IRpcClient, payload: IFindAllLabelsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllLabelsQuery, IGameLabelWithPagesAndGamesCount[]>(payload, `sumstats.platform.gamemanager.query.find_all_labels`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_all_labels`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IGetGameLinkCommandErrorMapping
 */
export const call_GetGameLinkCommand = (client: IRpcClient, payload: IGetGameLinkCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameLinkCommand, IGameLink>(payload, `sumstats.platform.gamemanager.command.get_game_link`, `${gamemanager_location}/sumstats.platform.gamemanager.command.get_game_link`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindRandomGameQuery = (client: IRpcClient, payload: IFindRandomGameQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindRandomGameQuery, IGameDto | null | undefined>(payload, `sumstats.platform.gamemanager.command.find_random_game`, `${gamemanager_location}/sumstats.platform.gamemanager.command.find_random_game`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindRecentlyPlayedGamesQuery = (client: IRpcClient, payload: IFindRecentlyPlayedGamesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindRecentlyPlayedGamesQuery, IGameDto[]>(payload, `sumstats.platform.gamemanager.query.find_recently_played_games`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_recently_played_games`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindActiveGamesByIdsQuery = (client: IRpcClient, payload: IFindActiveGamesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindActiveGamesByIdsQuery, { [key: string]: IGameDto }>(payload, `sumstats.platform.gamemanager.query.find_active_games_by_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_active_games_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * The message error mappings described in ILoadGamesCommandErrorMapping
 */
export const call_LoadGamesCommand = (client: IRpcClient, payload: ILoadGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ILoadGamesCommand, null>(payload, `sumstats.platform.gamemanager.command.load_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.load_games`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBaseInfoOfPopularGamesQuery = (client: IRpcClient, payload: IGetBaseInfoOfPopularGamesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBaseInfoOfPopularGamesQuery, IGameBaseInfo[]>(payload, `sumstats.platform.gamemanager.query.get_base_info_of_popular_games`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_base_info_of_popular_games`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameBaseInfoByExternalIdQuery = (client: IRpcClient, payload: IGetGameBaseInfoByExternalIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameBaseInfoByExternalIdQuery, IGameBaseInfo>(payload, `sumstats.platform.gamemanager.query.get_game_base_info_by_external_id`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_game_base_info_by_external_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameBaseInfoByInternalIdQuery = (client: IRpcClient, payload: IGetGameBaseInfoByInternalIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameBaseInfoByInternalIdQuery, IGameBaseInfo>(payload, `sumstats.platform.gamemanager.query.get_game_base_info_by_internal_id`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_game_base_info_by_internal_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameByInternalIdQuery = (client: IRpcClient, payload: IGetGameByInternalIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameByInternalIdQuery, IGameDto>(payload, `sumstats.platform.gamemanager.query.get_game_by_internal_id`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_game_by_internal_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGameDataByInternalIdsQuery = (client: IRpcClient, payload: IGetGameDataByInternalIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGameDataByInternalIdsQuery, { [key: string]: IGameData }>(payload, `sumstats.platform.gamemanager.query.get_game_data_by_internal_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_game_data_by_internal_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGamesExternalIdsByInternalIds = (client: IRpcClient, payload: IGetGamesExternalIdsByInternalIds, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGamesExternalIdsByInternalIds, { [key: string]: string }>(payload, `sumstats.platform.gamemanager.query.get_games_external_ids_by_internal_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_games_external_ids_by_internal_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetGamesNamesByInternalIdsQuery = (client: IRpcClient, payload: IGetGamesNamesByInternalIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGamesNamesByInternalIdsQuery, { [key: string]: TTranslateMap }>(payload, `sumstats.platform.gamemanager.query.get_games_names_by_internal_ids`, `${gamemanager_location}/sumstats.platform.gamemanager.query.get_games_names_by_internal_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetReplayLinkCommand = (client: IRpcClient, payload: IGetReplayLinkCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetReplayLinkCommand, IReplayLink>(payload, `sumstats.platform.gamemanager.command.get_replay_link`, `${gamemanager_location}/sumstats.platform.gamemanager.command.get_replay_link`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ResetProviderPositionSettingCommand = (client: IRpcClient, payload: IResetProviderPositionSettingCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResetProviderPositionSettingCommand, null>(payload, `sumstats.platform.gamemanager.command.reset_provider_position_setting`, `${gamemanager_location}/sumstats.platform.gamemanager.command.reset_provider_position_setting`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ResolveGameInternalIdQuery = (client: IRpcClient, payload: IResolveGameInternalIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IResolveGameInternalIdQuery, string>(payload, `sumstats.platform.gamemanager.query.resolve_game_internal_id`, `${gamemanager_location}/sumstats.platform.gamemanager.query.resolve_game_internal_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_SyncGamesCommand = (client: IRpcClient, payload: ISyncGamesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ISyncGamesCommand, { [key in EPluginCode]?: IGameUpdateDiffs[] }>(payload, `sumstats.platform.gamemanager.command.sync_games`, `${gamemanager_location}/sumstats.platform.gamemanager.command.sync_games`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindActiveGamesCountForPageAndProviderQuery = (client: IRpcClient, payload: IFindActiveGamesCountForPageAndProviderQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindActiveGamesCountForPageAndProviderQuery, IFindActiveGamesCountForPageAndProviderResponse[]>(payload, `sumstats.platform.gamemanager.query.find_active_games_count_for_page_and_provider`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_active_games_count_for_page_and_provider`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindActiveGameProvidersByPagesQuery = (client: IRpcClient, payload: IFindActiveGameProvidersByPagesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindActiveGameProvidersByPagesQuery, { [key in EGamePage]?: IProviderWithPriority[] }>(payload, `sumstats.platform.gamemanager.query.find_active_game_providers_by_pages`, `${gamemanager_location}/sumstats.platform.gamemanager.query.find_active_game_providers_by_pages`, metadata, settings);
