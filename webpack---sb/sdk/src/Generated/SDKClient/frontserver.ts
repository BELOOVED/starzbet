/**
 * ⚠️ GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * 🔨️ GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/SDKTypescriptGenerator.kt
 */
import type { ICheckSidebarCommand } from "../sportsbook/frontserver/api/command/CheckSidebarCommand"
import type { ICurrentTranslatesDto } from "../sportsbook/frontserver/api/dto/CurrentTranslatesDto"
import type { IEventsWithVideoCount } from "../sportsbook/frontserver/api/dto/EventsWithVideoCount"
import type { IFindEventsByNameCommand } from "../sportsbook/frontserver/api/command/FindEventsByNameCommand"
import type { IFrontendFeed } from "../sportsbook/frontserver/api/dto/FrontendFeed"
import type { IGetCurrentTranslatesCommand } from "../sportsbook/frontserver/api/command/GetCurrentTranslatesCommand"
import type { IGetEventSnapshotCommand } from "../sportsbook/frontserver/api/command/GetEventSnapshotCommand"
import type { IGetEventsWithVideoCommand } from "../sportsbook/frontserver/api/command/GetEventsWithVideoCommand"
import type { IGetEventsWithVideoCountCommand } from "../sportsbook/frontserver/api/command/GetEventsWithVideoCountCommand"
import type { IGetLineBySportsAndDatesCommand } from "../sportsbook/frontserver/api/command/GetLineBySportsAndDatesCommand"
import type { IGetLineByTournamentIdCommand } from "../sportsbook/frontserver/api/command/GetLineByTournamentIdCommand"
import type { IGetMainLineCommand } from "../sportsbook/frontserver/api/command/GetMainLineCommand"
import type { IGetMainLineGapCommand } from "../sportsbook/frontserver/api/command/GetMainLineGapCommand"
import type { IGetSidebarCommand } from "../sportsbook/frontserver/api/command/GetSidebarCommand"
import type { IGetSportToDateLineGapCommand } from "../sportsbook/frontserver/api/command/GetSportToDateLineGapCommand"
import type { IGetTranslatesGapCommand } from "../sportsbook/frontserver/api/command/GetTranslatesGapCommand"
import type { IHandleDiffCommand } from "../sportsbook/frontserver/api/command/HandleDiffCommand"
import type { IHandleKryoDiffCommand } from "../sportsbook/frontserver/api/command/HandleKryoDiffCommand"
import type { ISidebarTree } from "../sportsbook/frontserver/api/dto/SidebarTree"
import type { ITranslateDiff } from "../sportsbook/frontserver/api/dto/TranslateDiff"
import type { IUiSportDateSlice } from "../sportsbook/frontserver/api/dto/UiSportDateSlice"
import type { IUiSportDateSliceGaps } from "../sportsbook/frontserver/api/dto/UiSportDateSliceGaps"
import { IRpcClient } from "@sb/network-bus/RpcClient";
import { IMetadata } from "@sb/network-bus/Model";
import { ISetting } from "@sb/network-bus/Model";
import { emptySettings } from "@sb/network-bus/Model";
import { emptyGetSettings } from "@sb/network-bus/Model";
import { frontserver_erisgaming_location } from "./ProxyLocations";
import { frontserver_postfix_location } from "./ProxyLocations";

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_CheckSidebarCommand = (client: IRpcClient, postfix: string, payload: ICheckSidebarCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<ICheckSidebarCommand, null>(payload, `sumstats.frontserver.command.check_sidebar.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.check_sidebar.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindEventsByNameCommand = (client: IRpcClient, postfix: string, payload: IFindEventsByNameCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IFindEventsByNameCommand, IFrontendFeed[]>(payload, `sumstats.frontserver.command.find_events_by_name.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.find_events_by_name.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetEventSnapshotCommand = (client: IRpcClient, postfix: string, payload: IGetEventSnapshotCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IGetEventSnapshotCommand, IFrontendFeed>(payload, `sumstats.frontserver.command.get_event_snapshot.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_event_snapshot.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetEventsWithVideoCommand = (client: IRpcClient, postfix: string, payload: IGetEventsWithVideoCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IGetEventsWithVideoCommand, IFrontendFeed>(payload, `sumstats.frontserver.command.get_events_with_video.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_events_with_video.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetEventsWithVideoCountCommand = (client: IRpcClient, postfix: string, payload: IGetEventsWithVideoCountCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IGetEventsWithVideoCountCommand, IEventsWithVideoCount>(payload, `sumstats.frontserver.command.get_events_with_video_count.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_events_with_video_count.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetLineBySportsAndDatesCommand = (client: IRpcClient, postfix: string, payload: IGetLineBySportsAndDatesCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IGetLineBySportsAndDatesCommand, IUiSportDateSlice[]>(payload, `sumstats.frontserver.command.get_line_by_sports_and_dates.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_line_by_sports_and_dates.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetLineByTournamentIdCommand = (client: IRpcClient, postfix: string, payload: IGetLineByTournamentIdCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IGetLineByTournamentIdCommand, IFrontendFeed>(payload, `sumstats.frontserver.command.get_line_by_tournament_id.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_line_by_tournament_id.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetMainLineCommand = (client: IRpcClient, postfix: string, payload: IGetMainLineCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IGetMainLineCommand, IFrontendFeed>(payload, `sumstats.frontserver.command.get_main_line.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_main_line.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetMainLineGapCommand = (client: IRpcClient, postfix: string, payload: IGetMainLineGapCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetMainLineGapCommand, IFrontendFeed[]>(payload, `sumstats.frontserver.command.get_main_line_gap.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_main_line_gap.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetSidebarCommand = (client: IRpcClient, postfix: string, payload: IGetSidebarCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IGetSidebarCommand, ISidebarTree>(payload, `sumstats.frontserver.command.get_sidebar.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_sidebar.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetSportToDateLineGapCommand = (client: IRpcClient, postfix: string, payload: IGetSportToDateLineGapCommand, metadata?: IMetadata, settings: ISetting = emptyGetSettings) => client.call<IGetSportToDateLineGapCommand, IUiSportDateSliceGaps[]>(payload, `sumstats.frontserver.command.get_sport_to_date_gap.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.get_sport_to_date_gap.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_HandleDiffCommand = (client: IRpcClient, postfix: string, payload: IHandleDiffCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IHandleDiffCommand, null>(payload, `sumstats.frontserver.command.handle_diff.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.handle_diff.${postfix}`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_HandleKryoDiffCommand = (client: IRpcClient, postfix: string, payload: IHandleKryoDiffCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IHandleKryoDiffCommand, null>(payload, `sumstats.frontserver.command.handle_kryo_diff.${postfix}`, `${frontserver_postfix_location(postfix)}/sumstats.frontserver.command.handle_kryo_diff.${postfix}`, metadata, settings);

/**
 * [!] The message does not require roles.
 * [!] The message doesn't have error mappings.
 */
export const call_GetCurrentTranslatesCommand = (client: IRpcClient, payload: IGetCurrentTranslatesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCurrentTranslatesCommand, ICurrentTranslatesDto>(payload, `sumstats.frontserver.command.translates.get_current_translates`, `${frontserver_erisgaming_location}/sumstats.frontserver.command.translates.get_current_translates`, metadata, settings);

/**
 * [!] The message does not require roles.
 * [!] The message doesn't have error mappings.
 */
export const call_GetTranslatesGapCommand = (client: IRpcClient, payload: IGetTranslatesGapCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetTranslatesGapCommand, ITranslateDiff[]>(payload, `sumstats.frontserver.command.translates.get_translates_gap`, `${frontserver_erisgaming_location}/sumstats.frontserver.command.translates.get_translates_gap`, metadata, settings);
