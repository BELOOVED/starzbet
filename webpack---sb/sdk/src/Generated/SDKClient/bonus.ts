/**
 * ‚ö†Ô∏è GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * üî®Ô∏è GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/SDKTypescriptGenerator.kt
 */
import type { EligibilityRuleProgress } from "../platform/bonus/api/dto/eligibility/progress/EligibilityRuleProgress"
import type { IActivatePlayerBonusByOperatorCommand } from "../platform/bonus/api/command/operator/ActivatePlayerBonusByOperatorCommand"
import type { IActivatePlayerBonusByPlayerCommand } from "../platform/bonus/api/command/player/ActivatePlayerBonusByPlayerCommand"
import type { IBonusActivateResult } from "../platform/bonus/api/dto/result/BonusActivateResult"
import type { IBonusBulkUploadTaskDto } from "../platform/bonus/api/dto/bulkupload/BonusBulkUploadTaskDto"
import type { IBonusBulkUploadTaskUnitWithResultDto } from "../platform/bonus/api/dto/bulkupload/BonusBulkUploadTaskUnitWithResultDto"
import type { IBonusCancelResult } from "../platform/bonus/api/dto/result/BonusCancelResult"
import type { IBonusClaimResult } from "../platform/bonus/api/dto/result/BonusClaimResult"
import type { IBonusCreateResult } from "../platform/bonus/api/dto/result/BonusCreateResult"
import type { IBonusDeleteResult } from "../platform/bonus/api/dto/result/BonusDeleteResult"
import type { IBonusGivenDto } from "../platform/bonus/api/dto/report/dashboard/BonusGivenDto"
import type { IBonusGraphQLDto } from "../platform/bonus/api/dto/BonusGraphQLDto"
import type { IBonusReportInfo } from "../platform/bonus/api/dto/report/BonusReportInfo"
import type { IBonusReportWithdrawalsAfterBonusInfo } from "../platform/bonus/api/dto/report/BonusReportWithdrawalsAfterBonusInfo"
import type { IBonusRuleReadDto } from "../platform/bonus/api/dto/bonusrule/BonusRuleReadDto"
import type { IBonusShareLimitsReadDto } from "../platform/bonus/api/dto/sharelimits/BonusShareLimitsReadDto"
import type { IBonusUpdateResult } from "../platform/bonus/api/dto/result/BonusUpdateResult"
import type { ICancelPlayerBonusByOperatorCommand } from "../platform/bonus/api/command/operator/CancelPlayerBonusByOperatorCommand"
import type { ICancelPlayerBonusByPlayerCommand } from "../platform/bonus/api/command/player/CancelPlayerBonusByPlayerCommand"
import type { ICashbackDetails } from "../platform/bonus/api/dto/bonus/cashback/CashbackDetails"
import type { ICashbackStatus } from "../platform/bonus/api/dto/bonus/cashback/CashbackStatus"
import type { IChangeBonusStateByOperatorCommand } from "../platform/bonus/api/command/operator/ChangeBonusStateByOperatorCommand"
import type { IClaimBonusByOperatorCommand } from "../platform/bonus/api/command/operator/ClaimBonusByOperatorCommand"
import type { IClaimBonusByPlayerCommand } from "../platform/bonus/api/command/player/ClaimBonusByPlayerCommand"
import type { IClaimBonusByPromotionCodeCommand } from "../platform/bonus/api/command/player/ClaimBonusByPromotionCodeCommand"
import type { IClaimBonusByVipClub } from "../platform/bonus/api/command/system/ClaimBonusByVipClub"
import type { IClaimBonusOnPlayerRegistrationCommand } from "../platform/bonus/api/command/player/ClaimBonusOnPlayerRegistrationCommand"
import type { ICompleteWageringByOperatorCommand } from "../platform/bonus/api/command/operator/CompleteWageringByOperatorCommand"
import type { ICompleteWageringResult } from "../platform/bonus/api/dto/result/CompleteWageringResult"
import type { ICreateBonusBulkUploadTaskCommand } from "../platform/bonus/api/command/operator/CreateBonusBulkUploadTaskCommand"
import type { ICreateBonusByOperatorCommand } from "../platform/bonus/api/command/operator/CreateBonusByOperatorCommand"
import type { ICreateBonusRuleByOperatorCommand } from "../platform/bonus/api/command/operator/bonusrule/cashback/CreateBonusRuleByOperatorCommand"
import type { ICreateBonusTagCommand } from "../platform/bonus/api/command/tag/CreateBonusTagCommand"
import type { ICreateBonusTagGroupCommand } from "../platform/bonus/api/command/taggroup/CreateBonusTagGroupCommand"
import type { ICreateShareLimitsByOperatorCommand } from "../platform/bonus/api/command/operator/sharelimits/CreateShareLimitsByOperatorCommand"
import type { IDeleteBonusBulkUploadTaskCommand } from "../platform/bonus/api/command/operator/DeleteBonusBulkUploadTaskCommand"
import type { IDeleteBonusByOperatorCommand } from "../platform/bonus/api/command/operator/DeleteBonusByOperatorCommand"
import type { IDeleteBonusRuleByOperatorCommand } from "../platform/bonus/api/command/operator/bonusrule/cashback/DeleteBonusRuleByOperatorCommand"
import type { IDeleteBonusTagCommand } from "../platform/bonus/api/command/tag/DeleteBonusTagCommand"
import type { IDeleteBonusTagGroupCommand } from "../platform/bonus/api/command/taggroup/DeleteBonusTagGroupCommand"
import type { IDeleteShareLimitsByOperatorCommand } from "../platform/bonus/api/command/operator/sharelimits/DeleteShareLimitsByOperatorCommand"
import type { IDepositByBonusDto } from "../platform/bonus/api/dto/report/dashboard/DepositByBonusDto"
import type { IFindActivatedPlayerBonusesByPlayerIdQuery } from "../platform/bonus/api/query/FindActivatedPlayerBonusesByPlayerIdQuery"
import type { IFindAllBonusBulkUploadTaskUnitsQuery } from "../platform/bonus/api/query/bulkupload/FindAllBonusBulkUploadTaskUnitsQuery"
import type { IFindAllBonusBulkUploadTasksQuery } from "../platform/bonus/api/query/bulkupload/FindAllBonusBulkUploadTasksQuery"
import type { IFindAllBonusRulesQuery } from "../platform/bonus/api/query/bonusrule/cashback/FindAllBonusRulesQuery"
import type { IFindAllBonusShareLimitsQuery } from "../platform/bonus/api/query/sharelimits/FindAllBonusShareLimitsQuery"
import type { IFindAllBonusTagGroupsQuery } from "../platform/bonus/api/query/tag/FindAllBonusTagGroupsQuery"
import type { IFindAllBonusTagsQuery } from "../platform/bonus/api/query/tag/FindAllBonusTagsQuery"
import type { IFindAllBonusesQuery } from "../platform/bonus/api/query/FindAllBonusesQuery"
import type { IFindAllPlayerBonusResources } from "../platform/bonus/api/query/FindAllPlayerBonusResources"
import type { IFindAllPlayerBonusesQuery } from "../platform/bonus/api/query/FindAllPlayerBonusesQuery"
import type { IFindAvailableBonusDetailsByIdQuery } from "../platform/bonus/api/query/FindAvailableBonusDetailsByIdQuery"
import type { IFindAvailableForGamePlayerBonusQuery } from "../platform/bonus/api/query/FindAvailableForGamePlayerBonusQuery"
import type { IFindBonusBulkUploadTaskByIdQuery } from "../platform/bonus/api/query/bulkupload/FindBonusBulkUploadTaskByIdQuery"
import type { IFindBonusById } from "../platform/bonus/api/query/FindBonusById"
import type { IFindBonusTagByIdQuery } from "../platform/bonus/api/query/tag/FindBonusTagByIdQuery"
import type { IFindBonusesForPromotionsQuery } from "../platform/bonus/api/query/FindBonusesForPromotionsQuery"
import type { IFindGamePlayerBonusInfoQuery } from "../platform/bonus/api/query/FindGamePlayerBonusInfoQuery"
import type { IFindPlayerBonusById } from "../platform/bonus/api/query/FindPlayerBonusById"
import type { IFindPlayerIdByPlayerBonusIdQuery } from "../platform/bonus/api/query/FindPlayerIdByPlayerBonusIdQuery"
import type { IFindRegistrationBonusesQuery } from "../platform/bonus/api/query/FindRegistrationBonusesQuery"
import type { IFindRelevantPlayerBonusByPlayerIdQuery } from "../platform/bonus/api/query/FindRelevantPlayerBonusByPlayerIdQuery"
import type { IFindRelevantPlayerBonusOnSportsbookBatch } from "../platform/bonus/api/query/FindRelevantPlayerBonusOnSportsbookBatch"
import type { IFindResourcesAttachedToCashbackQuery } from "../platform/bonus/api/query/FindResourcesAttachedToCashbackQuery"
import type { IGamePlayerBonusInfo } from "../platform/bonus/api/dto/GamePlayerBonusInfo"
import type { IGamePlayerBonusMatchResult } from "../platform/bonus/api/dto/GamePlayerBonusMatchResult"
import type { IGetAvailableBonusesForPlayer } from "../platform/bonus/api/query/GetAvailableBonusesForPlayer"
import type { IGetAvailableBonusesForVipClubPlayerQuery } from "../platform/bonus/api/query/GetAvailableBonusesForVipClubPlayerQuery"
import type { IGetAvailableCashbackBonusesForPlayerQuery } from "../platform/bonus/api/query/GetAvailableCashbackBonusesForPlayerQuery"
import type { IGetBonusAmountToBeGiven } from "../platform/bonus/api/query/GetBonusAmountToBeGiven"
import type { IGetBonusGivenDashboard } from "../platform/bonus/api/query/reports/GetBonusGivenDashboard"
import type { IGetBonusReportWithdrawalsAfterBonusInfoQuery } from "../platform/bonus/api/query/reports/GetBonusReportWithdrawalsAfterBonusInfoQuery"
import type { IGetBonusReportsInfoQuery } from "../platform/bonus/api/query/reports/GetBonusReportsInfoQuery"
import type { IGetBonusRulesByIdsQuery } from "../platform/bonus/api/query/bonusrule/cashback/GetBonusRulesByIdsQuery"
import type { IGetBonusesByIdsQuery } from "../platform/bonus/api/query/GetBonusesByIdsQuery"
import type { IGetBonusesForPromotionsQuery } from "../platform/bonus/api/query/GetBonusesForPromotionsQuery"
import type { IGetCashbackDetailsForPlayerQuery } from "../platform/bonus/api/query/GetCashbackDetailsForPlayerQuery"
import type { IGetCashbackStatusForPlayerQuery } from "../platform/bonus/api/query/GetCashbackStatusForPlayerQuery"
import type { IGetCashbackSumByPlayerCommand } from "../platform/bonus/api/command/player/GetCashbackSumByPlayerCommand"
import type { IGetDepositByBonusDashboard } from "../platform/bonus/api/query/reports/GetDepositByBonusDashboard"
import type { IGetEligibilityClaimRulesInfoBatchQuery } from "../platform/bonus/api/query/GetEligibilityClaimRulesInfoBatchQuery"
import type { IGetMaxWinAllowedForFreeBetQuery } from "../platform/bonus/api/query/GetMaxWinAllowedForFreeBetQuery"
import type { IGetNotSettledResourceCountQuery } from "../platform/bonus/api/query/GetNotSettledResourceCountQuery"
import type { IGetPlayerBonusByPlayerQuery } from "../platform/bonus/api/query/GetPlayerBonusByPlayerQuery"
import type { IGetPlayerBonusStateHistoryQuery } from "../platform/bonus/api/query/GetPlayerBonusStateHistoryQuery"
import type { IGetShareLimitsByIdsQuery } from "../platform/bonus/api/query/sharelimits/GetShareLimitsByIdsQuery"
import type { IGetWageredBonusDashboard } from "../platform/bonus/api/query/reports/GetWageredBonusDashboard"
import type { IGetWageringProgress } from "../platform/bonus/api/query/progress/GetWageringProgress"
import type { IGetWalletTypesOnSportsbookBonusBetQuery } from "../platform/bonus/api/query/GetWalletTypesOnSportsbookBonusBetQuery"
import type { IMoney } from "@sb/utils/Money"
import type { INotSettledResourcesByProductCount } from "../platform/bonus/api/dto/NotSettledResourcesByProductCount"
import type { IPage } from "../graphqlbackend/cursor/Page"
import type { IPlayerBonusDto } from "../platform/bonus/api/dto/PlayerBonusDto"
import type { IPlayerBonusGraphQLDto } from "../platform/bonus/api/dto/PlayerBonusGraphQLDto"
import type { IPlayerBonusMatchResultView } from "../platform/bonus/api/dto/PlayerBonusMatchResultView"
import type { IPlayerBonusResourceReadDto } from "../platform/bonus/api/dto/PlayerBonusResourceReadDto"
import type { IPlayerBonusShortDto } from "../platform/bonus/api/dto/PlayerBonusShortDto"
import type { IPlayerBonusStateHistory } from "../platform/bonus/api/dto/statehistory/PlayerBonusStateHistory"
import type { IRelevantPlayerBonusMatchOnSportsbookBatchResult } from "../platform/bonus/api/dto/RelevantPlayerBonusMatchOnSportsbookBatchResult"
import type { IResourcesAttachedToCashbackDto } from "../platform/bonus/api/dto/ResourcesAttachedToCashbackDto"
import type { ITagDto } from "../tag/model/dto/TagDto"
import type { ITagGroupDto } from "../tag/model/dto/TagGroupDto"
import type { IUpdateBonusByOperatorCommand } from "../platform/bonus/api/command/operator/UpdateBonusByOperatorCommand"
import type { IUpdateBonusFilesByOperatorCommand } from "../platform/bonus/api/command/UpdateBonusFilesByOperatorCommand"
import type { IUpdateBonusRuleByOperatorCommand } from "../platform/bonus/api/command/operator/bonusrule/cashback/UpdateBonusRuleByOperatorCommand"
import type { IUpdateBonusTagCommand } from "../platform/bonus/api/command/tag/UpdateBonusTagCommand"
import type { IUpdateBonusTagGroupCommand } from "../platform/bonus/api/command/taggroup/UpdateBonusTagGroupCommand"
import type { IUpdateShareLimitsByOperatorCommand } from "../platform/bonus/api/command/operator/sharelimits/UpdateShareLimitsByOperatorCommand"
import type { IWageredBonusDto } from "../platform/bonus/api/dto/report/dashboard/WageredBonusDto"
import type { IWageringProgressDto } from "../platform/bonus/api/model/WageringProgressDto"
import type { TWalletType } from "../wallettype/WalletType"
import { IRpcClient } from "@sb/network-bus/RpcClient";
import { IMetadata } from "@sb/network-bus/Model";
import { ISetting } from "@sb/network-bus/Model";
import { emptySettings } from "@sb/network-bus/Model";
import { bonus_location } from "./ProxyLocations";

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindBonusesForPromotionsQuery = (client: IRpcClient, payload: IFindBonusesForPromotionsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindBonusesForPromotionsQuery, IBonusGraphQLDto[]>(payload, `sumstats.platform.bonus.query.find_bonuses_for_promotions`, `${bonus_location}/sumstats.platform.bonus.query.find_bonuses_for_promotions`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindRegistrationBonusesQuery = (client: IRpcClient, payload: IFindRegistrationBonusesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindRegistrationBonusesQuery, IBonusGraphQLDto[]>(payload, `sumstats.platform.bonus.query.find_registration_bonuses`, `${bonus_location}/sumstats.platform.bonus.query.find_registration_bonuses`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBonusesForPromotionsQuery = (client: IRpcClient, payload: IGetBonusesForPromotionsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBonusesForPromotionsQuery, IBonusGraphQLDto[]>(payload, `sumstats.platform.bonus.query.get_bonuses_for_promotions`, `${bonus_location}/sumstats.platform.bonus.query.get_bonuses_for_promotions`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881a-13e8-7f65-a65a-177b394287d3(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllBonusBulkUploadTaskUnitsQuery = (client: IRpcClient, payload: IFindAllBonusBulkUploadTaskUnitsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllBonusBulkUploadTaskUnitsQuery, IPage<IBonusBulkUploadTaskUnitWithResultDto>>(payload, `sumstats.platform.bonus.query.find_all_bulk_upload_task_units`, `${bonus_location}/sumstats.platform.bonus.query.find_all_bulk_upload_task_units`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881a-13e8-7f65-a65a-177b394287d3(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllBonusBulkUploadTasksQuery = (client: IRpcClient, payload: IFindAllBonusBulkUploadTasksQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllBonusBulkUploadTasksQuery, IPage<IBonusBulkUploadTaskDto>>(payload, `sumstats.platform.bonus.query.find_all_bulk_upload_tasks`, `${bonus_location}/sumstats.platform.bonus.query.find_all_bulk_upload_tasks`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881a-9ddf-70c2-b394-f9a9e10a0151(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_DeleteBonusBulkUploadTaskCommand = (client: IRpcClient, payload: IDeleteBonusBulkUploadTaskCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteBonusBulkUploadTaskCommand, null>(payload, `sumstats.platform.bonus.command.delete_bonus_bulk_upload_task`, `${bonus_location}/sumstats.platform.bonus.command.delete_bonus_bulk_upload_task`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881a-9ddf-75f6-97ca-6bf3fb48c540(default)'.
 * The message error mappings described in ICreateBonusByOperatorErrorMapping
 */
export const call_CreateBonusByOperatorCommand = (client: IRpcClient, payload: ICreateBonusByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateBonusByOperatorCommand, IBonusCreateResult>(payload, `sumstats.platform.bonus.command.create_bonus_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.create_bonus_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881a-9ddf-77b0-9027-3a49880c9ce6(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateBonusTagCommand = (client: IRpcClient, payload: IUpdateBonusTagCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateBonusTagCommand, null>(payload, `sumstats.platform.bonus.command.update_tag`, `${bonus_location}/sumstats.platform.bonus.command.update_tag`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881a-9ddf-7abe-a435-70ded6333ecd(default)'.
 * The message error mappings described in IDeleteBonusByOperatorErrorMapping
 */
export const call_DeleteBonusByOperatorCommand = (client: IRpcClient, payload: IDeleteBonusByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteBonusByOperatorCommand, IBonusDeleteResult>(payload, `sumstats.platform.bonus.command.delete_bonus_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.delete_bonus_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881a-9ddf-7fb9-b5a1-be0d617030dc(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_DeleteBonusTagCommand = (client: IRpcClient, payload: IDeleteBonusTagCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteBonusTagCommand, null>(payload, `sumstats.platform.bonus.command.delete_tag`, `${bonus_location}/sumstats.platform.bonus.command.delete_tag`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881b-2d61-7b56-9cc9-787edd3e483b(default)'.
 * The message error mappings described in IChangeBonusStateByOperatorErrorMapping
 */
export const call_ChangeBonusStateByOperatorCommand = (client: IRpcClient, payload: IChangeBonusStateByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IChangeBonusStateByOperatorCommand, null>(payload, `sumstats.platform.bonus.command.set_bonus_state_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.set_bonus_state_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881b-2d61-7b56-9cc9-787edd3e483b(default)'.
 * The message error mappings described in IUpdateBonusErrorMapping
 */
export const call_UpdateBonusByOperatorCommand = (client: IRpcClient, payload: IUpdateBonusByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateBonusByOperatorCommand, IBonusUpdateResult>(payload, `sumstats.platform.bonus.command.update_bonus_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.update_bonus_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881b-2d61-7b56-9cc9-787edd3e483b(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateBonusFilesByOperatorCommand = (client: IRpcClient, payload: IUpdateBonusFilesByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateBonusFilesByOperatorCommand, IBonusUpdateResult>(payload, `sumstats.platform.bonus.command.update_bonus_files_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.update_bonus_files_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d881b-58e8-70a6-9ac3-69ae55b8b4a6(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_CreateBonusBulkUploadTaskCommand = (client: IRpcClient, payload: ICreateBonusBulkUploadTaskCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateBonusBulkUploadTaskCommand, string>(payload, `sumstats.platform.bonus.command.create_bonus_bulk_upload_task`, `${bonus_location}/sumstats.platform.bonus.command.create_bonus_bulk_upload_task`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-725c-b958-d6640faa1454(default),018d881a-9ddf-75ae-855c-861dec0893cb(default)'.
 * The message error mappings described in ICompleteWageringByOperatorErrorMapping
 */
export const call_CompleteWageringByOperatorCommand = (client: IRpcClient, payload: ICompleteWageringByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICompleteWageringByOperatorCommand, ICompleteWageringResult>(payload, `sumstats.platform.bonus.command.complete_wagering_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.complete_wagering_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-76d6-a1b7-90f520e199de(default),018d881a-9ddf-7839-a2f6-c3b6cc268e7a(default)'.
 * The message error mappings described in IActivatePlayerBonusByOperatorErrorMapping
 */
export const call_ActivatePlayerBonusByOperatorCommand = (client: IRpcClient, payload: IActivatePlayerBonusByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IActivatePlayerBonusByOperatorCommand, IBonusActivateResult>(payload, `sumstats.platform.bonus.command.activate_player_bonus_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.activate_player_bonus_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-7e09-bcc7-01fd8487fc91(default),018d881a-9ddf-78bd-8fd1-8eb63349a023(default)'.
 * The message error mappings described in ICancelPlayerBonusByOperatorErrorMapping
 */
export const call_CancelPlayerBonusByOperatorCommand = (client: IRpcClient, payload: ICancelPlayerBonusByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICancelPlayerBonusByOperatorCommand, IBonusCancelResult>(payload, `sumstats.platform.bonus.command.cancel_player_bonus_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.cancel_player_bonus_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d8852-1eb7-7e76-9f29-a73c360cde20(default),018d881a-9ddf-731e-904a-a8d2c77ab20c(default)'.
 * The message error mappings described in IClaimBonusByOperatorErrorMapping
 */
export const call_ClaimBonusByOperatorCommand = (client: IRpcClient, payload: IClaimBonusByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IClaimBonusByOperatorCommand, IBonusClaimResult>(payload, `sumstats.platform.bonus.command.claim_bonus_by_operator`, `${bonus_location}/sumstats.platform.bonus.command.claim_bonus_by_operator`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d88a0-2241-797d-a726-d7a1b2541dd6(@STATIC/VIP_CLUB)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBonusReportsInfoQuery = (client: IRpcClient, payload: IGetBonusReportsInfoQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBonusReportsInfoQuery, { [key: string]: IBonusReportInfo }>(payload, `sumstats.platform.bonus.query.get_bonus_reports_info`, `${bonus_location}/sumstats.platform.bonus.query.get_bonus_reports_info`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerBonusStateHistoryQuery = (client: IRpcClient, payload: IGetPlayerBonusStateHistoryQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerBonusStateHistoryQuery, IPlayerBonusStateHistory>(payload, `sumstats.platform.bonus.get_player_bonus_state_history`, `${bonus_location}/sumstats.platform.bonus.get_player_bonus_state_history`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBonusRulesByIdsQuery = (client: IRpcClient, payload: IGetBonusRulesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBonusRulesByIdsQuery, { [key: string]: IBonusRuleReadDto }>(payload, `sumstats.platform.bonus.query.get_rules_by_ids`, `${bonus_location}/sumstats.platform.bonus.query.get_rules_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetShareLimitsByIdsQuery = (client: IRpcClient, payload: IGetShareLimitsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetShareLimitsByIdsQuery, { [key: string]: IBonusShareLimitsReadDto }>(payload, `sumstats.platform.bonus.query.get_share_limits_by_ids`, `${bonus_location}/sumstats.platform.bonus.query.get_share_limits_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(default),018d8819-0db7-72b3-b593-bb2ded6392b1(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBonusGivenDashboard = (client: IRpcClient, payload: IGetBonusGivenDashboard, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBonusGivenDashboard, IBonusGivenDto>(payload, `sumstats.platform.bonus.query.get_bonus_given_dashboard`, `${bonus_location}/sumstats.platform.bonus.query.get_bonus_given_dashboard`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(default),018d8819-0db7-72b3-b593-bb2ded6392b1(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetDepositByBonusDashboard = (client: IRpcClient, payload: IGetDepositByBonusDashboard, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetDepositByBonusDashboard, IDepositByBonusDto>(payload, `sumstats.platform.bonus.query.get_deposit_by_bonus_dashboard`, `${bonus_location}/sumstats.platform.bonus.query.get_deposit_by_bonus_dashboard`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(default),018d8819-0db7-72b3-b593-bb2ded6392b1(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetWageredBonusDashboard = (client: IRpcClient, payload: IGetWageredBonusDashboard, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetWageredBonusDashboard, IWageredBonusDto>(payload, `sumstats.platform.bonus.query.get_wagered_bonus_dashboard`, `${bonus_location}/sumstats.platform.bonus.query.get_wagered_bonus_dashboard`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(default),018d884e-9a91-7406-8d58-43d5f82530c1(default),018d8819-0db7-72b3-b593-bb2ded6392b1(default),018d881a-4b48-7075-88a2-cf6cde2e0d15(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllBonusTagsQuery = (client: IRpcClient, payload: IFindAllBonusTagsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllBonusTagsQuery, IPage<ITagDto>>(payload, `sumstats.platform.bonus.query.find_all_tags`, `${bonus_location}/sumstats.platform.bonus.query.find_all_tags`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018e141c-8be0-7ac2-9f4a-9c2f2f31b8c8(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllBonusShareLimitsQuery = (client: IRpcClient, payload: IFindAllBonusShareLimitsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllBonusShareLimitsQuery, IPage<IBonusShareLimitsReadDto>>(payload, `sumstats.platform.bonus.query.find_all_share_limits`, `${bonus_location}/sumstats.platform.bonus.query.find_all_share_limits`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018e141e-0115-781b-974b-0a433ebb6a49(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_CreateShareLimitsByOperatorCommand = (client: IRpcClient, payload: ICreateShareLimitsByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateShareLimitsByOperatorCommand, null>(payload, `sumstats.platform.bonus.command.create_share_limits`, `${bonus_location}/sumstats.platform.bonus.command.create_share_limits`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018e141e-5c31-780f-80be-bdfd32a6bb0a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateShareLimitsByOperatorCommand = (client: IRpcClient, payload: IUpdateShareLimitsByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateShareLimitsByOperatorCommand, null>(payload, `sumstats.platform.bonus.command.update_share_limits`, `${bonus_location}/sumstats.platform.bonus.command.update_share_limits`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018e141e-5c31-7b51-abf3-0b62ef7defea(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_DeleteShareLimitsByOperatorCommand = (client: IRpcClient, payload: IDeleteShareLimitsByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteShareLimitsByOperatorCommand, null>(payload, `sumstats.platform.bonus.command.delete_share_limits`, `${bonus_location}/sumstats.platform.bonus.command.delete_share_limits`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018fc8fd-41c8-7545-90fc-4cf785a39438(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_DeleteBonusRuleByOperatorCommand = (client: IRpcClient, payload: IDeleteBonusRuleByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteBonusRuleByOperatorCommand, null>(payload, `sumstats.platform.bonus.command.delete_bonus_rule`, `${bonus_location}/sumstats.platform.bonus.command.delete_bonus_rule`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018fc8fd-41c8-7545-90fd-2d44a9136524(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateBonusRuleByOperatorCommand = (client: IRpcClient, payload: IUpdateBonusRuleByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateBonusRuleByOperatorCommand, null>(payload, `sumstats.platform.bonus.command.update_bonus_rule`, `${bonus_location}/sumstats.platform.bonus.command.update_bonus_rule`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * The message requires the following acl: '018fe35e-ce19-76ab-b543-1d839239e77a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllBonusRulesQuery = (client: IRpcClient, payload: IFindAllBonusRulesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllBonusRulesQuery, IPage<IBonusRuleReadDto>>(payload, `sumstats.platform.bonus.query.find_all_bonus_rules`, `${bonus_location}/sumstats.platform.bonus.query.find_all_bonus_rules`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_CreateBonusTagGroupCommand = (client: IRpcClient, payload: ICreateBonusTagGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateBonusTagGroupCommand, string>(payload, `sumstats.platform.bonus.command.create_tag_group`, `${bonus_location}/sumstats.platform.bonus.command.create_tag_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_DeleteBonusTagGroupCommand = (client: IRpcClient, payload: IDeleteBonusTagGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteBonusTagGroupCommand, null>(payload, `sumstats.platform.bonus.command.delete_tag_group`, `${bonus_location}/sumstats.platform.bonus.command.delete_tag_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetAvailableCashbackBonusesForPlayerQuery = (client: IRpcClient, payload: IGetAvailableCashbackBonusesForPlayerQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAvailableCashbackBonusesForPlayerQuery, IBonusGraphQLDto[]>(payload, `sumstats.platform.bonus.query.get_available_cashback_bonuses_for_player`, `${bonus_location}/sumstats.platform.bonus.query.get_available_cashback_bonuses_for_player`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBonusReportWithdrawalsAfterBonusInfoQuery = (client: IRpcClient, payload: IGetBonusReportWithdrawalsAfterBonusInfoQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBonusReportWithdrawalsAfterBonusInfoQuery, { [key: string]: IBonusReportWithdrawalsAfterBonusInfo }>(payload, `sumstats.platform.bonus.query.get_bonus_reports_withdrawals_after_bonus`, `${bonus_location}/sumstats.platform.bonus.query.get_bonus_reports_withdrawals_after_bonus`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetCashbackDetailsForPlayerQuery = (client: IRpcClient, payload: IGetCashbackDetailsForPlayerQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCashbackDetailsForPlayerQuery, ICashbackDetails>(payload, `sumstats.platform.bonus.query.get_cashback_details_for_player`, `${bonus_location}/sumstats.platform.bonus.query.get_cashback_details_for_player`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetCashbackStatusForPlayerQuery = (client: IRpcClient, payload: IGetCashbackStatusForPlayerQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCashbackStatusForPlayerQuery, ICashbackStatus>(payload, `sumstats.platform.bonus.query.get_cashback_status_for_player`, `${bonus_location}/sumstats.platform.bonus.query.get_cashback_status_for_player`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateBonusTagGroupCommand = (client: IRpcClient, payload: IUpdateBonusTagGroupCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateBonusTagGroupCommand, null>(payload, `sumstats.platform.bonus.command.update_tag_group`, `${bonus_location}/sumstats.platform.bonus.command.update_tag_group`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d8e83-e81d-758d-9ebf-b40dbaf5259c(default),018d9c4c-2be8-7617-b8be-938e79ac4943(default),018d9c4c-68c5-711f-8bc9-8b9148aff0b7(default),018d8847-f0d8-795a-84a3-604687960e1f(default),018d9c4d-be07-7b1a-840d-1b7d016dd510(default),018d8819-bcf6-7ef1-b837-df05e9001ace(default),018d881a-13e8-7f65-a65a-177b394287d3(@STATIC/BONUS_BULK_UPLOAD),018d889a-7c59-7b49-89ca-a4c4269a2d6d(default),018d8827-e2de-7b72-9576-4101b39ef00d(default),018d8828-08df-7d89-9ddf-cb0b63b7b094(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllPlayerBonusesQuery = (client: IRpcClient, payload: IFindAllPlayerBonusesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllPlayerBonusesQuery, IPage<IPlayerBonusGraphQLDto>>(payload, `sumstats.platform.bonus.query.find_all_player_bonuses`, `${bonus_location}/sumstats.platform.bonus.query.find_all_player_bonuses`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(default),018d8819-0db7-72b3-b593-bb2ded6392b1(default),018d881b-58e8-70a6-9ac3-69ae55b8b4a6(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllBonusesQuery = (client: IRpcClient, payload: IFindAllBonusesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllBonusesQuery, IPage<IBonusGraphQLDto>>(payload, `sumstats.platform.bonus.query.find_all_bonuses`, `${bonus_location}/sumstats.platform.bonus.query.find_all_bonuses`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllPlayerBonusResources = (client: IRpcClient, payload: IFindAllPlayerBonusResources, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllPlayerBonusResources, IPage<IPlayerBonusResourceReadDto>>(payload, `sumstats.platform.bonus.find_all_player_bonus_resources_with_cursor`, `${bonus_location}/sumstats.platform.bonus.find_all_player_bonus_resources_with_cursor`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindResourcesAttachedToCashbackQuery = (client: IRpcClient, payload: IFindResourcesAttachedToCashbackQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindResourcesAttachedToCashbackQuery, IPage<IResourcesAttachedToCashbackDto>>(payload, `sumstats.platform.bonus.find_all_resources_attached_to_cashback`, `${bonus_location}/sumstats.platform.bonus.find_all_resources_attached_to_cashback`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, SERVICE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/BONUS),018d8819-0db7-72b3-b593-bb2ded6392b1(@STATIC/BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS),018d881a-13e8-7f65-a65a-177b394287d3(@STATIC/BONUS_BULK_UPLOAD),018e141c-8be0-7ac2-9f4a-9c2f2f31b8c8(@STATIC/BONUS_SHARE_LIMITS),018fe35e-ce19-76ab-b543-1d839239e77a(@STATIC/BONUS_RULES),018d88a0-2241-797d-a726-d7a1b2541dd6(@STATIC/VIP_CLUB)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetBonusesByIdsQuery = (client: IRpcClient, payload: IGetBonusesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBonusesByIdsQuery, { [key: string]: IBonusGraphQLDto }>(payload, `sumstats.platform.bonus.query.get_bonus_by_bonuses_ids`, `${bonus_location}/sumstats.platform.bonus.query.get_bonus_by_bonuses_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindBonusById = (client: IRpcClient, payload: IFindBonusById, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindBonusById, IBonusGraphQLDto | null | undefined>(payload, `sumstats.platform.bonus.query.find_bonus_by_bonus_id`, `${bonus_location}/sumstats.platform.bonus.query.find_bonus_by_bonus_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindPlayerBonusById = (client: IRpcClient, payload: IFindPlayerBonusById, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindPlayerBonusById, IPlayerBonusDto | null | undefined>(payload, `sumstats.platform.bonus.query.find_player_bonus_by_id`, `${bonus_location}/sumstats.platform.bonus.query.find_player_bonus_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetBonusAmountToBeGiven = (client: IRpcClient, payload: IGetBonusAmountToBeGiven, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetBonusAmountToBeGiven, IMoney | null | undefined>(payload, `sumstats.platform.bonus.query.get_bonus_amount_to_be_given`, `${bonus_location}/sumstats.platform.bonus.query.get_bonus_amount_to_be_given`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetWageringProgress = (client: IRpcClient, payload: IGetWageringProgress, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetWageringProgress, IWageringProgressDto>(payload, `sumstats.platform.bonus.query.get_wagering_progress`, `${bonus_location}/sumstats.platform.bonus.query.get_wagering_progress`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d881a-9ddf-77c8-84d7-c0f6b951f24a(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_CreateBonusTagCommand = (client: IRpcClient, payload: ICreateBonusTagCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateBonusTagCommand, string>(payload, `sumstats.platform.bonus.command.create_tag`, `${bonus_location}/sumstats.platform.bonus.command.create_tag`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindBonusTagByIdQuery = (client: IRpcClient, payload: IFindBonusTagByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindBonusTagByIdQuery, ITagDto | null | undefined>(payload, `sumstats.platform.bonus.query.find_bonus_tag_by_id`, `${bonus_location}/sumstats.platform.bonus.query.find_bonus_tag_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018d9c4d-be07-7b1a-840d-1b7d016dd510(@STATIC/PLAYER_BONUS),018d8819-bcf6-7ef1-b837-df05e9001ace(@STATIC/PLAYER_BONUS),018d881a-13e8-7f65-a65a-177b394287d3(@STATIC/BONUS_BULK_UPLOAD)'.
 * [!] The message doesn't have error mappings.
 */
export const call_FindBonusBulkUploadTaskByIdQuery = (client: IRpcClient, payload: IFindBonusBulkUploadTaskByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindBonusBulkUploadTaskByIdQuery, IBonusBulkUploadTaskDto | null | undefined>(payload, `sumstats.platform.bonus.query.find_bulk_upload_task_by_id`, `${bonus_location}/sumstats.platform.bonus.query.find_bulk_upload_task_by_id`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * The message requires the following acl: '018fc8fd-41c8-7545-90fb-d4c09164a6de(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_CreateBonusRuleByOperatorCommand = (client: IRpcClient, payload: ICreateBonusRuleByOperatorCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateBonusRuleByOperatorCommand, null>(payload, `sumstats.platform.bonus.command.create_bonus_rule`, `${bonus_location}/sumstats.platform.bonus.command.create_bonus_rule`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllBonusTagGroupsQuery = (client: IRpcClient, payload: IFindAllBonusTagGroupsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllBonusTagGroupsQuery, IPage<ITagGroupDto>>(payload, `sumstats.platform.bonus.query.find_all_tag_groups`, `${bonus_location}/sumstats.platform.bonus.query.find_all_tag_groups`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IActivatePlayerBonusByPlayerErrorMapping
 */
export const call_ActivatePlayerBonusByPlayerCommand = (client: IRpcClient, payload: IActivatePlayerBonusByPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IActivatePlayerBonusByPlayerCommand, IBonusActivateResult>(payload, `sumstats.platform.bonus.command.activate_player_bonus_by_player`, `${bonus_location}/sumstats.platform.bonus.command.activate_player_bonus_by_player`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in ICancelPlayerBonusByPlayerErrorMapping
 */
export const call_CancelPlayerBonusByPlayerCommand = (client: IRpcClient, payload: ICancelPlayerBonusByPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICancelPlayerBonusByPlayerCommand, IBonusCancelResult>(payload, `sumstats.platform.bonus.command.cancel_player_bonus_by_player`, `${bonus_location}/sumstats.platform.bonus.command.cancel_player_bonus_by_player`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IClaimBonusByPlayerErrorMapping
 */
export const call_ClaimBonusByPlayerCommand = (client: IRpcClient, payload: IClaimBonusByPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IClaimBonusByPlayerCommand, IBonusClaimResult>(payload, `sumstats.platform.bonus.command.claim_bonus_by_player`, `${bonus_location}/sumstats.platform.bonus.command.claim_bonus_by_player`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IClaimBonusByPromotionCodeErrorMapping
 */
export const call_ClaimBonusByPromotionCodeCommand = (client: IRpcClient, payload: IClaimBonusByPromotionCodeCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IClaimBonusByPromotionCodeCommand, IBonusClaimResult>(payload, `sumstats.platform.bonus.command.claim_bonus_by_promotion_code`, `${bonus_location}/sumstats.platform.bonus.command.claim_bonus_by_promotion_code`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * The message error mappings described in IGetCashbackSumByPlayerCommandErrorMapping
 */
export const call_GetCashbackSumByPlayerCommand = (client: IRpcClient, payload: IGetCashbackSumByPlayerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetCashbackSumByPlayerCommand, IMoney>(payload, `sumstats.platform.bonus.command.get_cashback_sum_by_player`, `${bonus_location}/sumstats.platform.bonus.command.get_cashback_sum_by_player`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindAvailableBonusDetailsByIdQuery = (client: IRpcClient, payload: IFindAvailableBonusDetailsByIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAvailableBonusDetailsByIdQuery, IBonusGraphQLDto | null | undefined>(payload, `sumstats.platform.bonus.query.find_available_bonus_details_by_bonus_id`, `${bonus_location}/sumstats.platform.bonus.query.find_available_bonus_details_by_bonus_id`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetNotSettledResourceCountQuery = (client: IRpcClient, payload: IGetNotSettledResourceCountQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetNotSettledResourceCountQuery, INotSettledResourcesByProductCount[]>(payload, `sumstats.platform.bonus.get_not_settled_resource_count`, `${bonus_location}/sumstats.platform.bonus.get_not_settled_resource_count`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetEligibilityClaimRulesInfoBatchQuery = (client: IRpcClient, payload: IGetEligibilityClaimRulesInfoBatchQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetEligibilityClaimRulesInfoBatchQuery, { [key: string]: EligibilityRuleProgress[] }>(payload, `sumstats.platform.bonus.query.get_eligibility_claim_rules_info_batch`, `${bonus_location}/sumstats.platform.bonus.query.get_eligibility_claim_rules_info_batch`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ClaimBonusByVipClub = (client: IRpcClient, payload: IClaimBonusByVipClub, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IClaimBonusByVipClub, IBonusClaimResult>(payload, `sumstats.platform.bonus.command.claim_bonus_by_vip_club`, `${bonus_location}/sumstats.platform.bonus.command.claim_bonus_by_vip_club`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ClaimBonusOnPlayerRegistrationCommand = (client: IRpcClient, payload: IClaimBonusOnPlayerRegistrationCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IClaimBonusOnPlayerRegistrationCommand, null>(payload, `sumstats.platform.bonus.command.claim_bonus_on_player_registration`, `${bonus_location}/sumstats.platform.bonus.command.claim_bonus_on_player_registration`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindActivatedPlayerBonusesByPlayerIdQuery = (client: IRpcClient, payload: IFindActivatedPlayerBonusesByPlayerIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindActivatedPlayerBonusesByPlayerIdQuery, IPlayerBonusShortDto[]>(payload, `sumstats.platform.bonus.query.find_activated_player_bonuses`, `${bonus_location}/sumstats.platform.bonus.query.find_activated_player_bonuses`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAvailableForGamePlayerBonusQuery = (client: IRpcClient, payload: IFindAvailableForGamePlayerBonusQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAvailableForGamePlayerBonusQuery, IGamePlayerBonusMatchResult>(payload, `sumstats.platform.bonus.query.find_available_for_game_player_bonus`, `${bonus_location}/sumstats.platform.bonus.query.find_available_for_game_player_bonus`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindGamePlayerBonusInfoQuery = (client: IRpcClient, payload: IFindGamePlayerBonusInfoQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindGamePlayerBonusInfoQuery, IGamePlayerBonusInfo | null | undefined>(payload, `sumstats.platform.bonus.query.find_game_player_bonus_info`, `${bonus_location}/sumstats.platform.bonus.query.find_game_player_bonus_info`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindPlayerIdByPlayerBonusIdQuery = (client: IRpcClient, payload: IFindPlayerIdByPlayerBonusIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindPlayerIdByPlayerBonusIdQuery, string | null | undefined>(payload, `sumstats.platform.bonus.query.find_player_id_by_player_bonus_id`, `${bonus_location}/sumstats.platform.bonus.query.find_player_id_by_player_bonus_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindRelevantPlayerBonusByPlayerIdQuery = (client: IRpcClient, payload: IFindRelevantPlayerBonusByPlayerIdQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindRelevantPlayerBonusByPlayerIdQuery, IPlayerBonusMatchResultView>(payload, `sumstats.platform.bonus.query.find_relevant_player_bonus_by_player_id`, `${bonus_location}/sumstats.platform.bonus.query.find_relevant_player_bonus_by_player_id`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindRelevantPlayerBonusOnSportsbookBatch = (client: IRpcClient, payload: IFindRelevantPlayerBonusOnSportsbookBatch, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindRelevantPlayerBonusOnSportsbookBatch, IRelevantPlayerBonusMatchOnSportsbookBatchResult>(payload, `sumstats.platform.bonus.query.find_relevant_player_bonuses_on_sb_batch`, `${bonus_location}/sumstats.platform.bonus.query.find_relevant_player_bonuses_on_sb_batch`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetAvailableBonusesForPlayer = (client: IRpcClient, payload: IGetAvailableBonusesForPlayer, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAvailableBonusesForPlayer, IBonusGraphQLDto[]>(payload, `sumstats.platform.bonus.query.get_available_bonuses_for_player`, `${bonus_location}/sumstats.platform.bonus.query.get_available_bonuses_for_player`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetAvailableBonusesForVipClubPlayerQuery = (client: IRpcClient, payload: IGetAvailableBonusesForVipClubPlayerQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetAvailableBonusesForVipClubPlayerQuery, IBonusGraphQLDto[]>(payload, `sumstats.platform.bonus.query.get_available_bonuses_for_vip_club`, `${bonus_location}/sumstats.platform.bonus.query.get_available_bonuses_for_vip_club`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetMaxWinAllowedForFreeBetQuery = (client: IRpcClient, payload: IGetMaxWinAllowedForFreeBetQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetMaxWinAllowedForFreeBetQuery, IMoney | null | undefined>(payload, `sumstats.platform.bonus.query.get_max_win_allowed_for_free_bet`, `${bonus_location}/sumstats.platform.bonus.query.get_max_win_allowed_for_free_bet`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetPlayerBonusByPlayerQuery = (client: IRpcClient, payload: IGetPlayerBonusByPlayerQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetPlayerBonusByPlayerQuery, IPlayerBonusShortDto>(payload, `sumstats.platform.bonus.query.find_player_bonus_by_player`, `${bonus_location}/sumstats.platform.bonus.query.find_player_bonus_by_player`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_GetWalletTypesOnSportsbookBonusBetQuery = (client: IRpcClient, payload: IGetWalletTypesOnSportsbookBonusBetQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetWalletTypesOnSportsbookBonusBetQuery, TWalletType[]>(payload, `sumstats.platform.bonus.query.get_wallet_types_on_sportsbook_bonus_bet`, `${bonus_location}/sumstats.platform.bonus.query.get_wallet_types_on_sportsbook_bonus_bet`, metadata, settings);
