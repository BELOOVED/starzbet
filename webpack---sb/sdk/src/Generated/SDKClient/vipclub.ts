/**
 * ⚠️ GENERATED CODE - DO NOT MODIFY BY HAND
 *
 * 🔨️ GENERATED BY kotlin/tools/code-generator-common/src/main/kotlin/com/sumstats/codegenerator/common/sdk/typescript/SDKTypescriptGenerator.kt
 */
import type { IBonusGraphQLDto } from "../platform/bonus/api/dto/BonusGraphQLDto"
import type { IContributionTableDto } from "../platform/vipclub/api/contributiontable/dto/ContributionTableDto"
import type { ICountPlayersPerLevelQuery } from "../platform/vipclub/api/playerstate/query/CountPlayersPerLevelQuery"
import type { ICreatePlayerStateManuallyCommand } from "../platform/vipclub/api/playerstate/command/CreatePlayerStateManuallyCommand"
import type { ICreateTournamentTemplateCommand } from "../platform/vipclub/api/prize/template/command/CreateTournamentTemplateCommand"
import type { IDeleteTournamentTemplateCommand } from "../platform/vipclub/api/prize/template/command/DeleteTournamentTemplateCommand"
import type { IFindAllContributionTablesQuery } from "../platform/vipclub/api/contributiontable/query/FindAllContributionTablesQuery"
import type { IFindAllLevelRulesQuery } from "../platform/vipclub/api/levelrules/query/FindAllLevelRulesQuery"
import type { IFindAllTournamentTemplatesQuery } from "../platform/vipclub/api/prize/template/query/FindAllTournamentTemplatesQuery"
import type { IFindAllTournamentsQuery } from "../platform/vipclub/api/prize/tournament/query/FindAllTournamentsQuery"
import type { IFindContributionTablesByIdsQuery } from "../platform/vipclub/api/contributiontable/query/FindContributionTablesByIdsQuery"
import type { IFindLevelRulesByIdsQuery } from "../platform/vipclub/api/levelrules/query/FindLevelRulesByIdsQuery"
import type { IFindLevelsByIdsQuery } from "../platform/vipclub/api/playerstate/query/FindLevelsByIdsQuery"
import type { IFindSelfVipClubStateQuery } from "../platform/vipclub/api/playerstate/query/FindSelfVipClubStateQuery"
import type { IFindTournamentTemplateByIdsQuery } from "../platform/vipclub/api/prize/template/query/FindTournamentTemplateByIdsQuery"
import type { IFindTournamentWinnersQuery } from "../platform/vipclub/api/prize/tournament/query/FindTournamentWinnersQuery"
import type { IFindVipClubStateByIdsQuery } from "../platform/vipclub/api/playerstate/query/FindVipClubStateByIdsQuery"
import type { IForceFinishTournamentCommand } from "../platform/vipclub/api/prize/tournament/command/ForceFinishTournamentCommand"
import type { IForceGenerateReportCommand } from "../platform/vipclub/api/prize/tournament/command/ForceGenerateReportCommand"
import type { IForcePassivationCheckerCommand } from "../platform/vipclub/api/playerstate/command/ForcePassivationCheckerCommand"
import type { IForceTournamentPayCommand } from "../platform/vipclub/api/prize/tournament/command/ForceTournamentPayCommand"
import type { IForceTournamentSettleCommand } from "../platform/vipclub/api/prize/tournament/command/ForceTournamentSettleCommand"
import type { IGetGlobalRewardsQuery } from "../platform/vipclub/api/levelrules/query/GetGlobalRewardsQuery"
import type { IGetLatestContributionTableQuery } from "../platform/vipclub/api/contributiontable/query/GetLatestContributionTableQuery"
import type { IGetLatestLevelRulesQuery } from "../platform/vipclub/api/levelrules/query/GetLatestLevelRulesQuery"
import type { IGetLeaderBoardQuery } from "../platform/vipclub/api/leaderboard/query/GetLeaderBoardQuery"
import type { IGetSelfPlaceQuery } from "../platform/vipclub/api/leaderboard/query/GetSelfPlaceQuery"
import type { IGetVipClubLeaderBoardNeighboursQuery } from "../platform/vipclub/api/leaderboard/query/GetVipClubLeaderBoardNeighboursQuery"
import type { IGetVipClubSettingsQuery } from "../platform/vipclub/api/playerstate/query/GetVipClubSettingsQuery"
import type { IGlobalRewardsDto } from "../platform/vipclub/api/levelrules/dto/GlobalRewardsDto"
import type { IIsBonusListedInLevelRulesQuery } from "../platform/vipclub/api/levelrules/query/IsBonusListedInLevelRulesQuery"
import type { ILeaderBoarRow } from "../platform/vipclub/api/leaderboard/model/LeaderBoarRow"
import type { ILeaderBoardNeighbours } from "../platform/vipclub/api/leaderboard/dto/LeaderBoardNeighbours"
import type { ILeaderBoardResult } from "../platform/vipclub/api/leaderboard/dto/LeaderBoardResult"
import type { ILevelRulesDto } from "../platform/vipclub/api/levelrules/dto/LevelRulesDto"
import type { IPage } from "../graphqlbackend/cursor/Page"
import type { IPlayerStateDto } from "../platform/vipclub/api/playerstate/dto/PlayerStateDto"
import type { IRestartLeaderBoardCommand } from "../platform/vipclub/api/leaderboard/command/RestartLeaderBoardCommand"
import type { ITournamentDto } from "../platform/vipclub/api/prize/tournament/dto/TournamentDto"
import type { ITournamentTemplateDto } from "../platform/vipclub/api/prize/template/dto/TournamentTemplateDto"
import type { ITournamentWinner } from "../platform/vipclub/api/prize/tournament/model/TournamentWinner"
import type { IUpdateContributionTableCommand } from "../platform/vipclub/api/contributiontable/command/UpdateContributionTableCommand"
import type { IUpdateGlobalRewardsCommand } from "../platform/vipclub/api/levelrules/command/UpdateGlobalRewardsCommand"
import type { IUpdateLevelRulesCommand } from "../platform/vipclub/api/levelrules/command/UpdateLevelRulesCommand"
import type { IUpdateTournamentTemplateCommand } from "../platform/vipclub/api/prize/template/command/UpdateTournamentTemplateCommand"
import type { IVipClubCashbackPointsCommand } from "../platform/vipclub/api/playerstate/command/VipClubCashbackPointsCommand"
import type { IVipClubFindAllPlayerStatesQuery } from "../platform/vipclub/api/playerstate/query/VipClubFindAllPlayerStatesQuery"
import type { IVipClubFindAvailableBonusesQuery } from "../platform/vipclub/api/playerstate/query/VipClubFindAvailableBonusesQuery"
import type { IVipClubGetBonusIdsByPlayerQuery } from "../platform/vipclub/api/playerstate/query/VipClubGetBonusIdsByPlayerQuery"
import type { IVipClubPointsCorrectionCommand } from "../platform/vipclub/api/playerstate/command/VipClubPointsCorrectionCommand"
import type { IVipClubSettings } from "../platform/vipclub/api/playerstate/dto/VipClubSettings"
import type { IVipClubValidateBonusIdsCommand } from "../platform/vipclub/api/playerstate/command/VipClubValidateBonusIdsCommand"
import type { TLeaderBoardPeriod } from "../platform/vipclub/api/leaderboard/model/LeaderBoardPeriod"
import { IRpcClient } from "@sb/network-bus/RpcClient";
import { IMetadata } from "@sb/network-bus/Model";
import { ISetting } from "@sb/network-bus/Model";
import { emptySettings } from "@sb/network-bus/Model";
import { vip_club_location } from "./ProxyLocations";

/**
 * The message requires one of the following roles: ANON_ROLE
 * The message requires the following acl: '018d88a0-2241-797d-a726-d7a1b2541dd6(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetLatestContributionTableQuery = (client: IRpcClient, payload: IGetLatestContributionTableQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetLatestContributionTableQuery, IContributionTableDto>(payload, `sumstats.platform.vipclub.query.get_latest_contribution_table`, `${vip_club_location}/sumstats.platform.vipclub.query.get_latest_contribution_table`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllContributionTablesQuery = (client: IRpcClient, payload: IFindAllContributionTablesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllContributionTablesQuery, { [key: string]: IContributionTableDto }>(payload, `sumstats.platform.vipclub.query.find_all_contribution_tables`, `${vip_club_location}/sumstats.platform.vipclub.query.find_all_contribution_tables`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindContributionTablesByIdsQuery = (client: IRpcClient, payload: IFindContributionTablesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindContributionTablesByIdsQuery, { [key: string]: IContributionTableDto }>(payload, `sumstats.platform.vipclub.query.find_contribution_tables_by_ids`, `${vip_club_location}/sumstats.platform.vipclub.query.find_contribution_tables_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_GetVipClubSettingsQuery = (client: IRpcClient, payload: IGetVipClubSettingsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetVipClubSettingsQuery, IVipClubSettings>(payload, `sumstats.platform.vipclub.query.get_vip_club_settings`, `${vip_club_location}/sumstats.platform.vipclub.query.get_vip_club_settings`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, OPERATOR_ROLE, PLATFORM_PLAYER
 * The message requires the following acl: '018d88a0-2241-797d-a726-d7a1b2541dd6(default)'.
 * [!] The message doesn't have error mappings.
 */
export const call_GetLatestLevelRulesQuery = (client: IRpcClient, payload: IGetLatestLevelRulesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetLatestLevelRulesQuery, ILevelRulesDto>(payload, `sumstats.platform.vipclub.query.get_latest_level_rules`, `${vip_club_location}/sumstats.platform.vipclub.query.get_latest_level_rules`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllLevelRulesQuery = (client: IRpcClient, payload: IFindAllLevelRulesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllLevelRulesQuery, { [key: string]: ILevelRulesDto }>(payload, `sumstats.platform.vipclub.query.find_all_level_rules`, `${vip_club_location}/sumstats.platform.vipclub.query.find_all_level_rules`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindLevelRulesByIdsQuery = (client: IRpcClient, payload: IFindLevelRulesByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindLevelRulesByIdsQuery, { [key: string]: ILevelRulesDto }>(payload, `sumstats.platform.vipclub.query.find_level_rules_by_ids`, `${vip_club_location}/sumstats.platform.vipclub.query.find_level_rules_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, OPERATOR_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetGlobalRewardsQuery = (client: IRpcClient, payload: IGetGlobalRewardsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetGlobalRewardsQuery, IGlobalRewardsDto>(payload, `sumstats.platform.vipclub.query.get_global_rewards`, `${vip_club_location}/sumstats.platform.vipclub.query.get_global_rewards`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetLeaderBoardQuery = (client: IRpcClient, payload: IGetLeaderBoardQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetLeaderBoardQuery, { [key in TLeaderBoardPeriod]?: ILeaderBoardResult }>(payload, `sumstats.platform.vipclub.query.get_leader_board`, `${vip_club_location}/sumstats.platform.vipclub.query.get_leader_board`, metadata, settings);

/**
 * The message requires one of the following roles: ANON_ROLE, PLATFORM_PLAYER, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindTournamentWinnersQuery = (client: IRpcClient, payload: IFindTournamentWinnersQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindTournamentWinnersQuery, ITournamentWinner[]>(payload, `sumstats.platform.vipclub.query.get_tournament_winners`, `${vip_club_location}/sumstats.platform.vipclub.query.get_tournament_winners`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_CountPlayersPerLevelQuery = (client: IRpcClient, payload: ICountPlayersPerLevelQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICountPlayersPerLevelQuery, { [key: number]: number }>(payload, `sumstats.platform.vipclub.query.count_players_per_level`, `${vip_club_location}/sumstats.platform.vipclub.query.count_players_per_level`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_CreateTournamentTemplateCommand = (client: IRpcClient, payload: ICreateTournamentTemplateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreateTournamentTemplateCommand, null>(payload, `sumstats.platform.vipclub.command.create_tournament_template`, `${vip_club_location}/sumstats.platform.vipclub.command.create_tournament_template`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_DeleteTournamentTemplateCommand = (client: IRpcClient, payload: IDeleteTournamentTemplateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IDeleteTournamentTemplateCommand, null>(payload, `sumstats.platform.vipclub.command.delete_tournament_template`, `${vip_club_location}/sumstats.platform.vipclub.command.delete_tournament_template`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllTournamentTemplatesQuery = (client: IRpcClient, payload: IFindAllTournamentTemplatesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllTournamentTemplatesQuery, ITournamentTemplateDto[]>(payload, `sumstats.platform.vipclub.query.find_all_tournament_templates`, `${vip_club_location}/sumstats.platform.vipclub.query.find_all_tournament_templates`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindTournamentTemplateByIdsQuery = (client: IRpcClient, payload: IFindTournamentTemplateByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindTournamentTemplateByIdsQuery, { [key: string]: ITournamentTemplateDto }>(payload, `sumstats.platform.vipclub.query.find_tournament_template_by_ids`, `${vip_club_location}/sumstats.platform.vipclub.query.find_tournament_template_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateContributionTableCommand = (client: IRpcClient, payload: IUpdateContributionTableCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateContributionTableCommand, null>(payload, `sumstats.platform.vipclub.command.update_contribution_table`, `${vip_club_location}/sumstats.platform.vipclub.command.update_contribution_table`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateGlobalRewardsCommand = (client: IRpcClient, payload: IUpdateGlobalRewardsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateGlobalRewardsCommand, null>(payload, `sumstats.platform.vipclub.command.update_global_rewards`, `${vip_club_location}/sumstats.platform.vipclub.command.update_global_rewards`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateLevelRulesCommand = (client: IRpcClient, payload: IUpdateLevelRulesCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateLevelRulesCommand, null>(payload, `sumstats.platform.vipclub.command.update_level_rules`, `${vip_club_location}/sumstats.platform.vipclub.command.update_level_rules`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_UpdateTournamentTemplateCommand = (client: IRpcClient, payload: IUpdateTournamentTemplateCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IUpdateTournamentTemplateCommand, null>(payload, `sumstats.platform.vipclub.command.update_tournament_template`, `${vip_club_location}/sumstats.platform.vipclub.command.update_tournament_template`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_VipClubFindAllPlayerStatesQuery = (client: IRpcClient, payload: IVipClubFindAllPlayerStatesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVipClubFindAllPlayerStatesQuery, IPage<IPlayerStateDto>>(payload, `sumstats.platform.vipclub.query.find_all_player_states`, `${vip_club_location}/sumstats.platform.vipclub.query.find_all_player_states`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_VipClubPointsCorrectionCommand = (client: IRpcClient, payload: IVipClubPointsCorrectionCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVipClubPointsCorrectionCommand, null>(payload, `sumstats.platform.vipclub.command.point_correction`, `${vip_club_location}/sumstats.platform.vipclub.command.point_correction`, metadata, settings);

/**
 * The message requires one of the following roles: OPERATOR_ROLE, PLATFORM_PLAYER, ANON_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindAllTournamentsQuery = (client: IRpcClient, payload: IFindAllTournamentsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindAllTournamentsQuery, IPage<ITournamentDto>>(payload, `sumstats.platform.vipclub.query.find_all_tournaments`, `${vip_club_location}/sumstats.platform.vipclub.query.find_all_tournaments`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_FindSelfVipClubStateQuery = (client: IRpcClient, payload: IFindSelfVipClubStateQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindSelfVipClubStateQuery, IPlayerStateDto | null | undefined>(payload, `sumstats.platform.vipclub.query.find_self_state`, `${vip_club_location}/sumstats.platform.vipclub.query.find_self_state`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetSelfPlaceQuery = (client: IRpcClient, payload: IGetSelfPlaceQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetSelfPlaceQuery, { [key in TLeaderBoardPeriod]?: ILeaderBoarRow | null | undefined }>(payload, `sumstats.platform.vipclub.query.get_self_place`, `${vip_club_location}/sumstats.platform.vipclub.query.get_self_place`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_GetVipClubLeaderBoardNeighboursQuery = (client: IRpcClient, payload: IGetVipClubLeaderBoardNeighboursQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IGetVipClubLeaderBoardNeighboursQuery, { [key in TLeaderBoardPeriod]?: ILeaderBoardNeighbours | null | undefined }>(payload, `sumstats.platform.vipclub.query.get_vip_club_leader_board_neighbours`, `${vip_club_location}/sumstats.platform.vipclub.query.get_vip_club_leader_board_neighbours`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_VipClubCashbackPointsCommand = (client: IRpcClient, payload: IVipClubCashbackPointsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVipClubCashbackPointsCommand, null>(payload, `sumstats.platform.vipclub.command.cashback_points`, `${vip_club_location}/sumstats.platform.vipclub.command.cashback_points`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER
 * [!] The message doesn't have error mappings.
 */
export const call_VipClubFindAvailableBonusesQuery = (client: IRpcClient, payload: IVipClubFindAvailableBonusesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVipClubFindAvailableBonusesQuery, IBonusGraphQLDto[]>(payload, `sumstats.platform.vipclub.query.find_available_bonuses`, `${vip_club_location}/sumstats.platform.vipclub.query.find_available_bonuses`, metadata, settings);

/**
 * The message requires one of the following roles: PLATFORM_PLAYER, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_FindVipClubStateByIdsQuery = (client: IRpcClient, payload: IFindVipClubStateByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindVipClubStateByIdsQuery, { [key: string]: IPlayerStateDto }>(payload, `sumstats.platform.vipclub.query.find_states_by_ids`, `${vip_club_location}/sumstats.platform.vipclub.query.find_states_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_CreatePlayerStateManuallyCommand = (client: IRpcClient, payload: ICreatePlayerStateManuallyCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<ICreatePlayerStateManuallyCommand, null>(payload, `sumstats.platform.vipclub.command.create_player_state_manually`, `${vip_club_location}/sumstats.platform.vipclub.command.create_player_state_manually`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_FindLevelsByIdsQuery = (client: IRpcClient, payload: IFindLevelsByIdsQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IFindLevelsByIdsQuery, { [key: string]: number | null | undefined }>(payload, `sumstats.platform.vipclub.query.find_levels_by_ids`, `${vip_club_location}/sumstats.platform.vipclub.query.find_levels_by_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ForceFinishTournamentCommand = (client: IRpcClient, payload: IForceFinishTournamentCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IForceFinishTournamentCommand, null>(payload, `sumstats.platform.vipclub.command.force_finish_tournament`, `${vip_club_location}/sumstats.platform.vipclub.command.force_finish_tournament`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ForceGenerateReportCommand = (client: IRpcClient, payload: IForceGenerateReportCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IForceGenerateReportCommand, null>(payload, `sumstats.platform.vipclub.command.force_generate_report`, `${vip_club_location}/sumstats.platform.vipclub.command.force_generate_report`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ForcePassivationCheckerCommand = (client: IRpcClient, payload: IForcePassivationCheckerCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IForcePassivationCheckerCommand, null>(payload, `sumstats.platform.vipclub.command.force_passivation_checker`, `${vip_club_location}/sumstats.platform.vipclub.command.force_passivation_checker`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ForceTournamentPayCommand = (client: IRpcClient, payload: IForceTournamentPayCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IForceTournamentPayCommand, null>(payload, `sumstats.platform.vipclub.command.force_tournament_pay`, `${vip_club_location}/sumstats.platform.vipclub.command.force_tournament_pay`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_ForceTournamentSettleCommand = (client: IRpcClient, payload: IForceTournamentSettleCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IForceTournamentSettleCommand, null>(payload, `sumstats.platform.vipclub.command.force_tournament_settle`, `${vip_club_location}/sumstats.platform.vipclub.command.force_tournament_settle`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_IsBonusListedInLevelRulesQuery = (client: IRpcClient, payload: IIsBonusListedInLevelRulesQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IIsBonusListedInLevelRulesQuery, boolean>(payload, `sumstats.platform.vipclub.query.is_bonus_listed_in_level_rules`, `${vip_club_location}/sumstats.platform.vipclub.query.is_bonus_listed_in_level_rules`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_RestartLeaderBoardCommand = (client: IRpcClient, payload: IRestartLeaderBoardCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IRestartLeaderBoardCommand, null>(payload, `sumstats.platform.vipclub.query.restart_leader_board`, `${vip_club_location}/sumstats.platform.vipclub.query.restart_leader_board`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE
 * [!] The message doesn't have error mappings.
 */
export const call_VipClubValidateBonusIdsCommand = (client: IRpcClient, payload: IVipClubValidateBonusIdsCommand, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVipClubValidateBonusIdsCommand, boolean>(payload, `sumstats.platform.vipclub.command.validate_bonus_ids`, `${vip_club_location}/sumstats.platform.vipclub.command.validate_bonus_ids`, metadata, settings);

/**
 * The message requires one of the following roles: SERVICE, OPERATOR_ROLE
 * [!] The message doesn't have error mappings.
 */
export const call_VipClubGetBonusIdsByPlayerQuery = (client: IRpcClient, payload: IVipClubGetBonusIdsByPlayerQuery, metadata?: IMetadata, settings: ISetting = emptySettings) => client.call<IVipClubGetBonusIdsByPlayerQuery, string[]>(payload, `sumstats.platform.vipclub.query.get_bonus_ids_by_player`, `${vip_club_location}/sumstats.platform.vipclub.query.get_bonus_ids_by_player`, metadata, settings);
